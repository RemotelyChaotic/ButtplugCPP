// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buttplug_rs_ffi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_buttplug_5frs_5fffi_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_buttplug_5frs_5fffi_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3021000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_buttplug_5frs_5fffi_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_buttplug_5frs_5fffi_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_buttplug_5frs_5fffi_2eproto;
namespace Buttplug {
class ButtplugFFIServerMessage;
struct ButtplugFFIServerMessageDefaultTypeInternal;
extern ButtplugFFIServerMessageDefaultTypeInternal _ButtplugFFIServerMessage_default_instance_;
class ButtplugFFIServerMessage_FFIMessage;
struct ButtplugFFIServerMessage_FFIMessageDefaultTypeInternal;
extern ButtplugFFIServerMessage_FFIMessageDefaultTypeInternal _ButtplugFFIServerMessage_FFIMessage_default_instance_;
class ClientMessage;
struct ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class ClientMessage_ConnectLocal;
struct ClientMessage_ConnectLocalDefaultTypeInternal;
extern ClientMessage_ConnectLocalDefaultTypeInternal _ClientMessage_ConnectLocal_default_instance_;
class ClientMessage_ConnectWebsocket;
struct ClientMessage_ConnectWebsocketDefaultTypeInternal;
extern ClientMessage_ConnectWebsocketDefaultTypeInternal _ClientMessage_ConnectWebsocket_default_instance_;
class ClientMessage_Disconnect;
struct ClientMessage_DisconnectDefaultTypeInternal;
extern ClientMessage_DisconnectDefaultTypeInternal _ClientMessage_Disconnect_default_instance_;
class ClientMessage_FFIMessage;
struct ClientMessage_FFIMessageDefaultTypeInternal;
extern ClientMessage_FFIMessageDefaultTypeInternal _ClientMessage_FFIMessage_default_instance_;
class ClientMessage_Ping;
struct ClientMessage_PingDefaultTypeInternal;
extern ClientMessage_PingDefaultTypeInternal _ClientMessage_Ping_default_instance_;
class ClientMessage_StartScanning;
struct ClientMessage_StartScanningDefaultTypeInternal;
extern ClientMessage_StartScanningDefaultTypeInternal _ClientMessage_StartScanning_default_instance_;
class ClientMessage_StopAllDevices;
struct ClientMessage_StopAllDevicesDefaultTypeInternal;
extern ClientMessage_StopAllDevicesDefaultTypeInternal _ClientMessage_StopAllDevices_default_instance_;
class ClientMessage_StopScanning;
struct ClientMessage_StopScanningDefaultTypeInternal;
extern ClientMessage_StopScanningDefaultTypeInternal _ClientMessage_StopScanning_default_instance_;
class DeviceEvent;
struct DeviceEventDefaultTypeInternal;
extern DeviceEventDefaultTypeInternal _DeviceEvent_default_instance_;
class DeviceEvent_BatteryLevelReading;
struct DeviceEvent_BatteryLevelReadingDefaultTypeInternal;
extern DeviceEvent_BatteryLevelReadingDefaultTypeInternal _DeviceEvent_BatteryLevelReading_default_instance_;
class DeviceEvent_Disconnect;
struct DeviceEvent_DisconnectDefaultTypeInternal;
extern DeviceEvent_DisconnectDefaultTypeInternal _DeviceEvent_Disconnect_default_instance_;
class DeviceEvent_RSSILevelReading;
struct DeviceEvent_RSSILevelReadingDefaultTypeInternal;
extern DeviceEvent_RSSILevelReadingDefaultTypeInternal _DeviceEvent_RSSILevelReading_default_instance_;
class DeviceEvent_RawReading;
struct DeviceEvent_RawReadingDefaultTypeInternal;
extern DeviceEvent_RawReadingDefaultTypeInternal _DeviceEvent_RawReading_default_instance_;
class DeviceMessage;
struct DeviceMessageDefaultTypeInternal;
extern DeviceMessageDefaultTypeInternal _DeviceMessage_default_instance_;
class DeviceMessage_BatteryLevelCmd;
struct DeviceMessage_BatteryLevelCmdDefaultTypeInternal;
extern DeviceMessage_BatteryLevelCmdDefaultTypeInternal _DeviceMessage_BatteryLevelCmd_default_instance_;
class DeviceMessage_FFIMessage;
struct DeviceMessage_FFIMessageDefaultTypeInternal;
extern DeviceMessage_FFIMessageDefaultTypeInternal _DeviceMessage_FFIMessage_default_instance_;
class DeviceMessage_LinearCmd;
struct DeviceMessage_LinearCmdDefaultTypeInternal;
extern DeviceMessage_LinearCmdDefaultTypeInternal _DeviceMessage_LinearCmd_default_instance_;
class DeviceMessage_LinearComponent;
struct DeviceMessage_LinearComponentDefaultTypeInternal;
extern DeviceMessage_LinearComponentDefaultTypeInternal _DeviceMessage_LinearComponent_default_instance_;
class DeviceMessage_RSSILevelCmd;
struct DeviceMessage_RSSILevelCmdDefaultTypeInternal;
extern DeviceMessage_RSSILevelCmdDefaultTypeInternal _DeviceMessage_RSSILevelCmd_default_instance_;
class DeviceMessage_RawReadCmd;
struct DeviceMessage_RawReadCmdDefaultTypeInternal;
extern DeviceMessage_RawReadCmdDefaultTypeInternal _DeviceMessage_RawReadCmd_default_instance_;
class DeviceMessage_RawSubscribeCmd;
struct DeviceMessage_RawSubscribeCmdDefaultTypeInternal;
extern DeviceMessage_RawSubscribeCmdDefaultTypeInternal _DeviceMessage_RawSubscribeCmd_default_instance_;
class DeviceMessage_RawUnsubscribeCmd;
struct DeviceMessage_RawUnsubscribeCmdDefaultTypeInternal;
extern DeviceMessage_RawUnsubscribeCmdDefaultTypeInternal _DeviceMessage_RawUnsubscribeCmd_default_instance_;
class DeviceMessage_RawWriteCmd;
struct DeviceMessage_RawWriteCmdDefaultTypeInternal;
extern DeviceMessage_RawWriteCmdDefaultTypeInternal _DeviceMessage_RawWriteCmd_default_instance_;
class DeviceMessage_RotateCmd;
struct DeviceMessage_RotateCmdDefaultTypeInternal;
extern DeviceMessage_RotateCmdDefaultTypeInternal _DeviceMessage_RotateCmd_default_instance_;
class DeviceMessage_RotateComponent;
struct DeviceMessage_RotateComponentDefaultTypeInternal;
extern DeviceMessage_RotateComponentDefaultTypeInternal _DeviceMessage_RotateComponent_default_instance_;
class DeviceMessage_StopDeviceCmd;
struct DeviceMessage_StopDeviceCmdDefaultTypeInternal;
extern DeviceMessage_StopDeviceCmdDefaultTypeInternal _DeviceMessage_StopDeviceCmd_default_instance_;
class DeviceMessage_VibrateCmd;
struct DeviceMessage_VibrateCmdDefaultTypeInternal;
extern DeviceMessage_VibrateCmdDefaultTypeInternal _DeviceMessage_VibrateCmd_default_instance_;
class DeviceMessage_VibrateComponent;
struct DeviceMessage_VibrateComponentDefaultTypeInternal;
extern DeviceMessage_VibrateComponentDefaultTypeInternal _DeviceMessage_VibrateComponent_default_instance_;
class ServerMessage;
struct ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
class ServerMessage_DeviceAdded;
struct ServerMessage_DeviceAddedDefaultTypeInternal;
extern ServerMessage_DeviceAddedDefaultTypeInternal _ServerMessage_DeviceAdded_default_instance_;
class ServerMessage_DeviceRemoved;
struct ServerMessage_DeviceRemovedDefaultTypeInternal;
extern ServerMessage_DeviceRemovedDefaultTypeInternal _ServerMessage_DeviceRemoved_default_instance_;
class ServerMessage_Disconnect;
struct ServerMessage_DisconnectDefaultTypeInternal;
extern ServerMessage_DisconnectDefaultTypeInternal _ServerMessage_Disconnect_default_instance_;
class ServerMessage_Error;
struct ServerMessage_ErrorDefaultTypeInternal;
extern ServerMessage_ErrorDefaultTypeInternal _ServerMessage_Error_default_instance_;
class ServerMessage_MessageAttributes;
struct ServerMessage_MessageAttributesDefaultTypeInternal;
extern ServerMessage_MessageAttributesDefaultTypeInternal _ServerMessage_MessageAttributes_default_instance_;
class ServerMessage_Ok;
struct ServerMessage_OkDefaultTypeInternal;
extern ServerMessage_OkDefaultTypeInternal _ServerMessage_Ok_default_instance_;
class ServerMessage_ScanningFinished;
struct ServerMessage_ScanningFinishedDefaultTypeInternal;
extern ServerMessage_ScanningFinishedDefaultTypeInternal _ServerMessage_ScanningFinished_default_instance_;
}  // namespace Buttplug
PROTOBUF_NAMESPACE_OPEN
template <>
::Buttplug::ButtplugFFIServerMessage* Arena::CreateMaybeMessage<::Buttplug::ButtplugFFIServerMessage>(Arena*);
template <>
::Buttplug::ButtplugFFIServerMessage_FFIMessage* Arena::CreateMaybeMessage<::Buttplug::ButtplugFFIServerMessage_FFIMessage>(Arena*);
template <>
::Buttplug::ClientMessage* Arena::CreateMaybeMessage<::Buttplug::ClientMessage>(Arena*);
template <>
::Buttplug::ClientMessage_ConnectLocal* Arena::CreateMaybeMessage<::Buttplug::ClientMessage_ConnectLocal>(Arena*);
template <>
::Buttplug::ClientMessage_ConnectWebsocket* Arena::CreateMaybeMessage<::Buttplug::ClientMessage_ConnectWebsocket>(Arena*);
template <>
::Buttplug::ClientMessage_Disconnect* Arena::CreateMaybeMessage<::Buttplug::ClientMessage_Disconnect>(Arena*);
template <>
::Buttplug::ClientMessage_FFIMessage* Arena::CreateMaybeMessage<::Buttplug::ClientMessage_FFIMessage>(Arena*);
template <>
::Buttplug::ClientMessage_Ping* Arena::CreateMaybeMessage<::Buttplug::ClientMessage_Ping>(Arena*);
template <>
::Buttplug::ClientMessage_StartScanning* Arena::CreateMaybeMessage<::Buttplug::ClientMessage_StartScanning>(Arena*);
template <>
::Buttplug::ClientMessage_StopAllDevices* Arena::CreateMaybeMessage<::Buttplug::ClientMessage_StopAllDevices>(Arena*);
template <>
::Buttplug::ClientMessage_StopScanning* Arena::CreateMaybeMessage<::Buttplug::ClientMessage_StopScanning>(Arena*);
template <>
::Buttplug::DeviceEvent* Arena::CreateMaybeMessage<::Buttplug::DeviceEvent>(Arena*);
template <>
::Buttplug::DeviceEvent_BatteryLevelReading* Arena::CreateMaybeMessage<::Buttplug::DeviceEvent_BatteryLevelReading>(Arena*);
template <>
::Buttplug::DeviceEvent_Disconnect* Arena::CreateMaybeMessage<::Buttplug::DeviceEvent_Disconnect>(Arena*);
template <>
::Buttplug::DeviceEvent_RSSILevelReading* Arena::CreateMaybeMessage<::Buttplug::DeviceEvent_RSSILevelReading>(Arena*);
template <>
::Buttplug::DeviceEvent_RawReading* Arena::CreateMaybeMessage<::Buttplug::DeviceEvent_RawReading>(Arena*);
template <>
::Buttplug::DeviceMessage* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage>(Arena*);
template <>
::Buttplug::DeviceMessage_BatteryLevelCmd* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_BatteryLevelCmd>(Arena*);
template <>
::Buttplug::DeviceMessage_FFIMessage* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_FFIMessage>(Arena*);
template <>
::Buttplug::DeviceMessage_LinearCmd* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_LinearCmd>(Arena*);
template <>
::Buttplug::DeviceMessage_LinearComponent* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_LinearComponent>(Arena*);
template <>
::Buttplug::DeviceMessage_RSSILevelCmd* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_RSSILevelCmd>(Arena*);
template <>
::Buttplug::DeviceMessage_RawReadCmd* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_RawReadCmd>(Arena*);
template <>
::Buttplug::DeviceMessage_RawSubscribeCmd* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_RawSubscribeCmd>(Arena*);
template <>
::Buttplug::DeviceMessage_RawUnsubscribeCmd* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_RawUnsubscribeCmd>(Arena*);
template <>
::Buttplug::DeviceMessage_RawWriteCmd* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_RawWriteCmd>(Arena*);
template <>
::Buttplug::DeviceMessage_RotateCmd* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_RotateCmd>(Arena*);
template <>
::Buttplug::DeviceMessage_RotateComponent* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_RotateComponent>(Arena*);
template <>
::Buttplug::DeviceMessage_StopDeviceCmd* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_StopDeviceCmd>(Arena*);
template <>
::Buttplug::DeviceMessage_VibrateCmd* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_VibrateCmd>(Arena*);
template <>
::Buttplug::DeviceMessage_VibrateComponent* Arena::CreateMaybeMessage<::Buttplug::DeviceMessage_VibrateComponent>(Arena*);
template <>
::Buttplug::ServerMessage* Arena::CreateMaybeMessage<::Buttplug::ServerMessage>(Arena*);
template <>
::Buttplug::ServerMessage_DeviceAdded* Arena::CreateMaybeMessage<::Buttplug::ServerMessage_DeviceAdded>(Arena*);
template <>
::Buttplug::ServerMessage_DeviceRemoved* Arena::CreateMaybeMessage<::Buttplug::ServerMessage_DeviceRemoved>(Arena*);
template <>
::Buttplug::ServerMessage_Disconnect* Arena::CreateMaybeMessage<::Buttplug::ServerMessage_Disconnect>(Arena*);
template <>
::Buttplug::ServerMessage_Error* Arena::CreateMaybeMessage<::Buttplug::ServerMessage_Error>(Arena*);
template <>
::Buttplug::ServerMessage_MessageAttributes* Arena::CreateMaybeMessage<::Buttplug::ServerMessage_MessageAttributes>(Arena*);
template <>
::Buttplug::ServerMessage_Ok* Arena::CreateMaybeMessage<::Buttplug::ServerMessage_Ok>(Arena*);
template <>
::Buttplug::ServerMessage_ScanningFinished* Arena::CreateMaybeMessage<::Buttplug::ServerMessage_ScanningFinished>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace Buttplug {
enum ClientMessage_DeviceCommunicationManagerTypes : int {
  ClientMessage_DeviceCommunicationManagerTypes_All = 0,
  ClientMessage_DeviceCommunicationManagerTypes_Btleplug = 1,
  ClientMessage_DeviceCommunicationManagerTypes_XInput = 2,
  ClientMessage_DeviceCommunicationManagerTypes_SerialPort = 4,
  ClientMessage_DeviceCommunicationManagerTypes_LovenseHIDDongle = 8,
  ClientMessage_DeviceCommunicationManagerTypes_LovenseSerialDongle = 16,
  ClientMessage_DeviceCommunicationManagerTypes_ClientMessage_DeviceCommunicationManagerTypes_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ClientMessage_DeviceCommunicationManagerTypes_ClientMessage_DeviceCommunicationManagerTypes_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ClientMessage_DeviceCommunicationManagerTypes_IsValid(int value);
constexpr ClientMessage_DeviceCommunicationManagerTypes ClientMessage_DeviceCommunicationManagerTypes_DeviceCommunicationManagerTypes_MIN = static_cast<ClientMessage_DeviceCommunicationManagerTypes>(0);
constexpr ClientMessage_DeviceCommunicationManagerTypes ClientMessage_DeviceCommunicationManagerTypes_DeviceCommunicationManagerTypes_MAX = static_cast<ClientMessage_DeviceCommunicationManagerTypes>(16);
constexpr int ClientMessage_DeviceCommunicationManagerTypes_DeviceCommunicationManagerTypes_ARRAYSIZE = 16 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ClientMessage_DeviceCommunicationManagerTypes_descriptor();
template <typename T>
const std::string& ClientMessage_DeviceCommunicationManagerTypes_Name(T value) {
  static_assert(std::is_same<T, ClientMessage_DeviceCommunicationManagerTypes>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DeviceCommunicationManagerTypes_Name().");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(ClientMessage_DeviceCommunicationManagerTypes_descriptor(), value);
}
inline bool ClientMessage_DeviceCommunicationManagerTypes_Parse(absl::string_view name, ClientMessage_DeviceCommunicationManagerTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMessage_DeviceCommunicationManagerTypes>(
      ClientMessage_DeviceCommunicationManagerTypes_descriptor(), name, value);
}
enum ServerMessage_ButtplugErrorType : int {
  ServerMessage_ButtplugErrorType_ButtplugConnectorError = 0,
  ServerMessage_ButtplugErrorType_ButtplugHandshakeError = 1,
  ServerMessage_ButtplugErrorType_ButtplugDeviceError = 2,
  ServerMessage_ButtplugErrorType_ButtplugPingError = 3,
  ServerMessage_ButtplugErrorType_ButtplugMessageError = 4,
  ServerMessage_ButtplugErrorType_ButtplugUnknownError = 5,
  ServerMessage_ButtplugErrorType_ServerMessage_ButtplugErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ServerMessage_ButtplugErrorType_ServerMessage_ButtplugErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ServerMessage_ButtplugErrorType_IsValid(int value);
constexpr ServerMessage_ButtplugErrorType ServerMessage_ButtplugErrorType_ButtplugErrorType_MIN = static_cast<ServerMessage_ButtplugErrorType>(0);
constexpr ServerMessage_ButtplugErrorType ServerMessage_ButtplugErrorType_ButtplugErrorType_MAX = static_cast<ServerMessage_ButtplugErrorType>(5);
constexpr int ServerMessage_ButtplugErrorType_ButtplugErrorType_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ServerMessage_ButtplugErrorType_descriptor();
template <typename T>
const std::string& ServerMessage_ButtplugErrorType_Name(T value) {
  static_assert(std::is_same<T, ServerMessage_ButtplugErrorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ButtplugErrorType_Name().");
  return ServerMessage_ButtplugErrorType_Name(static_cast<ServerMessage_ButtplugErrorType>(value));
}
template <>
inline const std::string& ServerMessage_ButtplugErrorType_Name(ServerMessage_ButtplugErrorType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ServerMessage_ButtplugErrorType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ServerMessage_ButtplugErrorType_Parse(absl::string_view name, ServerMessage_ButtplugErrorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerMessage_ButtplugErrorType>(
      ServerMessage_ButtplugErrorType_descriptor(), name, value);
}
enum ServerMessage_MessageAttributeType : int {
  ServerMessage_MessageAttributeType_VibrateCmd = 0,
  ServerMessage_MessageAttributeType_RotateCmd = 1,
  ServerMessage_MessageAttributeType_LinearCmd = 2,
  ServerMessage_MessageAttributeType_StopDeviceCmd = 3,
  ServerMessage_MessageAttributeType_RawReadCmd = 4,
  ServerMessage_MessageAttributeType_RawWriteCmd = 5,
  ServerMessage_MessageAttributeType_RawSubscribeCmd = 6,
  ServerMessage_MessageAttributeType_RawUnsubscribeCmd = 7,
  ServerMessage_MessageAttributeType_BatteryLevelCmd = 8,
  ServerMessage_MessageAttributeType_RSSILevelCmd = 9,
  ServerMessage_MessageAttributeType_ServerMessage_MessageAttributeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ServerMessage_MessageAttributeType_ServerMessage_MessageAttributeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ServerMessage_MessageAttributeType_IsValid(int value);
constexpr ServerMessage_MessageAttributeType ServerMessage_MessageAttributeType_MessageAttributeType_MIN = static_cast<ServerMessage_MessageAttributeType>(0);
constexpr ServerMessage_MessageAttributeType ServerMessage_MessageAttributeType_MessageAttributeType_MAX = static_cast<ServerMessage_MessageAttributeType>(9);
constexpr int ServerMessage_MessageAttributeType_MessageAttributeType_ARRAYSIZE = 9 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ServerMessage_MessageAttributeType_descriptor();
template <typename T>
const std::string& ServerMessage_MessageAttributeType_Name(T value) {
  static_assert(std::is_same<T, ServerMessage_MessageAttributeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageAttributeType_Name().");
  return ServerMessage_MessageAttributeType_Name(static_cast<ServerMessage_MessageAttributeType>(value));
}
template <>
inline const std::string& ServerMessage_MessageAttributeType_Name(ServerMessage_MessageAttributeType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ServerMessage_MessageAttributeType_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool ServerMessage_MessageAttributeType_Parse(absl::string_view name, ServerMessage_MessageAttributeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerMessage_MessageAttributeType>(
      ServerMessage_MessageAttributeType_descriptor(), name, value);
}
enum Endpoint : int {
  Command = 0,
  Firmware = 1,
  Rx = 2,
  RxAccel = 3,
  RxBLEBattery = 4,
  RxPressure = 5,
  RxTouch = 6,
  Tx = 7,
  TxMode = 8,
  TxShock = 9,
  TxVibrate = 10,
  TxVendorControl = 11,
  Whitelist = 12,
  Generic0 = 13,
  Generic1 = 14,
  Generic2 = 15,
  Generic3 = 16,
  Generic4 = 17,
  Generic5 = 18,
  Generic6 = 19,
  Generic7 = 20,
  Generic8 = 21,
  Generic9 = 22,
  Generic10 = 23,
  Generic11 = 24,
  Generic12 = 25,
  Generic13 = 26,
  Generic14 = 27,
  Generic15 = 28,
  Generic16 = 29,
  Generic17 = 30,
  Generic18 = 31,
  Generic19 = 32,
  Generic20 = 33,
  Generic21 = 34,
  Generic22 = 35,
  Generic23 = 36,
  Generic24 = 37,
  Generic25 = 38,
  Generic26 = 39,
  Generic27 = 40,
  Generic28 = 41,
  Generic29 = 42,
  Generic30 = 43,
  Generic31 = 44,
  RxBLEModel = 45,
  Endpoint_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Endpoint_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Endpoint_IsValid(int value);
constexpr Endpoint Endpoint_MIN = static_cast<Endpoint>(0);
constexpr Endpoint Endpoint_MAX = static_cast<Endpoint>(45);
constexpr int Endpoint_ARRAYSIZE = 45 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Endpoint_descriptor();
template <typename T>
const std::string& Endpoint_Name(T value) {
  static_assert(std::is_same<T, Endpoint>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Endpoint_Name().");
  return Endpoint_Name(static_cast<Endpoint>(value));
}
template <>
inline const std::string& Endpoint_Name(Endpoint value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Endpoint_descriptor,
                                                 0, 45>(
      static_cast<int>(value));
}
inline bool Endpoint_Parse(absl::string_view name, Endpoint* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Endpoint>(
      Endpoint_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ClientMessage_ConnectLocal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ClientMessage.ConnectLocal) */ {
 public:
  inline ClientMessage_ConnectLocal() : ClientMessage_ConnectLocal(nullptr) {}
  ~ClientMessage_ConnectLocal() override;
  explicit PROTOBUF_CONSTEXPR ClientMessage_ConnectLocal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_ConnectLocal(const ClientMessage_ConnectLocal& from);
  ClientMessage_ConnectLocal(ClientMessage_ConnectLocal&& from) noexcept
    : ClientMessage_ConnectLocal() {
    *this = ::std::move(from);
  }

  inline ClientMessage_ConnectLocal& operator=(const ClientMessage_ConnectLocal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_ConnectLocal& operator=(ClientMessage_ConnectLocal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMessage_ConnectLocal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_ConnectLocal* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_ConnectLocal*>(
               &_ClientMessage_ConnectLocal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientMessage_ConnectLocal& a, ClientMessage_ConnectLocal& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_ConnectLocal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_ConnectLocal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMessage_ConnectLocal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMessage_ConnectLocal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientMessage_ConnectLocal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientMessage_ConnectLocal& from) {
    ClientMessage_ConnectLocal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_ConnectLocal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ClientMessage.ConnectLocal";
  }
  protected:
  explicit ClientMessage_ConnectLocal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 1,
    kDeviceConfigurationJsonFieldNumber = 4,
    kUserDeviceConfigurationJsonFieldNumber = 5,
    kMaxPingTimeFieldNumber = 2,
    kAllowRawMessagesFieldNumber = 3,
    kCommManagerTypesFieldNumber = 6,
  };
  // string server_name = 1;
  void clear_server_name();
  const std::string& server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // string device_configuration_json = 4;
  void clear_device_configuration_json();
  const std::string& device_configuration_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_configuration_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_configuration_json();
  PROTOBUF_NODISCARD std::string* release_device_configuration_json();
  void set_allocated_device_configuration_json(std::string* device_configuration_json);
  private:
  const std::string& _internal_device_configuration_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_configuration_json(const std::string& value);
  std::string* _internal_mutable_device_configuration_json();
  public:

  // string user_device_configuration_json = 5;
  void clear_user_device_configuration_json();
  const std::string& user_device_configuration_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_device_configuration_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_device_configuration_json();
  PROTOBUF_NODISCARD std::string* release_user_device_configuration_json();
  void set_allocated_user_device_configuration_json(std::string* user_device_configuration_json);
  private:
  const std::string& _internal_user_device_configuration_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_device_configuration_json(const std::string& value);
  std::string* _internal_mutable_user_device_configuration_json();
  public:

  // uint32 max_ping_time = 2;
  void clear_max_ping_time();
  ::uint32_t max_ping_time() const;
  void set_max_ping_time(::uint32_t value);
  private:
  ::uint32_t _internal_max_ping_time() const;
  void _internal_set_max_ping_time(::uint32_t value);
  public:

  // bool allow_raw_messages = 3;
  void clear_allow_raw_messages();
  bool allow_raw_messages() const;
  void set_allow_raw_messages(bool value);
  private:
  bool _internal_allow_raw_messages() const;
  void _internal_set_allow_raw_messages(bool value);
  public:

  // uint32 comm_manager_types = 6;
  void clear_comm_manager_types();
  ::uint32_t comm_manager_types() const;
  void set_comm_manager_types(::uint32_t value);
  private:
  ::uint32_t _internal_comm_manager_types() const;
  void _internal_set_comm_manager_types(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.ClientMessage.ConnectLocal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_configuration_json_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_device_configuration_json_;
    ::uint32_t max_ping_time_;
    bool allow_raw_messages_;
    ::uint32_t comm_manager_types_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ClientMessage_ConnectWebsocket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ClientMessage.ConnectWebsocket) */ {
 public:
  inline ClientMessage_ConnectWebsocket() : ClientMessage_ConnectWebsocket(nullptr) {}
  ~ClientMessage_ConnectWebsocket() override;
  explicit PROTOBUF_CONSTEXPR ClientMessage_ConnectWebsocket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_ConnectWebsocket(const ClientMessage_ConnectWebsocket& from);
  ClientMessage_ConnectWebsocket(ClientMessage_ConnectWebsocket&& from) noexcept
    : ClientMessage_ConnectWebsocket() {
    *this = ::std::move(from);
  }

  inline ClientMessage_ConnectWebsocket& operator=(const ClientMessage_ConnectWebsocket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_ConnectWebsocket& operator=(ClientMessage_ConnectWebsocket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMessage_ConnectWebsocket& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_ConnectWebsocket* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_ConnectWebsocket*>(
               &_ClientMessage_ConnectWebsocket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientMessage_ConnectWebsocket& a, ClientMessage_ConnectWebsocket& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_ConnectWebsocket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_ConnectWebsocket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMessage_ConnectWebsocket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMessage_ConnectWebsocket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientMessage_ConnectWebsocket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientMessage_ConnectWebsocket& from) {
    ClientMessage_ConnectWebsocket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_ConnectWebsocket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ClientMessage.ConnectWebsocket";
  }
  protected:
  explicit ClientMessage_ConnectWebsocket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kBypassCertVerificationFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool bypass_cert_verification = 2;
  void clear_bypass_cert_verification();
  bool bypass_cert_verification() const;
  void set_bypass_cert_verification(bool value);
  private:
  bool _internal_bypass_cert_verification() const;
  void _internal_set_bypass_cert_verification(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.ClientMessage.ConnectWebsocket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    bool bypass_cert_verification_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ClientMessage_StartScanning final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.ClientMessage.StartScanning) */ {
 public:
  inline ClientMessage_StartScanning() : ClientMessage_StartScanning(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ClientMessage_StartScanning(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_StartScanning(const ClientMessage_StartScanning& from);
  ClientMessage_StartScanning(ClientMessage_StartScanning&& from) noexcept
    : ClientMessage_StartScanning() {
    *this = ::std::move(from);
  }

  inline ClientMessage_StartScanning& operator=(const ClientMessage_StartScanning& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_StartScanning& operator=(ClientMessage_StartScanning&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMessage_StartScanning& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_StartScanning* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_StartScanning*>(
               &_ClientMessage_StartScanning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientMessage_StartScanning& a, ClientMessage_StartScanning& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_StartScanning* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_StartScanning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMessage_StartScanning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMessage_StartScanning>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClientMessage_StartScanning& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClientMessage_StartScanning& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ClientMessage.StartScanning";
  }
  protected:
  explicit ClientMessage_StartScanning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.ClientMessage.StartScanning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ClientMessage_StopScanning final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.ClientMessage.StopScanning) */ {
 public:
  inline ClientMessage_StopScanning() : ClientMessage_StopScanning(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ClientMessage_StopScanning(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_StopScanning(const ClientMessage_StopScanning& from);
  ClientMessage_StopScanning(ClientMessage_StopScanning&& from) noexcept
    : ClientMessage_StopScanning() {
    *this = ::std::move(from);
  }

  inline ClientMessage_StopScanning& operator=(const ClientMessage_StopScanning& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_StopScanning& operator=(ClientMessage_StopScanning&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMessage_StopScanning& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_StopScanning* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_StopScanning*>(
               &_ClientMessage_StopScanning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientMessage_StopScanning& a, ClientMessage_StopScanning& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_StopScanning* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_StopScanning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMessage_StopScanning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMessage_StopScanning>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClientMessage_StopScanning& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClientMessage_StopScanning& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ClientMessage.StopScanning";
  }
  protected:
  explicit ClientMessage_StopScanning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.ClientMessage.StopScanning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ClientMessage_StopAllDevices final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.ClientMessage.StopAllDevices) */ {
 public:
  inline ClientMessage_StopAllDevices() : ClientMessage_StopAllDevices(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ClientMessage_StopAllDevices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_StopAllDevices(const ClientMessage_StopAllDevices& from);
  ClientMessage_StopAllDevices(ClientMessage_StopAllDevices&& from) noexcept
    : ClientMessage_StopAllDevices() {
    *this = ::std::move(from);
  }

  inline ClientMessage_StopAllDevices& operator=(const ClientMessage_StopAllDevices& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_StopAllDevices& operator=(ClientMessage_StopAllDevices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMessage_StopAllDevices& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_StopAllDevices* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_StopAllDevices*>(
               &_ClientMessage_StopAllDevices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientMessage_StopAllDevices& a, ClientMessage_StopAllDevices& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_StopAllDevices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_StopAllDevices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMessage_StopAllDevices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMessage_StopAllDevices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClientMessage_StopAllDevices& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClientMessage_StopAllDevices& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ClientMessage.StopAllDevices";
  }
  protected:
  explicit ClientMessage_StopAllDevices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.ClientMessage.StopAllDevices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ClientMessage_Disconnect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.ClientMessage.Disconnect) */ {
 public:
  inline ClientMessage_Disconnect() : ClientMessage_Disconnect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ClientMessage_Disconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_Disconnect(const ClientMessage_Disconnect& from);
  ClientMessage_Disconnect(ClientMessage_Disconnect&& from) noexcept
    : ClientMessage_Disconnect() {
    *this = ::std::move(from);
  }

  inline ClientMessage_Disconnect& operator=(const ClientMessage_Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_Disconnect& operator=(ClientMessage_Disconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMessage_Disconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_Disconnect* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_Disconnect*>(
               &_ClientMessage_Disconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClientMessage_Disconnect& a, ClientMessage_Disconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_Disconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_Disconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMessage_Disconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMessage_Disconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClientMessage_Disconnect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClientMessage_Disconnect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ClientMessage.Disconnect";
  }
  protected:
  explicit ClientMessage_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.ClientMessage.Disconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ClientMessage_Ping final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.ClientMessage.Ping) */ {
 public:
  inline ClientMessage_Ping() : ClientMessage_Ping(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ClientMessage_Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_Ping(const ClientMessage_Ping& from);
  ClientMessage_Ping(ClientMessage_Ping&& from) noexcept
    : ClientMessage_Ping() {
    *this = ::std::move(from);
  }

  inline ClientMessage_Ping& operator=(const ClientMessage_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_Ping& operator=(ClientMessage_Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMessage_Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_Ping* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_Ping*>(
               &_ClientMessage_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClientMessage_Ping& a, ClientMessage_Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMessage_Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMessage_Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClientMessage_Ping& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClientMessage_Ping& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ClientMessage.Ping";
  }
  protected:
  explicit ClientMessage_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.ClientMessage.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ClientMessage_FFIMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ClientMessage.FFIMessage) */ {
 public:
  inline ClientMessage_FFIMessage() : ClientMessage_FFIMessage(nullptr) {}
  ~ClientMessage_FFIMessage() override;
  explicit PROTOBUF_CONSTEXPR ClientMessage_FFIMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_FFIMessage(const ClientMessage_FFIMessage& from);
  ClientMessage_FFIMessage(ClientMessage_FFIMessage&& from) noexcept
    : ClientMessage_FFIMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage_FFIMessage& operator=(const ClientMessage_FFIMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_FFIMessage& operator=(ClientMessage_FFIMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMessage_FFIMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kConnectLocal = 1,
    kConnectWebsocket = 2,
    kStartScanning = 3,
    kStopScanning = 4,
    kStopAllDevices = 5,
    kDisconnect = 6,
    kPing = 7,
    MSG_NOT_SET = 0,
  };

  static inline const ClientMessage_FFIMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_FFIMessage*>(
               &_ClientMessage_FFIMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ClientMessage_FFIMessage& a, ClientMessage_FFIMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_FFIMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_FFIMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMessage_FFIMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMessage_FFIMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientMessage_FFIMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientMessage_FFIMessage& from) {
    ClientMessage_FFIMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_FFIMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ClientMessage.FFIMessage";
  }
  protected:
  explicit ClientMessage_FFIMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectLocalFieldNumber = 1,
    kConnectWebsocketFieldNumber = 2,
    kStartScanningFieldNumber = 3,
    kStopScanningFieldNumber = 4,
    kStopAllDevicesFieldNumber = 5,
    kDisconnectFieldNumber = 6,
    kPingFieldNumber = 7,
  };
  // .Buttplug.ClientMessage.ConnectLocal connect_local = 1;
  bool has_connect_local() const;
  private:
  bool _internal_has_connect_local() const;
  public:
  void clear_connect_local();
  const ::Buttplug::ClientMessage_ConnectLocal& connect_local() const;
  PROTOBUF_NODISCARD ::Buttplug::ClientMessage_ConnectLocal* release_connect_local();
  ::Buttplug::ClientMessage_ConnectLocal* mutable_connect_local();
  void set_allocated_connect_local(::Buttplug::ClientMessage_ConnectLocal* connect_local);
  private:
  const ::Buttplug::ClientMessage_ConnectLocal& _internal_connect_local() const;
  ::Buttplug::ClientMessage_ConnectLocal* _internal_mutable_connect_local();
  public:
  void unsafe_arena_set_allocated_connect_local(
      ::Buttplug::ClientMessage_ConnectLocal* connect_local);
  ::Buttplug::ClientMessage_ConnectLocal* unsafe_arena_release_connect_local();

  // .Buttplug.ClientMessage.ConnectWebsocket connect_websocket = 2;
  bool has_connect_websocket() const;
  private:
  bool _internal_has_connect_websocket() const;
  public:
  void clear_connect_websocket();
  const ::Buttplug::ClientMessage_ConnectWebsocket& connect_websocket() const;
  PROTOBUF_NODISCARD ::Buttplug::ClientMessage_ConnectWebsocket* release_connect_websocket();
  ::Buttplug::ClientMessage_ConnectWebsocket* mutable_connect_websocket();
  void set_allocated_connect_websocket(::Buttplug::ClientMessage_ConnectWebsocket* connect_websocket);
  private:
  const ::Buttplug::ClientMessage_ConnectWebsocket& _internal_connect_websocket() const;
  ::Buttplug::ClientMessage_ConnectWebsocket* _internal_mutable_connect_websocket();
  public:
  void unsafe_arena_set_allocated_connect_websocket(
      ::Buttplug::ClientMessage_ConnectWebsocket* connect_websocket);
  ::Buttplug::ClientMessage_ConnectWebsocket* unsafe_arena_release_connect_websocket();

  // .Buttplug.ClientMessage.StartScanning start_scanning = 3;
  bool has_start_scanning() const;
  private:
  bool _internal_has_start_scanning() const;
  public:
  void clear_start_scanning();
  const ::Buttplug::ClientMessage_StartScanning& start_scanning() const;
  PROTOBUF_NODISCARD ::Buttplug::ClientMessage_StartScanning* release_start_scanning();
  ::Buttplug::ClientMessage_StartScanning* mutable_start_scanning();
  void set_allocated_start_scanning(::Buttplug::ClientMessage_StartScanning* start_scanning);
  private:
  const ::Buttplug::ClientMessage_StartScanning& _internal_start_scanning() const;
  ::Buttplug::ClientMessage_StartScanning* _internal_mutable_start_scanning();
  public:
  void unsafe_arena_set_allocated_start_scanning(
      ::Buttplug::ClientMessage_StartScanning* start_scanning);
  ::Buttplug::ClientMessage_StartScanning* unsafe_arena_release_start_scanning();

  // .Buttplug.ClientMessage.StopScanning stop_scanning = 4;
  bool has_stop_scanning() const;
  private:
  bool _internal_has_stop_scanning() const;
  public:
  void clear_stop_scanning();
  const ::Buttplug::ClientMessage_StopScanning& stop_scanning() const;
  PROTOBUF_NODISCARD ::Buttplug::ClientMessage_StopScanning* release_stop_scanning();
  ::Buttplug::ClientMessage_StopScanning* mutable_stop_scanning();
  void set_allocated_stop_scanning(::Buttplug::ClientMessage_StopScanning* stop_scanning);
  private:
  const ::Buttplug::ClientMessage_StopScanning& _internal_stop_scanning() const;
  ::Buttplug::ClientMessage_StopScanning* _internal_mutable_stop_scanning();
  public:
  void unsafe_arena_set_allocated_stop_scanning(
      ::Buttplug::ClientMessage_StopScanning* stop_scanning);
  ::Buttplug::ClientMessage_StopScanning* unsafe_arena_release_stop_scanning();

  // .Buttplug.ClientMessage.StopAllDevices stop_all_devices = 5;
  bool has_stop_all_devices() const;
  private:
  bool _internal_has_stop_all_devices() const;
  public:
  void clear_stop_all_devices();
  const ::Buttplug::ClientMessage_StopAllDevices& stop_all_devices() const;
  PROTOBUF_NODISCARD ::Buttplug::ClientMessage_StopAllDevices* release_stop_all_devices();
  ::Buttplug::ClientMessage_StopAllDevices* mutable_stop_all_devices();
  void set_allocated_stop_all_devices(::Buttplug::ClientMessage_StopAllDevices* stop_all_devices);
  private:
  const ::Buttplug::ClientMessage_StopAllDevices& _internal_stop_all_devices() const;
  ::Buttplug::ClientMessage_StopAllDevices* _internal_mutable_stop_all_devices();
  public:
  void unsafe_arena_set_allocated_stop_all_devices(
      ::Buttplug::ClientMessage_StopAllDevices* stop_all_devices);
  ::Buttplug::ClientMessage_StopAllDevices* unsafe_arena_release_stop_all_devices();

  // .Buttplug.ClientMessage.Disconnect disconnect = 6;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  const ::Buttplug::ClientMessage_Disconnect& disconnect() const;
  PROTOBUF_NODISCARD ::Buttplug::ClientMessage_Disconnect* release_disconnect();
  ::Buttplug::ClientMessage_Disconnect* mutable_disconnect();
  void set_allocated_disconnect(::Buttplug::ClientMessage_Disconnect* disconnect);
  private:
  const ::Buttplug::ClientMessage_Disconnect& _internal_disconnect() const;
  ::Buttplug::ClientMessage_Disconnect* _internal_mutable_disconnect();
  public:
  void unsafe_arena_set_allocated_disconnect(
      ::Buttplug::ClientMessage_Disconnect* disconnect);
  ::Buttplug::ClientMessage_Disconnect* unsafe_arena_release_disconnect();

  // .Buttplug.ClientMessage.Ping ping = 7;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::Buttplug::ClientMessage_Ping& ping() const;
  PROTOBUF_NODISCARD ::Buttplug::ClientMessage_Ping* release_ping();
  ::Buttplug::ClientMessage_Ping* mutable_ping();
  void set_allocated_ping(::Buttplug::ClientMessage_Ping* ping);
  private:
  const ::Buttplug::ClientMessage_Ping& _internal_ping() const;
  ::Buttplug::ClientMessage_Ping* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::Buttplug::ClientMessage_Ping* ping);
  ::Buttplug::ClientMessage_Ping* unsafe_arena_release_ping();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Buttplug.ClientMessage.FFIMessage)
 private:
  class _Internal;
  void set_has_connect_local();
  void set_has_connect_websocket();
  void set_has_start_scanning();
  void set_has_stop_scanning();
  void set_has_stop_all_devices();
  void set_has_disconnect();
  void set_has_ping();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Buttplug::ClientMessage_ConnectLocal* connect_local_;
      ::Buttplug::ClientMessage_ConnectWebsocket* connect_websocket_;
      ::Buttplug::ClientMessage_StartScanning* start_scanning_;
      ::Buttplug::ClientMessage_StopScanning* stop_scanning_;
      ::Buttplug::ClientMessage_StopAllDevices* stop_all_devices_;
      ::Buttplug::ClientMessage_Disconnect* disconnect_;
      ::Buttplug::ClientMessage_Ping* ping_;
    } msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ClientMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ClientMessage) */ {
 public:
  inline ClientMessage() : ClientMessage(nullptr) {}
  ~ClientMessage() override;
  explicit PROTOBUF_CONSTEXPR ClientMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientMessage& from) {
    ClientMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ClientMessage";
  }
  protected:
  explicit ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClientMessage_ConnectLocal ConnectLocal;
  typedef ClientMessage_ConnectWebsocket ConnectWebsocket;
  typedef ClientMessage_StartScanning StartScanning;
  typedef ClientMessage_StopScanning StopScanning;
  typedef ClientMessage_StopAllDevices StopAllDevices;
  typedef ClientMessage_Disconnect Disconnect;
  typedef ClientMessage_Ping Ping;
  typedef ClientMessage_FFIMessage FFIMessage;

  using DeviceCommunicationManagerTypes = ClientMessage_DeviceCommunicationManagerTypes;
  static constexpr DeviceCommunicationManagerTypes All = ClientMessage_DeviceCommunicationManagerTypes_All;
  static constexpr DeviceCommunicationManagerTypes Btleplug = ClientMessage_DeviceCommunicationManagerTypes_Btleplug;
  static constexpr DeviceCommunicationManagerTypes XInput = ClientMessage_DeviceCommunicationManagerTypes_XInput;
  static constexpr DeviceCommunicationManagerTypes SerialPort = ClientMessage_DeviceCommunicationManagerTypes_SerialPort;
  static constexpr DeviceCommunicationManagerTypes LovenseHIDDongle = ClientMessage_DeviceCommunicationManagerTypes_LovenseHIDDongle;
  static constexpr DeviceCommunicationManagerTypes LovenseSerialDongle = ClientMessage_DeviceCommunicationManagerTypes_LovenseSerialDongle;
  static inline bool DeviceCommunicationManagerTypes_IsValid(int value) {
    return ClientMessage_DeviceCommunicationManagerTypes_IsValid(value);
  }
  static constexpr DeviceCommunicationManagerTypes DeviceCommunicationManagerTypes_MIN = ClientMessage_DeviceCommunicationManagerTypes_DeviceCommunicationManagerTypes_MIN;
  static constexpr DeviceCommunicationManagerTypes DeviceCommunicationManagerTypes_MAX = ClientMessage_DeviceCommunicationManagerTypes_DeviceCommunicationManagerTypes_MAX;
  static constexpr int DeviceCommunicationManagerTypes_ARRAYSIZE = ClientMessage_DeviceCommunicationManagerTypes_DeviceCommunicationManagerTypes_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceCommunicationManagerTypes_descriptor() {
    return ClientMessage_DeviceCommunicationManagerTypes_descriptor();
  }
  template <typename T>
  static inline const std::string& DeviceCommunicationManagerTypes_Name(T value) {
    return ClientMessage_DeviceCommunicationManagerTypes_Name(value);
  }
  static inline bool DeviceCommunicationManagerTypes_Parse(absl::string_view name, DeviceCommunicationManagerTypes* value) {
    return ClientMessage_DeviceCommunicationManagerTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .Buttplug.ClientMessage.FFIMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::Buttplug::ClientMessage_FFIMessage& message() const;
  PROTOBUF_NODISCARD ::Buttplug::ClientMessage_FFIMessage* release_message();
  ::Buttplug::ClientMessage_FFIMessage* mutable_message();
  void set_allocated_message(::Buttplug::ClientMessage_FFIMessage* message);
  private:
  const ::Buttplug::ClientMessage_FFIMessage& _internal_message() const;
  ::Buttplug::ClientMessage_FFIMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::Buttplug::ClientMessage_FFIMessage* message);
  ::Buttplug::ClientMessage_FFIMessage* unsafe_arena_release_message();

  // uint32 id = 1;
  void clear_id();
  ::uint32_t id() const;
  void set_id(::uint32_t value);
  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.ClientMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Buttplug::ClientMessage_FFIMessage* message_;
    ::uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_VibrateComponent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.VibrateComponent) */ {
 public:
  inline DeviceMessage_VibrateComponent() : DeviceMessage_VibrateComponent(nullptr) {}
  ~DeviceMessage_VibrateComponent() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_VibrateComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_VibrateComponent(const DeviceMessage_VibrateComponent& from);
  DeviceMessage_VibrateComponent(DeviceMessage_VibrateComponent&& from) noexcept
    : DeviceMessage_VibrateComponent() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_VibrateComponent& operator=(const DeviceMessage_VibrateComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_VibrateComponent& operator=(DeviceMessage_VibrateComponent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_VibrateComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_VibrateComponent* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_VibrateComponent*>(
               &_DeviceMessage_VibrateComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeviceMessage_VibrateComponent& a, DeviceMessage_VibrateComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_VibrateComponent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_VibrateComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_VibrateComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_VibrateComponent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_VibrateComponent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_VibrateComponent& from) {
    DeviceMessage_VibrateComponent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_VibrateComponent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.VibrateComponent";
  }
  protected:
  explicit DeviceMessage_VibrateComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // double speed = 2;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // uint32 index = 1;
  void clear_index();
  ::uint32_t index() const;
  void set_index(::uint32_t value);
  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.VibrateComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double speed_;
    ::uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_VibrateCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.VibrateCmd) */ {
 public:
  inline DeviceMessage_VibrateCmd() : DeviceMessage_VibrateCmd(nullptr) {}
  ~DeviceMessage_VibrateCmd() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_VibrateCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_VibrateCmd(const DeviceMessage_VibrateCmd& from);
  DeviceMessage_VibrateCmd(DeviceMessage_VibrateCmd&& from) noexcept
    : DeviceMessage_VibrateCmd() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_VibrateCmd& operator=(const DeviceMessage_VibrateCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_VibrateCmd& operator=(DeviceMessage_VibrateCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_VibrateCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_VibrateCmd* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_VibrateCmd*>(
               &_DeviceMessage_VibrateCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeviceMessage_VibrateCmd& a, DeviceMessage_VibrateCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_VibrateCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_VibrateCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_VibrateCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_VibrateCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_VibrateCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_VibrateCmd& from) {
    DeviceMessage_VibrateCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_VibrateCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.VibrateCmd";
  }
  protected:
  explicit DeviceMessage_VibrateCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedsFieldNumber = 1,
  };
  // repeated .Buttplug.DeviceMessage.VibrateComponent speeds = 1;
  int speeds_size() const;
  private:
  int _internal_speeds_size() const;
  public:
  void clear_speeds();
  ::Buttplug::DeviceMessage_VibrateComponent* mutable_speeds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_VibrateComponent >*
      mutable_speeds();
  private:
  const ::Buttplug::DeviceMessage_VibrateComponent& _internal_speeds(int index) const;
  ::Buttplug::DeviceMessage_VibrateComponent* _internal_add_speeds();
  public:
  const ::Buttplug::DeviceMessage_VibrateComponent& speeds(int index) const;
  ::Buttplug::DeviceMessage_VibrateComponent* add_speeds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_VibrateComponent >&
      speeds() const;

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.VibrateCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_VibrateComponent > speeds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_RotateComponent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.RotateComponent) */ {
 public:
  inline DeviceMessage_RotateComponent() : DeviceMessage_RotateComponent(nullptr) {}
  ~DeviceMessage_RotateComponent() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_RotateComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_RotateComponent(const DeviceMessage_RotateComponent& from);
  DeviceMessage_RotateComponent(DeviceMessage_RotateComponent&& from) noexcept
    : DeviceMessage_RotateComponent() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_RotateComponent& operator=(const DeviceMessage_RotateComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_RotateComponent& operator=(DeviceMessage_RotateComponent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_RotateComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_RotateComponent* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_RotateComponent*>(
               &_DeviceMessage_RotateComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeviceMessage_RotateComponent& a, DeviceMessage_RotateComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_RotateComponent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_RotateComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_RotateComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_RotateComponent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_RotateComponent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_RotateComponent& from) {
    DeviceMessage_RotateComponent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_RotateComponent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.RotateComponent";
  }
  protected:
  explicit DeviceMessage_RotateComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 2,
    kIndexFieldNumber = 1,
    kClockwiseFieldNumber = 3,
  };
  // double speed = 2;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // uint32 index = 1;
  void clear_index();
  ::uint32_t index() const;
  void set_index(::uint32_t value);
  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);
  public:

  // bool clockwise = 3;
  void clear_clockwise();
  bool clockwise() const;
  void set_clockwise(bool value);
  private:
  bool _internal_clockwise() const;
  void _internal_set_clockwise(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.RotateComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double speed_;
    ::uint32_t index_;
    bool clockwise_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_RotateCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.RotateCmd) */ {
 public:
  inline DeviceMessage_RotateCmd() : DeviceMessage_RotateCmd(nullptr) {}
  ~DeviceMessage_RotateCmd() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_RotateCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_RotateCmd(const DeviceMessage_RotateCmd& from);
  DeviceMessage_RotateCmd(DeviceMessage_RotateCmd&& from) noexcept
    : DeviceMessage_RotateCmd() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_RotateCmd& operator=(const DeviceMessage_RotateCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_RotateCmd& operator=(DeviceMessage_RotateCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_RotateCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_RotateCmd* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_RotateCmd*>(
               &_DeviceMessage_RotateCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeviceMessage_RotateCmd& a, DeviceMessage_RotateCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_RotateCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_RotateCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_RotateCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_RotateCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_RotateCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_RotateCmd& from) {
    DeviceMessage_RotateCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_RotateCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.RotateCmd";
  }
  protected:
  explicit DeviceMessage_RotateCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationsFieldNumber = 1,
  };
  // repeated .Buttplug.DeviceMessage.RotateComponent rotations = 1;
  int rotations_size() const;
  private:
  int _internal_rotations_size() const;
  public:
  void clear_rotations();
  ::Buttplug::DeviceMessage_RotateComponent* mutable_rotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_RotateComponent >*
      mutable_rotations();
  private:
  const ::Buttplug::DeviceMessage_RotateComponent& _internal_rotations(int index) const;
  ::Buttplug::DeviceMessage_RotateComponent* _internal_add_rotations();
  public:
  const ::Buttplug::DeviceMessage_RotateComponent& rotations(int index) const;
  ::Buttplug::DeviceMessage_RotateComponent* add_rotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_RotateComponent >&
      rotations() const;

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.RotateCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_RotateComponent > rotations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_LinearComponent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.LinearComponent) */ {
 public:
  inline DeviceMessage_LinearComponent() : DeviceMessage_LinearComponent(nullptr) {}
  ~DeviceMessage_LinearComponent() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_LinearComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_LinearComponent(const DeviceMessage_LinearComponent& from);
  DeviceMessage_LinearComponent(DeviceMessage_LinearComponent&& from) noexcept
    : DeviceMessage_LinearComponent() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_LinearComponent& operator=(const DeviceMessage_LinearComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_LinearComponent& operator=(DeviceMessage_LinearComponent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_LinearComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_LinearComponent* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_LinearComponent*>(
               &_DeviceMessage_LinearComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeviceMessage_LinearComponent& a, DeviceMessage_LinearComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_LinearComponent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_LinearComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_LinearComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_LinearComponent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_LinearComponent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_LinearComponent& from) {
    DeviceMessage_LinearComponent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_LinearComponent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.LinearComponent";
  }
  protected:
  explicit DeviceMessage_LinearComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kDurationFieldNumber = 2,
    kPositionFieldNumber = 3,
  };
  // uint32 index = 1;
  void clear_index();
  ::uint32_t index() const;
  void set_index(::uint32_t value);
  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);
  public:

  // uint32 duration = 2;
  void clear_duration();
  ::uint32_t duration() const;
  void set_duration(::uint32_t value);
  private:
  ::uint32_t _internal_duration() const;
  void _internal_set_duration(::uint32_t value);
  public:

  // double position = 3;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.LinearComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t index_;
    ::uint32_t duration_;
    double position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_LinearCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.LinearCmd) */ {
 public:
  inline DeviceMessage_LinearCmd() : DeviceMessage_LinearCmd(nullptr) {}
  ~DeviceMessage_LinearCmd() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_LinearCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_LinearCmd(const DeviceMessage_LinearCmd& from);
  DeviceMessage_LinearCmd(DeviceMessage_LinearCmd&& from) noexcept
    : DeviceMessage_LinearCmd() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_LinearCmd& operator=(const DeviceMessage_LinearCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_LinearCmd& operator=(DeviceMessage_LinearCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_LinearCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_LinearCmd* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_LinearCmd*>(
               &_DeviceMessage_LinearCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeviceMessage_LinearCmd& a, DeviceMessage_LinearCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_LinearCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_LinearCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_LinearCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_LinearCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_LinearCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_LinearCmd& from) {
    DeviceMessage_LinearCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_LinearCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.LinearCmd";
  }
  protected:
  explicit DeviceMessage_LinearCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovementsFieldNumber = 1,
  };
  // repeated .Buttplug.DeviceMessage.LinearComponent movements = 1;
  int movements_size() const;
  private:
  int _internal_movements_size() const;
  public:
  void clear_movements();
  ::Buttplug::DeviceMessage_LinearComponent* mutable_movements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_LinearComponent >*
      mutable_movements();
  private:
  const ::Buttplug::DeviceMessage_LinearComponent& _internal_movements(int index) const;
  ::Buttplug::DeviceMessage_LinearComponent* _internal_add_movements();
  public:
  const ::Buttplug::DeviceMessage_LinearComponent& movements(int index) const;
  ::Buttplug::DeviceMessage_LinearComponent* add_movements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_LinearComponent >&
      movements() const;

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.LinearCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_LinearComponent > movements_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_StopDeviceCmd final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.StopDeviceCmd) */ {
 public:
  inline DeviceMessage_StopDeviceCmd() : DeviceMessage_StopDeviceCmd(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeviceMessage_StopDeviceCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_StopDeviceCmd(const DeviceMessage_StopDeviceCmd& from);
  DeviceMessage_StopDeviceCmd(DeviceMessage_StopDeviceCmd&& from) noexcept
    : DeviceMessage_StopDeviceCmd() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_StopDeviceCmd& operator=(const DeviceMessage_StopDeviceCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_StopDeviceCmd& operator=(DeviceMessage_StopDeviceCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_StopDeviceCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_StopDeviceCmd* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_StopDeviceCmd*>(
               &_DeviceMessage_StopDeviceCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeviceMessage_StopDeviceCmd& a, DeviceMessage_StopDeviceCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_StopDeviceCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_StopDeviceCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_StopDeviceCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_StopDeviceCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeviceMessage_StopDeviceCmd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeviceMessage_StopDeviceCmd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.StopDeviceCmd";
  }
  protected:
  explicit DeviceMessage_StopDeviceCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.StopDeviceCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_RawReadCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.RawReadCmd) */ {
 public:
  inline DeviceMessage_RawReadCmd() : DeviceMessage_RawReadCmd(nullptr) {}
  ~DeviceMessage_RawReadCmd() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_RawReadCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_RawReadCmd(const DeviceMessage_RawReadCmd& from);
  DeviceMessage_RawReadCmd(DeviceMessage_RawReadCmd&& from) noexcept
    : DeviceMessage_RawReadCmd() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_RawReadCmd& operator=(const DeviceMessage_RawReadCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_RawReadCmd& operator=(DeviceMessage_RawReadCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_RawReadCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_RawReadCmd* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_RawReadCmd*>(
               &_DeviceMessage_RawReadCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeviceMessage_RawReadCmd& a, DeviceMessage_RawReadCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_RawReadCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_RawReadCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_RawReadCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_RawReadCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_RawReadCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_RawReadCmd& from) {
    DeviceMessage_RawReadCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_RawReadCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.RawReadCmd";
  }
  protected:
  explicit DeviceMessage_RawReadCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kEndpointFieldNumber = 1,
    kExpectedLengthFieldNumber = 3,
    kTimeoutFieldNumber = 4,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .Buttplug.Endpoint endpoint = 1;
  void clear_endpoint();
  ::Buttplug::Endpoint endpoint() const;
  void set_endpoint(::Buttplug::Endpoint value);
  private:
  ::Buttplug::Endpoint _internal_endpoint() const;
  void _internal_set_endpoint(::Buttplug::Endpoint value);
  public:

  // uint32 expected_length = 3;
  void clear_expected_length();
  ::uint32_t expected_length() const;
  void set_expected_length(::uint32_t value);
  private:
  ::uint32_t _internal_expected_length() const;
  void _internal_set_expected_length(::uint32_t value);
  public:

  // uint32 timeout = 4;
  void clear_timeout();
  ::uint32_t timeout() const;
  void set_timeout(::uint32_t value);
  private:
  ::uint32_t _internal_timeout() const;
  void _internal_set_timeout(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.RawReadCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int endpoint_;
    ::uint32_t expected_length_;
    ::uint32_t timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_RawWriteCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.RawWriteCmd) */ {
 public:
  inline DeviceMessage_RawWriteCmd() : DeviceMessage_RawWriteCmd(nullptr) {}
  ~DeviceMessage_RawWriteCmd() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_RawWriteCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_RawWriteCmd(const DeviceMessage_RawWriteCmd& from);
  DeviceMessage_RawWriteCmd(DeviceMessage_RawWriteCmd&& from) noexcept
    : DeviceMessage_RawWriteCmd() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_RawWriteCmd& operator=(const DeviceMessage_RawWriteCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_RawWriteCmd& operator=(DeviceMessage_RawWriteCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_RawWriteCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_RawWriteCmd* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_RawWriteCmd*>(
               &_DeviceMessage_RawWriteCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeviceMessage_RawWriteCmd& a, DeviceMessage_RawWriteCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_RawWriteCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_RawWriteCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_RawWriteCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_RawWriteCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_RawWriteCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_RawWriteCmd& from) {
    DeviceMessage_RawWriteCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_RawWriteCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.RawWriteCmd";
  }
  protected:
  explicit DeviceMessage_RawWriteCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kEndpointFieldNumber = 1,
    kWriteWithResponseFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .Buttplug.Endpoint endpoint = 1;
  void clear_endpoint();
  ::Buttplug::Endpoint endpoint() const;
  void set_endpoint(::Buttplug::Endpoint value);
  private:
  ::Buttplug::Endpoint _internal_endpoint() const;
  void _internal_set_endpoint(::Buttplug::Endpoint value);
  public:

  // bool write_with_response = 3;
  void clear_write_with_response();
  bool write_with_response() const;
  void set_write_with_response(bool value);
  private:
  bool _internal_write_with_response() const;
  void _internal_set_write_with_response(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.RawWriteCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int endpoint_;
    bool write_with_response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_RawSubscribeCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.RawSubscribeCmd) */ {
 public:
  inline DeviceMessage_RawSubscribeCmd() : DeviceMessage_RawSubscribeCmd(nullptr) {}
  ~DeviceMessage_RawSubscribeCmd() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_RawSubscribeCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_RawSubscribeCmd(const DeviceMessage_RawSubscribeCmd& from);
  DeviceMessage_RawSubscribeCmd(DeviceMessage_RawSubscribeCmd&& from) noexcept
    : DeviceMessage_RawSubscribeCmd() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_RawSubscribeCmd& operator=(const DeviceMessage_RawSubscribeCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_RawSubscribeCmd& operator=(DeviceMessage_RawSubscribeCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_RawSubscribeCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_RawSubscribeCmd* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_RawSubscribeCmd*>(
               &_DeviceMessage_RawSubscribeCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeviceMessage_RawSubscribeCmd& a, DeviceMessage_RawSubscribeCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_RawSubscribeCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_RawSubscribeCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_RawSubscribeCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_RawSubscribeCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_RawSubscribeCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_RawSubscribeCmd& from) {
    DeviceMessage_RawSubscribeCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_RawSubscribeCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.RawSubscribeCmd";
  }
  protected:
  explicit DeviceMessage_RawSubscribeCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointFieldNumber = 1,
  };
  // .Buttplug.Endpoint endpoint = 1;
  void clear_endpoint();
  ::Buttplug::Endpoint endpoint() const;
  void set_endpoint(::Buttplug::Endpoint value);
  private:
  ::Buttplug::Endpoint _internal_endpoint() const;
  void _internal_set_endpoint(::Buttplug::Endpoint value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.RawSubscribeCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int endpoint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_RawUnsubscribeCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.RawUnsubscribeCmd) */ {
 public:
  inline DeviceMessage_RawUnsubscribeCmd() : DeviceMessage_RawUnsubscribeCmd(nullptr) {}
  ~DeviceMessage_RawUnsubscribeCmd() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_RawUnsubscribeCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_RawUnsubscribeCmd(const DeviceMessage_RawUnsubscribeCmd& from);
  DeviceMessage_RawUnsubscribeCmd(DeviceMessage_RawUnsubscribeCmd&& from) noexcept
    : DeviceMessage_RawUnsubscribeCmd() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_RawUnsubscribeCmd& operator=(const DeviceMessage_RawUnsubscribeCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_RawUnsubscribeCmd& operator=(DeviceMessage_RawUnsubscribeCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_RawUnsubscribeCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_RawUnsubscribeCmd* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_RawUnsubscribeCmd*>(
               &_DeviceMessage_RawUnsubscribeCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeviceMessage_RawUnsubscribeCmd& a, DeviceMessage_RawUnsubscribeCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_RawUnsubscribeCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_RawUnsubscribeCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_RawUnsubscribeCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_RawUnsubscribeCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_RawUnsubscribeCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_RawUnsubscribeCmd& from) {
    DeviceMessage_RawUnsubscribeCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_RawUnsubscribeCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.RawUnsubscribeCmd";
  }
  protected:
  explicit DeviceMessage_RawUnsubscribeCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointFieldNumber = 1,
  };
  // .Buttplug.Endpoint endpoint = 1;
  void clear_endpoint();
  ::Buttplug::Endpoint endpoint() const;
  void set_endpoint(::Buttplug::Endpoint value);
  private:
  ::Buttplug::Endpoint _internal_endpoint() const;
  void _internal_set_endpoint(::Buttplug::Endpoint value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.RawUnsubscribeCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int endpoint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_BatteryLevelCmd final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.BatteryLevelCmd) */ {
 public:
  inline DeviceMessage_BatteryLevelCmd() : DeviceMessage_BatteryLevelCmd(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeviceMessage_BatteryLevelCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_BatteryLevelCmd(const DeviceMessage_BatteryLevelCmd& from);
  DeviceMessage_BatteryLevelCmd(DeviceMessage_BatteryLevelCmd&& from) noexcept
    : DeviceMessage_BatteryLevelCmd() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_BatteryLevelCmd& operator=(const DeviceMessage_BatteryLevelCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_BatteryLevelCmd& operator=(DeviceMessage_BatteryLevelCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_BatteryLevelCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_BatteryLevelCmd* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_BatteryLevelCmd*>(
               &_DeviceMessage_BatteryLevelCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DeviceMessage_BatteryLevelCmd& a, DeviceMessage_BatteryLevelCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_BatteryLevelCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_BatteryLevelCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_BatteryLevelCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_BatteryLevelCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeviceMessage_BatteryLevelCmd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeviceMessage_BatteryLevelCmd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.BatteryLevelCmd";
  }
  protected:
  explicit DeviceMessage_BatteryLevelCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.BatteryLevelCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_RSSILevelCmd final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.RSSILevelCmd) */ {
 public:
  inline DeviceMessage_RSSILevelCmd() : DeviceMessage_RSSILevelCmd(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeviceMessage_RSSILevelCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_RSSILevelCmd(const DeviceMessage_RSSILevelCmd& from);
  DeviceMessage_RSSILevelCmd(DeviceMessage_RSSILevelCmd&& from) noexcept
    : DeviceMessage_RSSILevelCmd() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_RSSILevelCmd& operator=(const DeviceMessage_RSSILevelCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_RSSILevelCmd& operator=(DeviceMessage_RSSILevelCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_RSSILevelCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage_RSSILevelCmd* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_RSSILevelCmd*>(
               &_DeviceMessage_RSSILevelCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeviceMessage_RSSILevelCmd& a, DeviceMessage_RSSILevelCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_RSSILevelCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_RSSILevelCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_RSSILevelCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_RSSILevelCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeviceMessage_RSSILevelCmd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeviceMessage_RSSILevelCmd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.RSSILevelCmd";
  }
  protected:
  explicit DeviceMessage_RSSILevelCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.RSSILevelCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage_FFIMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage.FFIMessage) */ {
 public:
  inline DeviceMessage_FFIMessage() : DeviceMessage_FFIMessage(nullptr) {}
  ~DeviceMessage_FFIMessage() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage_FFIMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage_FFIMessage(const DeviceMessage_FFIMessage& from);
  DeviceMessage_FFIMessage(DeviceMessage_FFIMessage&& from) noexcept
    : DeviceMessage_FFIMessage() {
    *this = ::std::move(from);
  }

  inline DeviceMessage_FFIMessage& operator=(const DeviceMessage_FFIMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage_FFIMessage& operator=(DeviceMessage_FFIMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage_FFIMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kVibrateCmd = 1,
    kRotateCmd = 2,
    kLinearCmd = 3,
    kStopDeviceCmd = 4,
    kRawReadCmd = 5,
    kRawWriteCmd = 6,
    kRawSubscribeCmd = 7,
    kRawUnsubscribeCmd = 8,
    kBatteryLevelCmd = 9,
    kRssiLevelCmd = 10,
    MSG_NOT_SET = 0,
  };

  static inline const DeviceMessage_FFIMessage* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage_FFIMessage*>(
               &_DeviceMessage_FFIMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DeviceMessage_FFIMessage& a, DeviceMessage_FFIMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage_FFIMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage_FFIMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage_FFIMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage_FFIMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage_FFIMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage_FFIMessage& from) {
    DeviceMessage_FFIMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage_FFIMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage.FFIMessage";
  }
  protected:
  explicit DeviceMessage_FFIMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVibrateCmdFieldNumber = 1,
    kRotateCmdFieldNumber = 2,
    kLinearCmdFieldNumber = 3,
    kStopDeviceCmdFieldNumber = 4,
    kRawReadCmdFieldNumber = 5,
    kRawWriteCmdFieldNumber = 6,
    kRawSubscribeCmdFieldNumber = 7,
    kRawUnsubscribeCmdFieldNumber = 8,
    kBatteryLevelCmdFieldNumber = 9,
    kRssiLevelCmdFieldNumber = 10,
  };
  // .Buttplug.DeviceMessage.VibrateCmd vibrate_cmd = 1;
  bool has_vibrate_cmd() const;
  private:
  bool _internal_has_vibrate_cmd() const;
  public:
  void clear_vibrate_cmd();
  const ::Buttplug::DeviceMessage_VibrateCmd& vibrate_cmd() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_VibrateCmd* release_vibrate_cmd();
  ::Buttplug::DeviceMessage_VibrateCmd* mutable_vibrate_cmd();
  void set_allocated_vibrate_cmd(::Buttplug::DeviceMessage_VibrateCmd* vibrate_cmd);
  private:
  const ::Buttplug::DeviceMessage_VibrateCmd& _internal_vibrate_cmd() const;
  ::Buttplug::DeviceMessage_VibrateCmd* _internal_mutable_vibrate_cmd();
  public:
  void unsafe_arena_set_allocated_vibrate_cmd(
      ::Buttplug::DeviceMessage_VibrateCmd* vibrate_cmd);
  ::Buttplug::DeviceMessage_VibrateCmd* unsafe_arena_release_vibrate_cmd();

  // .Buttplug.DeviceMessage.RotateCmd rotate_cmd = 2;
  bool has_rotate_cmd() const;
  private:
  bool _internal_has_rotate_cmd() const;
  public:
  void clear_rotate_cmd();
  const ::Buttplug::DeviceMessage_RotateCmd& rotate_cmd() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_RotateCmd* release_rotate_cmd();
  ::Buttplug::DeviceMessage_RotateCmd* mutable_rotate_cmd();
  void set_allocated_rotate_cmd(::Buttplug::DeviceMessage_RotateCmd* rotate_cmd);
  private:
  const ::Buttplug::DeviceMessage_RotateCmd& _internal_rotate_cmd() const;
  ::Buttplug::DeviceMessage_RotateCmd* _internal_mutable_rotate_cmd();
  public:
  void unsafe_arena_set_allocated_rotate_cmd(
      ::Buttplug::DeviceMessage_RotateCmd* rotate_cmd);
  ::Buttplug::DeviceMessage_RotateCmd* unsafe_arena_release_rotate_cmd();

  // .Buttplug.DeviceMessage.LinearCmd linear_cmd = 3;
  bool has_linear_cmd() const;
  private:
  bool _internal_has_linear_cmd() const;
  public:
  void clear_linear_cmd();
  const ::Buttplug::DeviceMessage_LinearCmd& linear_cmd() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_LinearCmd* release_linear_cmd();
  ::Buttplug::DeviceMessage_LinearCmd* mutable_linear_cmd();
  void set_allocated_linear_cmd(::Buttplug::DeviceMessage_LinearCmd* linear_cmd);
  private:
  const ::Buttplug::DeviceMessage_LinearCmd& _internal_linear_cmd() const;
  ::Buttplug::DeviceMessage_LinearCmd* _internal_mutable_linear_cmd();
  public:
  void unsafe_arena_set_allocated_linear_cmd(
      ::Buttplug::DeviceMessage_LinearCmd* linear_cmd);
  ::Buttplug::DeviceMessage_LinearCmd* unsafe_arena_release_linear_cmd();

  // .Buttplug.DeviceMessage.StopDeviceCmd stop_device_cmd = 4;
  bool has_stop_device_cmd() const;
  private:
  bool _internal_has_stop_device_cmd() const;
  public:
  void clear_stop_device_cmd();
  const ::Buttplug::DeviceMessage_StopDeviceCmd& stop_device_cmd() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_StopDeviceCmd* release_stop_device_cmd();
  ::Buttplug::DeviceMessage_StopDeviceCmd* mutable_stop_device_cmd();
  void set_allocated_stop_device_cmd(::Buttplug::DeviceMessage_StopDeviceCmd* stop_device_cmd);
  private:
  const ::Buttplug::DeviceMessage_StopDeviceCmd& _internal_stop_device_cmd() const;
  ::Buttplug::DeviceMessage_StopDeviceCmd* _internal_mutable_stop_device_cmd();
  public:
  void unsafe_arena_set_allocated_stop_device_cmd(
      ::Buttplug::DeviceMessage_StopDeviceCmd* stop_device_cmd);
  ::Buttplug::DeviceMessage_StopDeviceCmd* unsafe_arena_release_stop_device_cmd();

  // .Buttplug.DeviceMessage.RawReadCmd raw_read_cmd = 5;
  bool has_raw_read_cmd() const;
  private:
  bool _internal_has_raw_read_cmd() const;
  public:
  void clear_raw_read_cmd();
  const ::Buttplug::DeviceMessage_RawReadCmd& raw_read_cmd() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_RawReadCmd* release_raw_read_cmd();
  ::Buttplug::DeviceMessage_RawReadCmd* mutable_raw_read_cmd();
  void set_allocated_raw_read_cmd(::Buttplug::DeviceMessage_RawReadCmd* raw_read_cmd);
  private:
  const ::Buttplug::DeviceMessage_RawReadCmd& _internal_raw_read_cmd() const;
  ::Buttplug::DeviceMessage_RawReadCmd* _internal_mutable_raw_read_cmd();
  public:
  void unsafe_arena_set_allocated_raw_read_cmd(
      ::Buttplug::DeviceMessage_RawReadCmd* raw_read_cmd);
  ::Buttplug::DeviceMessage_RawReadCmd* unsafe_arena_release_raw_read_cmd();

  // .Buttplug.DeviceMessage.RawWriteCmd raw_write_cmd = 6;
  bool has_raw_write_cmd() const;
  private:
  bool _internal_has_raw_write_cmd() const;
  public:
  void clear_raw_write_cmd();
  const ::Buttplug::DeviceMessage_RawWriteCmd& raw_write_cmd() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_RawWriteCmd* release_raw_write_cmd();
  ::Buttplug::DeviceMessage_RawWriteCmd* mutable_raw_write_cmd();
  void set_allocated_raw_write_cmd(::Buttplug::DeviceMessage_RawWriteCmd* raw_write_cmd);
  private:
  const ::Buttplug::DeviceMessage_RawWriteCmd& _internal_raw_write_cmd() const;
  ::Buttplug::DeviceMessage_RawWriteCmd* _internal_mutable_raw_write_cmd();
  public:
  void unsafe_arena_set_allocated_raw_write_cmd(
      ::Buttplug::DeviceMessage_RawWriteCmd* raw_write_cmd);
  ::Buttplug::DeviceMessage_RawWriteCmd* unsafe_arena_release_raw_write_cmd();

  // .Buttplug.DeviceMessage.RawSubscribeCmd raw_subscribe_cmd = 7;
  bool has_raw_subscribe_cmd() const;
  private:
  bool _internal_has_raw_subscribe_cmd() const;
  public:
  void clear_raw_subscribe_cmd();
  const ::Buttplug::DeviceMessage_RawSubscribeCmd& raw_subscribe_cmd() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_RawSubscribeCmd* release_raw_subscribe_cmd();
  ::Buttplug::DeviceMessage_RawSubscribeCmd* mutable_raw_subscribe_cmd();
  void set_allocated_raw_subscribe_cmd(::Buttplug::DeviceMessage_RawSubscribeCmd* raw_subscribe_cmd);
  private:
  const ::Buttplug::DeviceMessage_RawSubscribeCmd& _internal_raw_subscribe_cmd() const;
  ::Buttplug::DeviceMessage_RawSubscribeCmd* _internal_mutable_raw_subscribe_cmd();
  public:
  void unsafe_arena_set_allocated_raw_subscribe_cmd(
      ::Buttplug::DeviceMessage_RawSubscribeCmd* raw_subscribe_cmd);
  ::Buttplug::DeviceMessage_RawSubscribeCmd* unsafe_arena_release_raw_subscribe_cmd();

  // .Buttplug.DeviceMessage.RawUnsubscribeCmd raw_unsubscribe_cmd = 8;
  bool has_raw_unsubscribe_cmd() const;
  private:
  bool _internal_has_raw_unsubscribe_cmd() const;
  public:
  void clear_raw_unsubscribe_cmd();
  const ::Buttplug::DeviceMessage_RawUnsubscribeCmd& raw_unsubscribe_cmd() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_RawUnsubscribeCmd* release_raw_unsubscribe_cmd();
  ::Buttplug::DeviceMessage_RawUnsubscribeCmd* mutable_raw_unsubscribe_cmd();
  void set_allocated_raw_unsubscribe_cmd(::Buttplug::DeviceMessage_RawUnsubscribeCmd* raw_unsubscribe_cmd);
  private:
  const ::Buttplug::DeviceMessage_RawUnsubscribeCmd& _internal_raw_unsubscribe_cmd() const;
  ::Buttplug::DeviceMessage_RawUnsubscribeCmd* _internal_mutable_raw_unsubscribe_cmd();
  public:
  void unsafe_arena_set_allocated_raw_unsubscribe_cmd(
      ::Buttplug::DeviceMessage_RawUnsubscribeCmd* raw_unsubscribe_cmd);
  ::Buttplug::DeviceMessage_RawUnsubscribeCmd* unsafe_arena_release_raw_unsubscribe_cmd();

  // .Buttplug.DeviceMessage.BatteryLevelCmd battery_level_cmd = 9;
  bool has_battery_level_cmd() const;
  private:
  bool _internal_has_battery_level_cmd() const;
  public:
  void clear_battery_level_cmd();
  const ::Buttplug::DeviceMessage_BatteryLevelCmd& battery_level_cmd() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_BatteryLevelCmd* release_battery_level_cmd();
  ::Buttplug::DeviceMessage_BatteryLevelCmd* mutable_battery_level_cmd();
  void set_allocated_battery_level_cmd(::Buttplug::DeviceMessage_BatteryLevelCmd* battery_level_cmd);
  private:
  const ::Buttplug::DeviceMessage_BatteryLevelCmd& _internal_battery_level_cmd() const;
  ::Buttplug::DeviceMessage_BatteryLevelCmd* _internal_mutable_battery_level_cmd();
  public:
  void unsafe_arena_set_allocated_battery_level_cmd(
      ::Buttplug::DeviceMessage_BatteryLevelCmd* battery_level_cmd);
  ::Buttplug::DeviceMessage_BatteryLevelCmd* unsafe_arena_release_battery_level_cmd();

  // .Buttplug.DeviceMessage.RSSILevelCmd rssi_level_cmd = 10;
  bool has_rssi_level_cmd() const;
  private:
  bool _internal_has_rssi_level_cmd() const;
  public:
  void clear_rssi_level_cmd();
  const ::Buttplug::DeviceMessage_RSSILevelCmd& rssi_level_cmd() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_RSSILevelCmd* release_rssi_level_cmd();
  ::Buttplug::DeviceMessage_RSSILevelCmd* mutable_rssi_level_cmd();
  void set_allocated_rssi_level_cmd(::Buttplug::DeviceMessage_RSSILevelCmd* rssi_level_cmd);
  private:
  const ::Buttplug::DeviceMessage_RSSILevelCmd& _internal_rssi_level_cmd() const;
  ::Buttplug::DeviceMessage_RSSILevelCmd* _internal_mutable_rssi_level_cmd();
  public:
  void unsafe_arena_set_allocated_rssi_level_cmd(
      ::Buttplug::DeviceMessage_RSSILevelCmd* rssi_level_cmd);
  ::Buttplug::DeviceMessage_RSSILevelCmd* unsafe_arena_release_rssi_level_cmd();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage.FFIMessage)
 private:
  class _Internal;
  void set_has_vibrate_cmd();
  void set_has_rotate_cmd();
  void set_has_linear_cmd();
  void set_has_stop_device_cmd();
  void set_has_raw_read_cmd();
  void set_has_raw_write_cmd();
  void set_has_raw_subscribe_cmd();
  void set_has_raw_unsubscribe_cmd();
  void set_has_battery_level_cmd();
  void set_has_rssi_level_cmd();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Buttplug::DeviceMessage_VibrateCmd* vibrate_cmd_;
      ::Buttplug::DeviceMessage_RotateCmd* rotate_cmd_;
      ::Buttplug::DeviceMessage_LinearCmd* linear_cmd_;
      ::Buttplug::DeviceMessage_StopDeviceCmd* stop_device_cmd_;
      ::Buttplug::DeviceMessage_RawReadCmd* raw_read_cmd_;
      ::Buttplug::DeviceMessage_RawWriteCmd* raw_write_cmd_;
      ::Buttplug::DeviceMessage_RawSubscribeCmd* raw_subscribe_cmd_;
      ::Buttplug::DeviceMessage_RawUnsubscribeCmd* raw_unsubscribe_cmd_;
      ::Buttplug::DeviceMessage_BatteryLevelCmd* battery_level_cmd_;
      ::Buttplug::DeviceMessage_RSSILevelCmd* rssi_level_cmd_;
    } msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceMessage) */ {
 public:
  inline DeviceMessage() : DeviceMessage(nullptr) {}
  ~DeviceMessage() override;
  explicit PROTOBUF_CONSTEXPR DeviceMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage(const DeviceMessage& from);
  DeviceMessage(DeviceMessage&& from) noexcept
    : DeviceMessage() {
    *this = ::std::move(from);
  }

  inline DeviceMessage& operator=(const DeviceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage& operator=(DeviceMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage*>(
               &_DeviceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DeviceMessage& a, DeviceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceMessage& from) {
    DeviceMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceMessage";
  }
  protected:
  explicit DeviceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeviceMessage_VibrateComponent VibrateComponent;
  typedef DeviceMessage_VibrateCmd VibrateCmd;
  typedef DeviceMessage_RotateComponent RotateComponent;
  typedef DeviceMessage_RotateCmd RotateCmd;
  typedef DeviceMessage_LinearComponent LinearComponent;
  typedef DeviceMessage_LinearCmd LinearCmd;
  typedef DeviceMessage_StopDeviceCmd StopDeviceCmd;
  typedef DeviceMessage_RawReadCmd RawReadCmd;
  typedef DeviceMessage_RawWriteCmd RawWriteCmd;
  typedef DeviceMessage_RawSubscribeCmd RawSubscribeCmd;
  typedef DeviceMessage_RawUnsubscribeCmd RawUnsubscribeCmd;
  typedef DeviceMessage_BatteryLevelCmd BatteryLevelCmd;
  typedef DeviceMessage_RSSILevelCmd RSSILevelCmd;
  typedef DeviceMessage_FFIMessage FFIMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .Buttplug.DeviceMessage.FFIMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::Buttplug::DeviceMessage_FFIMessage& message() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceMessage_FFIMessage* release_message();
  ::Buttplug::DeviceMessage_FFIMessage* mutable_message();
  void set_allocated_message(::Buttplug::DeviceMessage_FFIMessage* message);
  private:
  const ::Buttplug::DeviceMessage_FFIMessage& _internal_message() const;
  ::Buttplug::DeviceMessage_FFIMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::Buttplug::DeviceMessage_FFIMessage* message);
  ::Buttplug::DeviceMessage_FFIMessage* unsafe_arena_release_message();

  // uint32 id = 1;
  void clear_id();
  ::uint32_t id() const;
  void set_id(::uint32_t value);
  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);
  public:

  // uint32 index = 2;
  void clear_index();
  ::uint32_t index() const;
  void set_index(::uint32_t value);
  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Buttplug::DeviceMessage_FFIMessage* message_;
    ::uint32_t id_;
    ::uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ServerMessage_MessageAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ServerMessage.MessageAttributes) */ {
 public:
  inline ServerMessage_MessageAttributes() : ServerMessage_MessageAttributes(nullptr) {}
  ~ServerMessage_MessageAttributes() override;
  explicit PROTOBUF_CONSTEXPR ServerMessage_MessageAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_MessageAttributes(const ServerMessage_MessageAttributes& from);
  ServerMessage_MessageAttributes(ServerMessage_MessageAttributes&& from) noexcept
    : ServerMessage_MessageAttributes() {
    *this = ::std::move(from);
  }

  inline ServerMessage_MessageAttributes& operator=(const ServerMessage_MessageAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_MessageAttributes& operator=(ServerMessage_MessageAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerMessage_MessageAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_MessageAttributes* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_MessageAttributes*>(
               &_ServerMessage_MessageAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ServerMessage_MessageAttributes& a, ServerMessage_MessageAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_MessageAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_MessageAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerMessage_MessageAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerMessage_MessageAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerMessage_MessageAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerMessage_MessageAttributes& from) {
    ServerMessage_MessageAttributes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage_MessageAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ServerMessage.MessageAttributes";
  }
  protected:
  explicit ServerMessage_MessageAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepCountFieldNumber = 3,
    kEndpointsFieldNumber = 4,
    kMaxDurationFieldNumber = 5,
    kMessageTypeFieldNumber = 1,
    kFeatureCountFieldNumber = 2,
  };
  // repeated uint32 step_count = 3;
  int step_count_size() const;
  private:
  int _internal_step_count_size() const;
  public:
  void clear_step_count();
  private:
  ::uint32_t _internal_step_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
      _internal_step_count() const;
  void _internal_add_step_count(::uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
      _internal_mutable_step_count();
  public:
  ::uint32_t step_count(int index) const;
  void set_step_count(int index, ::uint32_t value);
  void add_step_count(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
      step_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
      mutable_step_count();

  // repeated .Buttplug.Endpoint endpoints = 4;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  private:
  ::Buttplug::Endpoint _internal_endpoints(int index) const;
  void _internal_add_endpoints(::Buttplug::Endpoint value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_endpoints();
  public:
  ::Buttplug::Endpoint endpoints(int index) const;
  void set_endpoints(int index, ::Buttplug::Endpoint value);
  void add_endpoints(::Buttplug::Endpoint value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_endpoints();

  // repeated uint32 max_duration = 5;
  int max_duration_size() const;
  private:
  int _internal_max_duration_size() const;
  public:
  void clear_max_duration();
  private:
  ::uint32_t _internal_max_duration(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
      _internal_max_duration() const;
  void _internal_add_max_duration(::uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
      _internal_mutable_max_duration();
  public:
  ::uint32_t max_duration(int index) const;
  void set_max_duration(int index, ::uint32_t value);
  void add_max_duration(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
      max_duration() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
      mutable_max_duration();

  // .Buttplug.ServerMessage.MessageAttributeType message_type = 1;
  void clear_message_type();
  ::Buttplug::ServerMessage_MessageAttributeType message_type() const;
  void set_message_type(::Buttplug::ServerMessage_MessageAttributeType value);
  private:
  ::Buttplug::ServerMessage_MessageAttributeType _internal_message_type() const;
  void _internal_set_message_type(::Buttplug::ServerMessage_MessageAttributeType value);
  public:

  // uint32 feature_count = 2;
  void clear_feature_count();
  ::uint32_t feature_count() const;
  void set_feature_count(::uint32_t value);
  private:
  ::uint32_t _internal_feature_count() const;
  void _internal_set_feature_count(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.ServerMessage.MessageAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t > step_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _step_count_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> endpoints_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _endpoints_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t > max_duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _max_duration_cached_byte_size_;
    int message_type_;
    ::uint32_t feature_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ServerMessage_Ok final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.ServerMessage.Ok) */ {
 public:
  inline ServerMessage_Ok() : ServerMessage_Ok(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ServerMessage_Ok(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_Ok(const ServerMessage_Ok& from);
  ServerMessage_Ok(ServerMessage_Ok&& from) noexcept
    : ServerMessage_Ok() {
    *this = ::std::move(from);
  }

  inline ServerMessage_Ok& operator=(const ServerMessage_Ok& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_Ok& operator=(ServerMessage_Ok&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerMessage_Ok& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_Ok* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_Ok*>(
               &_ServerMessage_Ok_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ServerMessage_Ok& a, ServerMessage_Ok& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_Ok* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_Ok* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerMessage_Ok* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerMessage_Ok>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ServerMessage_Ok& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ServerMessage_Ok& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ServerMessage.Ok";
  }
  protected:
  explicit ServerMessage_Ok(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.ServerMessage.Ok)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ServerMessage_Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ServerMessage.Error) */ {
 public:
  inline ServerMessage_Error() : ServerMessage_Error(nullptr) {}
  ~ServerMessage_Error() override;
  explicit PROTOBUF_CONSTEXPR ServerMessage_Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_Error(const ServerMessage_Error& from);
  ServerMessage_Error(ServerMessage_Error&& from) noexcept
    : ServerMessage_Error() {
    *this = ::std::move(from);
  }

  inline ServerMessage_Error& operator=(const ServerMessage_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_Error& operator=(ServerMessage_Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerMessage_Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_Error* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_Error*>(
               &_ServerMessage_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ServerMessage_Error& a, ServerMessage_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerMessage_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerMessage_Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerMessage_Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerMessage_Error& from) {
    ServerMessage_Error::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage_Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ServerMessage.Error";
  }
  protected:
  explicit ServerMessage_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kBacktraceFieldNumber = 3,
    kErrorTypeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string backtrace = 3;
  void clear_backtrace();
  const std::string& backtrace() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_backtrace(ArgT0&& arg0, ArgT... args);
  std::string* mutable_backtrace();
  PROTOBUF_NODISCARD std::string* release_backtrace();
  void set_allocated_backtrace(std::string* backtrace);
  private:
  const std::string& _internal_backtrace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_backtrace(const std::string& value);
  std::string* _internal_mutable_backtrace();
  public:

  // .Buttplug.ServerMessage.ButtplugErrorType error_type = 1;
  void clear_error_type();
  ::Buttplug::ServerMessage_ButtplugErrorType error_type() const;
  void set_error_type(::Buttplug::ServerMessage_ButtplugErrorType value);
  private:
  ::Buttplug::ServerMessage_ButtplugErrorType _internal_error_type() const;
  void _internal_set_error_type(::Buttplug::ServerMessage_ButtplugErrorType value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.ServerMessage.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backtrace_;
    int error_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ServerMessage_ScanningFinished final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.ServerMessage.ScanningFinished) */ {
 public:
  inline ServerMessage_ScanningFinished() : ServerMessage_ScanningFinished(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ServerMessage_ScanningFinished(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_ScanningFinished(const ServerMessage_ScanningFinished& from);
  ServerMessage_ScanningFinished(ServerMessage_ScanningFinished&& from) noexcept
    : ServerMessage_ScanningFinished() {
    *this = ::std::move(from);
  }

  inline ServerMessage_ScanningFinished& operator=(const ServerMessage_ScanningFinished& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_ScanningFinished& operator=(ServerMessage_ScanningFinished&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerMessage_ScanningFinished& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_ScanningFinished* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_ScanningFinished*>(
               &_ServerMessage_ScanningFinished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ServerMessage_ScanningFinished& a, ServerMessage_ScanningFinished& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_ScanningFinished* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_ScanningFinished* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerMessage_ScanningFinished* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerMessage_ScanningFinished>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ServerMessage_ScanningFinished& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ServerMessage_ScanningFinished& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ServerMessage.ScanningFinished";
  }
  protected:
  explicit ServerMessage_ScanningFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.ServerMessage.ScanningFinished)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ServerMessage_DeviceAdded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ServerMessage.DeviceAdded) */ {
 public:
  inline ServerMessage_DeviceAdded() : ServerMessage_DeviceAdded(nullptr) {}
  ~ServerMessage_DeviceAdded() override;
  explicit PROTOBUF_CONSTEXPR ServerMessage_DeviceAdded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_DeviceAdded(const ServerMessage_DeviceAdded& from);
  ServerMessage_DeviceAdded(ServerMessage_DeviceAdded&& from) noexcept
    : ServerMessage_DeviceAdded() {
    *this = ::std::move(from);
  }

  inline ServerMessage_DeviceAdded& operator=(const ServerMessage_DeviceAdded& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_DeviceAdded& operator=(ServerMessage_DeviceAdded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerMessage_DeviceAdded& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_DeviceAdded* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_DeviceAdded*>(
               &_ServerMessage_DeviceAdded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ServerMessage_DeviceAdded& a, ServerMessage_DeviceAdded& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_DeviceAdded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_DeviceAdded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerMessage_DeviceAdded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerMessage_DeviceAdded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerMessage_DeviceAdded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerMessage_DeviceAdded& from) {
    ServerMessage_DeviceAdded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage_DeviceAdded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ServerMessage.DeviceAdded";
  }
  protected:
  explicit ServerMessage_DeviceAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageAttributesFieldNumber = 3,
    kNameFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // repeated .Buttplug.ServerMessage.MessageAttributes message_attributes = 3;
  int message_attributes_size() const;
  private:
  int _internal_message_attributes_size() const;
  public:
  void clear_message_attributes();
  ::Buttplug::ServerMessage_MessageAttributes* mutable_message_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::ServerMessage_MessageAttributes >*
      mutable_message_attributes();
  private:
  const ::Buttplug::ServerMessage_MessageAttributes& _internal_message_attributes(int index) const;
  ::Buttplug::ServerMessage_MessageAttributes* _internal_add_message_attributes();
  public:
  const ::Buttplug::ServerMessage_MessageAttributes& message_attributes(int index) const;
  ::Buttplug::ServerMessage_MessageAttributes* add_message_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::ServerMessage_MessageAttributes >&
      message_attributes() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 index = 2;
  void clear_index();
  ::uint32_t index() const;
  void set_index(::uint32_t value);
  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.ServerMessage.DeviceAdded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::ServerMessage_MessageAttributes > message_attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ServerMessage_DeviceRemoved final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ServerMessage.DeviceRemoved) */ {
 public:
  inline ServerMessage_DeviceRemoved() : ServerMessage_DeviceRemoved(nullptr) {}
  ~ServerMessage_DeviceRemoved() override;
  explicit PROTOBUF_CONSTEXPR ServerMessage_DeviceRemoved(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_DeviceRemoved(const ServerMessage_DeviceRemoved& from);
  ServerMessage_DeviceRemoved(ServerMessage_DeviceRemoved&& from) noexcept
    : ServerMessage_DeviceRemoved() {
    *this = ::std::move(from);
  }

  inline ServerMessage_DeviceRemoved& operator=(const ServerMessage_DeviceRemoved& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_DeviceRemoved& operator=(ServerMessage_DeviceRemoved&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerMessage_DeviceRemoved& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_DeviceRemoved* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_DeviceRemoved*>(
               &_ServerMessage_DeviceRemoved_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ServerMessage_DeviceRemoved& a, ServerMessage_DeviceRemoved& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_DeviceRemoved* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_DeviceRemoved* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerMessage_DeviceRemoved* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerMessage_DeviceRemoved>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerMessage_DeviceRemoved& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerMessage_DeviceRemoved& from) {
    ServerMessage_DeviceRemoved::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage_DeviceRemoved* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ServerMessage.DeviceRemoved";
  }
  protected:
  explicit ServerMessage_DeviceRemoved(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // uint32 index = 1;
  void clear_index();
  ::uint32_t index() const;
  void set_index(::uint32_t value);
  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.ServerMessage.DeviceRemoved)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ServerMessage_Disconnect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Buttplug.ServerMessage.Disconnect) */ {
 public:
  inline ServerMessage_Disconnect() : ServerMessage_Disconnect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ServerMessage_Disconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_Disconnect(const ServerMessage_Disconnect& from);
  ServerMessage_Disconnect(ServerMessage_Disconnect&& from) noexcept
    : ServerMessage_Disconnect() {
    *this = ::std::move(from);
  }

  inline ServerMessage_Disconnect& operator=(const ServerMessage_Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_Disconnect& operator=(ServerMessage_Disconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerMessage_Disconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_Disconnect* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_Disconnect*>(
               &_ServerMessage_Disconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ServerMessage_Disconnect& a, ServerMessage_Disconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_Disconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_Disconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerMessage_Disconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerMessage_Disconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ServerMessage_Disconnect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ServerMessage_Disconnect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ServerMessage.Disconnect";
  }
  protected:
  explicit ServerMessage_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Buttplug.ServerMessage.Disconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ServerMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ServerMessage) */ {
 public:
  inline ServerMessage() : ServerMessage(nullptr) {}
  ~ServerMessage() override;
  explicit PROTOBUF_CONSTEXPR ServerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kOk = 1,
    kError = 2,
    kScanningFinished = 3,
    kDeviceAdded = 4,
    kDeviceRemoved = 5,
    kDisconnect = 6,
    MSG_NOT_SET = 0,
  };

  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerMessage& from) {
    ServerMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ServerMessage";
  }
  protected:
  explicit ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerMessage_MessageAttributes MessageAttributes;
  typedef ServerMessage_Ok Ok;
  typedef ServerMessage_Error Error;
  typedef ServerMessage_ScanningFinished ScanningFinished;
  typedef ServerMessage_DeviceAdded DeviceAdded;
  typedef ServerMessage_DeviceRemoved DeviceRemoved;
  typedef ServerMessage_Disconnect Disconnect;

  using ButtplugErrorType = ServerMessage_ButtplugErrorType;
  static constexpr ButtplugErrorType ButtplugConnectorError = ServerMessage_ButtplugErrorType_ButtplugConnectorError;
  static constexpr ButtplugErrorType ButtplugHandshakeError = ServerMessage_ButtplugErrorType_ButtplugHandshakeError;
  static constexpr ButtplugErrorType ButtplugDeviceError = ServerMessage_ButtplugErrorType_ButtplugDeviceError;
  static constexpr ButtplugErrorType ButtplugPingError = ServerMessage_ButtplugErrorType_ButtplugPingError;
  static constexpr ButtplugErrorType ButtplugMessageError = ServerMessage_ButtplugErrorType_ButtplugMessageError;
  static constexpr ButtplugErrorType ButtplugUnknownError = ServerMessage_ButtplugErrorType_ButtplugUnknownError;
  static inline bool ButtplugErrorType_IsValid(int value) {
    return ServerMessage_ButtplugErrorType_IsValid(value);
  }
  static constexpr ButtplugErrorType ButtplugErrorType_MIN = ServerMessage_ButtplugErrorType_ButtplugErrorType_MIN;
  static constexpr ButtplugErrorType ButtplugErrorType_MAX = ServerMessage_ButtplugErrorType_ButtplugErrorType_MAX;
  static constexpr int ButtplugErrorType_ARRAYSIZE = ServerMessage_ButtplugErrorType_ButtplugErrorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtplugErrorType_descriptor() {
    return ServerMessage_ButtplugErrorType_descriptor();
  }
  template <typename T>
  static inline const std::string& ButtplugErrorType_Name(T value) {
    return ServerMessage_ButtplugErrorType_Name(value);
  }
  static inline bool ButtplugErrorType_Parse(absl::string_view name, ButtplugErrorType* value) {
    return ServerMessage_ButtplugErrorType_Parse(name, value);
  }

  using MessageAttributeType = ServerMessage_MessageAttributeType;
  static constexpr MessageAttributeType VibrateCmd = ServerMessage_MessageAttributeType_VibrateCmd;
  static constexpr MessageAttributeType RotateCmd = ServerMessage_MessageAttributeType_RotateCmd;
  static constexpr MessageAttributeType LinearCmd = ServerMessage_MessageAttributeType_LinearCmd;
  static constexpr MessageAttributeType StopDeviceCmd = ServerMessage_MessageAttributeType_StopDeviceCmd;
  static constexpr MessageAttributeType RawReadCmd = ServerMessage_MessageAttributeType_RawReadCmd;
  static constexpr MessageAttributeType RawWriteCmd = ServerMessage_MessageAttributeType_RawWriteCmd;
  static constexpr MessageAttributeType RawSubscribeCmd = ServerMessage_MessageAttributeType_RawSubscribeCmd;
  static constexpr MessageAttributeType RawUnsubscribeCmd = ServerMessage_MessageAttributeType_RawUnsubscribeCmd;
  static constexpr MessageAttributeType BatteryLevelCmd = ServerMessage_MessageAttributeType_BatteryLevelCmd;
  static constexpr MessageAttributeType RSSILevelCmd = ServerMessage_MessageAttributeType_RSSILevelCmd;
  static inline bool MessageAttributeType_IsValid(int value) {
    return ServerMessage_MessageAttributeType_IsValid(value);
  }
  static constexpr MessageAttributeType MessageAttributeType_MIN = ServerMessage_MessageAttributeType_MessageAttributeType_MIN;
  static constexpr MessageAttributeType MessageAttributeType_MAX = ServerMessage_MessageAttributeType_MessageAttributeType_MAX;
  static constexpr int MessageAttributeType_ARRAYSIZE = ServerMessage_MessageAttributeType_MessageAttributeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageAttributeType_descriptor() {
    return ServerMessage_MessageAttributeType_descriptor();
  }
  template <typename T>
  static inline const std::string& MessageAttributeType_Name(T value) {
    return ServerMessage_MessageAttributeType_Name(value);
  }
  static inline bool MessageAttributeType_Parse(absl::string_view name, MessageAttributeType* value) {
    return ServerMessage_MessageAttributeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
    kErrorFieldNumber = 2,
    kScanningFinishedFieldNumber = 3,
    kDeviceAddedFieldNumber = 4,
    kDeviceRemovedFieldNumber = 5,
    kDisconnectFieldNumber = 6,
  };
  // .Buttplug.ServerMessage.Ok ok = 1;
  bool has_ok() const;
  private:
  bool _internal_has_ok() const;
  public:
  void clear_ok();
  const ::Buttplug::ServerMessage_Ok& ok() const;
  PROTOBUF_NODISCARD ::Buttplug::ServerMessage_Ok* release_ok();
  ::Buttplug::ServerMessage_Ok* mutable_ok();
  void set_allocated_ok(::Buttplug::ServerMessage_Ok* ok);
  private:
  const ::Buttplug::ServerMessage_Ok& _internal_ok() const;
  ::Buttplug::ServerMessage_Ok* _internal_mutable_ok();
  public:
  void unsafe_arena_set_allocated_ok(
      ::Buttplug::ServerMessage_Ok* ok);
  ::Buttplug::ServerMessage_Ok* unsafe_arena_release_ok();

  // .Buttplug.ServerMessage.Error error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Buttplug::ServerMessage_Error& error() const;
  PROTOBUF_NODISCARD ::Buttplug::ServerMessage_Error* release_error();
  ::Buttplug::ServerMessage_Error* mutable_error();
  void set_allocated_error(::Buttplug::ServerMessage_Error* error);
  private:
  const ::Buttplug::ServerMessage_Error& _internal_error() const;
  ::Buttplug::ServerMessage_Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Buttplug::ServerMessage_Error* error);
  ::Buttplug::ServerMessage_Error* unsafe_arena_release_error();

  // .Buttplug.ServerMessage.ScanningFinished scanning_finished = 3;
  bool has_scanning_finished() const;
  private:
  bool _internal_has_scanning_finished() const;
  public:
  void clear_scanning_finished();
  const ::Buttplug::ServerMessage_ScanningFinished& scanning_finished() const;
  PROTOBUF_NODISCARD ::Buttplug::ServerMessage_ScanningFinished* release_scanning_finished();
  ::Buttplug::ServerMessage_ScanningFinished* mutable_scanning_finished();
  void set_allocated_scanning_finished(::Buttplug::ServerMessage_ScanningFinished* scanning_finished);
  private:
  const ::Buttplug::ServerMessage_ScanningFinished& _internal_scanning_finished() const;
  ::Buttplug::ServerMessage_ScanningFinished* _internal_mutable_scanning_finished();
  public:
  void unsafe_arena_set_allocated_scanning_finished(
      ::Buttplug::ServerMessage_ScanningFinished* scanning_finished);
  ::Buttplug::ServerMessage_ScanningFinished* unsafe_arena_release_scanning_finished();

  // .Buttplug.ServerMessage.DeviceAdded device_added = 4;
  bool has_device_added() const;
  private:
  bool _internal_has_device_added() const;
  public:
  void clear_device_added();
  const ::Buttplug::ServerMessage_DeviceAdded& device_added() const;
  PROTOBUF_NODISCARD ::Buttplug::ServerMessage_DeviceAdded* release_device_added();
  ::Buttplug::ServerMessage_DeviceAdded* mutable_device_added();
  void set_allocated_device_added(::Buttplug::ServerMessage_DeviceAdded* device_added);
  private:
  const ::Buttplug::ServerMessage_DeviceAdded& _internal_device_added() const;
  ::Buttplug::ServerMessage_DeviceAdded* _internal_mutable_device_added();
  public:
  void unsafe_arena_set_allocated_device_added(
      ::Buttplug::ServerMessage_DeviceAdded* device_added);
  ::Buttplug::ServerMessage_DeviceAdded* unsafe_arena_release_device_added();

  // .Buttplug.ServerMessage.DeviceRemoved device_removed = 5;
  bool has_device_removed() const;
  private:
  bool _internal_has_device_removed() const;
  public:
  void clear_device_removed();
  const ::Buttplug::ServerMessage_DeviceRemoved& device_removed() const;
  PROTOBUF_NODISCARD ::Buttplug::ServerMessage_DeviceRemoved* release_device_removed();
  ::Buttplug::ServerMessage_DeviceRemoved* mutable_device_removed();
  void set_allocated_device_removed(::Buttplug::ServerMessage_DeviceRemoved* device_removed);
  private:
  const ::Buttplug::ServerMessage_DeviceRemoved& _internal_device_removed() const;
  ::Buttplug::ServerMessage_DeviceRemoved* _internal_mutable_device_removed();
  public:
  void unsafe_arena_set_allocated_device_removed(
      ::Buttplug::ServerMessage_DeviceRemoved* device_removed);
  ::Buttplug::ServerMessage_DeviceRemoved* unsafe_arena_release_device_removed();

  // .Buttplug.ServerMessage.Disconnect disconnect = 6;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  const ::Buttplug::ServerMessage_Disconnect& disconnect() const;
  PROTOBUF_NODISCARD ::Buttplug::ServerMessage_Disconnect* release_disconnect();
  ::Buttplug::ServerMessage_Disconnect* mutable_disconnect();
  void set_allocated_disconnect(::Buttplug::ServerMessage_Disconnect* disconnect);
  private:
  const ::Buttplug::ServerMessage_Disconnect& _internal_disconnect() const;
  ::Buttplug::ServerMessage_Disconnect* _internal_mutable_disconnect();
  public:
  void unsafe_arena_set_allocated_disconnect(
      ::Buttplug::ServerMessage_Disconnect* disconnect);
  ::Buttplug::ServerMessage_Disconnect* unsafe_arena_release_disconnect();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Buttplug.ServerMessage)
 private:
  class _Internal;
  void set_has_ok();
  void set_has_error();
  void set_has_scanning_finished();
  void set_has_device_added();
  void set_has_device_removed();
  void set_has_disconnect();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Buttplug::ServerMessage_Ok* ok_;
      ::Buttplug::ServerMessage_Error* error_;
      ::Buttplug::ServerMessage_ScanningFinished* scanning_finished_;
      ::Buttplug::ServerMessage_DeviceAdded* device_added_;
      ::Buttplug::ServerMessage_DeviceRemoved* device_removed_;
      ::Buttplug::ServerMessage_Disconnect* disconnect_;
    } msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceEvent_Disconnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceEvent.Disconnect) */ {
 public:
  inline DeviceEvent_Disconnect() : DeviceEvent_Disconnect(nullptr) {}
  ~DeviceEvent_Disconnect() override;
  explicit PROTOBUF_CONSTEXPR DeviceEvent_Disconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceEvent_Disconnect(const DeviceEvent_Disconnect& from);
  DeviceEvent_Disconnect(DeviceEvent_Disconnect&& from) noexcept
    : DeviceEvent_Disconnect() {
    *this = ::std::move(from);
  }

  inline DeviceEvent_Disconnect& operator=(const DeviceEvent_Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceEvent_Disconnect& operator=(DeviceEvent_Disconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceEvent_Disconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceEvent_Disconnect* internal_default_instance() {
    return reinterpret_cast<const DeviceEvent_Disconnect*>(
               &_DeviceEvent_Disconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DeviceEvent_Disconnect& a, DeviceEvent_Disconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceEvent_Disconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceEvent_Disconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceEvent_Disconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceEvent_Disconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceEvent_Disconnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceEvent_Disconnect& from) {
    DeviceEvent_Disconnect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceEvent_Disconnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceEvent.Disconnect";
  }
  protected:
  explicit DeviceEvent_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // uint32 index = 1;
  void clear_index();
  ::uint32_t index() const;
  void set_index(::uint32_t value);
  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceEvent.Disconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceEvent_RawReading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceEvent.RawReading) */ {
 public:
  inline DeviceEvent_RawReading() : DeviceEvent_RawReading(nullptr) {}
  ~DeviceEvent_RawReading() override;
  explicit PROTOBUF_CONSTEXPR DeviceEvent_RawReading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceEvent_RawReading(const DeviceEvent_RawReading& from);
  DeviceEvent_RawReading(DeviceEvent_RawReading&& from) noexcept
    : DeviceEvent_RawReading() {
    *this = ::std::move(from);
  }

  inline DeviceEvent_RawReading& operator=(const DeviceEvent_RawReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceEvent_RawReading& operator=(DeviceEvent_RawReading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceEvent_RawReading& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceEvent_RawReading* internal_default_instance() {
    return reinterpret_cast<const DeviceEvent_RawReading*>(
               &_DeviceEvent_RawReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DeviceEvent_RawReading& a, DeviceEvent_RawReading& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceEvent_RawReading* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceEvent_RawReading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceEvent_RawReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceEvent_RawReading>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceEvent_RawReading& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceEvent_RawReading& from) {
    DeviceEvent_RawReading::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceEvent_RawReading* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceEvent.RawReading";
  }
  protected:
  explicit DeviceEvent_RawReading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kIndexFieldNumber = 1,
    kEndpointFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 index = 1;
  void clear_index();
  ::uint32_t index() const;
  void set_index(::uint32_t value);
  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);
  public:

  // .Buttplug.Endpoint endpoint = 2;
  void clear_endpoint();
  ::Buttplug::Endpoint endpoint() const;
  void set_endpoint(::Buttplug::Endpoint value);
  private:
  ::Buttplug::Endpoint _internal_endpoint() const;
  void _internal_set_endpoint(::Buttplug::Endpoint value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceEvent.RawReading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::uint32_t index_;
    int endpoint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceEvent_BatteryLevelReading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceEvent.BatteryLevelReading) */ {
 public:
  inline DeviceEvent_BatteryLevelReading() : DeviceEvent_BatteryLevelReading(nullptr) {}
  ~DeviceEvent_BatteryLevelReading() override;
  explicit PROTOBUF_CONSTEXPR DeviceEvent_BatteryLevelReading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceEvent_BatteryLevelReading(const DeviceEvent_BatteryLevelReading& from);
  DeviceEvent_BatteryLevelReading(DeviceEvent_BatteryLevelReading&& from) noexcept
    : DeviceEvent_BatteryLevelReading() {
    *this = ::std::move(from);
  }

  inline DeviceEvent_BatteryLevelReading& operator=(const DeviceEvent_BatteryLevelReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceEvent_BatteryLevelReading& operator=(DeviceEvent_BatteryLevelReading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceEvent_BatteryLevelReading& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceEvent_BatteryLevelReading* internal_default_instance() {
    return reinterpret_cast<const DeviceEvent_BatteryLevelReading*>(
               &_DeviceEvent_BatteryLevelReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DeviceEvent_BatteryLevelReading& a, DeviceEvent_BatteryLevelReading& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceEvent_BatteryLevelReading* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceEvent_BatteryLevelReading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceEvent_BatteryLevelReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceEvent_BatteryLevelReading>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceEvent_BatteryLevelReading& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceEvent_BatteryLevelReading& from) {
    DeviceEvent_BatteryLevelReading::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceEvent_BatteryLevelReading* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceEvent.BatteryLevelReading";
  }
  protected:
  explicit DeviceEvent_BatteryLevelReading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadingFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // double reading = 2;
  void clear_reading();
  double reading() const;
  void set_reading(double value);
  private:
  double _internal_reading() const;
  void _internal_set_reading(double value);
  public:

  // uint32 index = 1;
  void clear_index();
  ::uint32_t index() const;
  void set_index(::uint32_t value);
  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceEvent.BatteryLevelReading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double reading_;
    ::uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceEvent_RSSILevelReading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceEvent.RSSILevelReading) */ {
 public:
  inline DeviceEvent_RSSILevelReading() : DeviceEvent_RSSILevelReading(nullptr) {}
  ~DeviceEvent_RSSILevelReading() override;
  explicit PROTOBUF_CONSTEXPR DeviceEvent_RSSILevelReading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceEvent_RSSILevelReading(const DeviceEvent_RSSILevelReading& from);
  DeviceEvent_RSSILevelReading(DeviceEvent_RSSILevelReading&& from) noexcept
    : DeviceEvent_RSSILevelReading() {
    *this = ::std::move(from);
  }

  inline DeviceEvent_RSSILevelReading& operator=(const DeviceEvent_RSSILevelReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceEvent_RSSILevelReading& operator=(DeviceEvent_RSSILevelReading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceEvent_RSSILevelReading& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceEvent_RSSILevelReading* internal_default_instance() {
    return reinterpret_cast<const DeviceEvent_RSSILevelReading*>(
               &_DeviceEvent_RSSILevelReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(DeviceEvent_RSSILevelReading& a, DeviceEvent_RSSILevelReading& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceEvent_RSSILevelReading* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceEvent_RSSILevelReading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceEvent_RSSILevelReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceEvent_RSSILevelReading>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceEvent_RSSILevelReading& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceEvent_RSSILevelReading& from) {
    DeviceEvent_RSSILevelReading::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceEvent_RSSILevelReading* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceEvent.RSSILevelReading";
  }
  protected:
  explicit DeviceEvent_RSSILevelReading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kReadingFieldNumber = 2,
  };
  // uint32 index = 1;
  void clear_index();
  ::uint32_t index() const;
  void set_index(::uint32_t value);
  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);
  public:

  // int32 reading = 2;
  void clear_reading();
  ::int32_t reading() const;
  void set_reading(::int32_t value);
  private:
  ::int32_t _internal_reading() const;
  void _internal_set_reading(::int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.DeviceEvent.RSSILevelReading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t index_;
    ::int32_t reading_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class DeviceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.DeviceEvent) */ {
 public:
  inline DeviceEvent() : DeviceEvent(nullptr) {}
  ~DeviceEvent() override;
  explicit PROTOBUF_CONSTEXPR DeviceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceEvent(const DeviceEvent& from);
  DeviceEvent(DeviceEvent&& from) noexcept
    : DeviceEvent() {
    *this = ::std::move(from);
  }

  inline DeviceEvent& operator=(const DeviceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceEvent& operator=(DeviceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceEvent& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kDisconnect = 1,
    kBatteryLevelReading = 2,
    kRssiLevelReading = 3,
    kRawReading = 4,
    MSG_NOT_SET = 0,
  };

  static inline const DeviceEvent* internal_default_instance() {
    return reinterpret_cast<const DeviceEvent*>(
               &_DeviceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DeviceEvent& a, DeviceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceEvent& from) {
    DeviceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.DeviceEvent";
  }
  protected:
  explicit DeviceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeviceEvent_Disconnect Disconnect;
  typedef DeviceEvent_RawReading RawReading;
  typedef DeviceEvent_BatteryLevelReading BatteryLevelReading;
  typedef DeviceEvent_RSSILevelReading RSSILevelReading;

  // accessors -------------------------------------------------------

  enum : int {
    kDisconnectFieldNumber = 1,
    kBatteryLevelReadingFieldNumber = 2,
    kRssiLevelReadingFieldNumber = 3,
    kRawReadingFieldNumber = 4,
  };
  // .Buttplug.DeviceEvent.Disconnect disconnect = 1;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  const ::Buttplug::DeviceEvent_Disconnect& disconnect() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceEvent_Disconnect* release_disconnect();
  ::Buttplug::DeviceEvent_Disconnect* mutable_disconnect();
  void set_allocated_disconnect(::Buttplug::DeviceEvent_Disconnect* disconnect);
  private:
  const ::Buttplug::DeviceEvent_Disconnect& _internal_disconnect() const;
  ::Buttplug::DeviceEvent_Disconnect* _internal_mutable_disconnect();
  public:
  void unsafe_arena_set_allocated_disconnect(
      ::Buttplug::DeviceEvent_Disconnect* disconnect);
  ::Buttplug::DeviceEvent_Disconnect* unsafe_arena_release_disconnect();

  // .Buttplug.DeviceEvent.BatteryLevelReading battery_level_reading = 2;
  bool has_battery_level_reading() const;
  private:
  bool _internal_has_battery_level_reading() const;
  public:
  void clear_battery_level_reading();
  const ::Buttplug::DeviceEvent_BatteryLevelReading& battery_level_reading() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceEvent_BatteryLevelReading* release_battery_level_reading();
  ::Buttplug::DeviceEvent_BatteryLevelReading* mutable_battery_level_reading();
  void set_allocated_battery_level_reading(::Buttplug::DeviceEvent_BatteryLevelReading* battery_level_reading);
  private:
  const ::Buttplug::DeviceEvent_BatteryLevelReading& _internal_battery_level_reading() const;
  ::Buttplug::DeviceEvent_BatteryLevelReading* _internal_mutable_battery_level_reading();
  public:
  void unsafe_arena_set_allocated_battery_level_reading(
      ::Buttplug::DeviceEvent_BatteryLevelReading* battery_level_reading);
  ::Buttplug::DeviceEvent_BatteryLevelReading* unsafe_arena_release_battery_level_reading();

  // .Buttplug.DeviceEvent.RSSILevelReading rssi_level_reading = 3;
  bool has_rssi_level_reading() const;
  private:
  bool _internal_has_rssi_level_reading() const;
  public:
  void clear_rssi_level_reading();
  const ::Buttplug::DeviceEvent_RSSILevelReading& rssi_level_reading() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceEvent_RSSILevelReading* release_rssi_level_reading();
  ::Buttplug::DeviceEvent_RSSILevelReading* mutable_rssi_level_reading();
  void set_allocated_rssi_level_reading(::Buttplug::DeviceEvent_RSSILevelReading* rssi_level_reading);
  private:
  const ::Buttplug::DeviceEvent_RSSILevelReading& _internal_rssi_level_reading() const;
  ::Buttplug::DeviceEvent_RSSILevelReading* _internal_mutable_rssi_level_reading();
  public:
  void unsafe_arena_set_allocated_rssi_level_reading(
      ::Buttplug::DeviceEvent_RSSILevelReading* rssi_level_reading);
  ::Buttplug::DeviceEvent_RSSILevelReading* unsafe_arena_release_rssi_level_reading();

  // .Buttplug.DeviceEvent.RawReading raw_reading = 4;
  bool has_raw_reading() const;
  private:
  bool _internal_has_raw_reading() const;
  public:
  void clear_raw_reading();
  const ::Buttplug::DeviceEvent_RawReading& raw_reading() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceEvent_RawReading* release_raw_reading();
  ::Buttplug::DeviceEvent_RawReading* mutable_raw_reading();
  void set_allocated_raw_reading(::Buttplug::DeviceEvent_RawReading* raw_reading);
  private:
  const ::Buttplug::DeviceEvent_RawReading& _internal_raw_reading() const;
  ::Buttplug::DeviceEvent_RawReading* _internal_mutable_raw_reading();
  public:
  void unsafe_arena_set_allocated_raw_reading(
      ::Buttplug::DeviceEvent_RawReading* raw_reading);
  ::Buttplug::DeviceEvent_RawReading* unsafe_arena_release_raw_reading();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Buttplug.DeviceEvent)
 private:
  class _Internal;
  void set_has_disconnect();
  void set_has_battery_level_reading();
  void set_has_rssi_level_reading();
  void set_has_raw_reading();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Buttplug::DeviceEvent_Disconnect* disconnect_;
      ::Buttplug::DeviceEvent_BatteryLevelReading* battery_level_reading_;
      ::Buttplug::DeviceEvent_RSSILevelReading* rssi_level_reading_;
      ::Buttplug::DeviceEvent_RawReading* raw_reading_;
    } msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ButtplugFFIServerMessage_FFIMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ButtplugFFIServerMessage.FFIMessage) */ {
 public:
  inline ButtplugFFIServerMessage_FFIMessage() : ButtplugFFIServerMessage_FFIMessage(nullptr) {}
  ~ButtplugFFIServerMessage_FFIMessage() override;
  explicit PROTOBUF_CONSTEXPR ButtplugFFIServerMessage_FFIMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ButtplugFFIServerMessage_FFIMessage(const ButtplugFFIServerMessage_FFIMessage& from);
  ButtplugFFIServerMessage_FFIMessage(ButtplugFFIServerMessage_FFIMessage&& from) noexcept
    : ButtplugFFIServerMessage_FFIMessage() {
    *this = ::std::move(from);
  }

  inline ButtplugFFIServerMessage_FFIMessage& operator=(const ButtplugFFIServerMessage_FFIMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtplugFFIServerMessage_FFIMessage& operator=(ButtplugFFIServerMessage_FFIMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ButtplugFFIServerMessage_FFIMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kServerMessage = 1,
    kDeviceEvent = 2,
    MSG_NOT_SET = 0,
  };

  static inline const ButtplugFFIServerMessage_FFIMessage* internal_default_instance() {
    return reinterpret_cast<const ButtplugFFIServerMessage_FFIMessage*>(
               &_ButtplugFFIServerMessage_FFIMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ButtplugFFIServerMessage_FFIMessage& a, ButtplugFFIServerMessage_FFIMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtplugFFIServerMessage_FFIMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtplugFFIServerMessage_FFIMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ButtplugFFIServerMessage_FFIMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ButtplugFFIServerMessage_FFIMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ButtplugFFIServerMessage_FFIMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ButtplugFFIServerMessage_FFIMessage& from) {
    ButtplugFFIServerMessage_FFIMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtplugFFIServerMessage_FFIMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ButtplugFFIServerMessage.FFIMessage";
  }
  protected:
  explicit ButtplugFFIServerMessage_FFIMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerMessageFieldNumber = 1,
    kDeviceEventFieldNumber = 2,
  };
  // .Buttplug.ServerMessage server_message = 1;
  bool has_server_message() const;
  private:
  bool _internal_has_server_message() const;
  public:
  void clear_server_message();
  const ::Buttplug::ServerMessage& server_message() const;
  PROTOBUF_NODISCARD ::Buttplug::ServerMessage* release_server_message();
  ::Buttplug::ServerMessage* mutable_server_message();
  void set_allocated_server_message(::Buttplug::ServerMessage* server_message);
  private:
  const ::Buttplug::ServerMessage& _internal_server_message() const;
  ::Buttplug::ServerMessage* _internal_mutable_server_message();
  public:
  void unsafe_arena_set_allocated_server_message(
      ::Buttplug::ServerMessage* server_message);
  ::Buttplug::ServerMessage* unsafe_arena_release_server_message();

  // .Buttplug.DeviceEvent device_event = 2;
  bool has_device_event() const;
  private:
  bool _internal_has_device_event() const;
  public:
  void clear_device_event();
  const ::Buttplug::DeviceEvent& device_event() const;
  PROTOBUF_NODISCARD ::Buttplug::DeviceEvent* release_device_event();
  ::Buttplug::DeviceEvent* mutable_device_event();
  void set_allocated_device_event(::Buttplug::DeviceEvent* device_event);
  private:
  const ::Buttplug::DeviceEvent& _internal_device_event() const;
  ::Buttplug::DeviceEvent* _internal_mutable_device_event();
  public:
  void unsafe_arena_set_allocated_device_event(
      ::Buttplug::DeviceEvent* device_event);
  ::Buttplug::DeviceEvent* unsafe_arena_release_device_event();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Buttplug.ButtplugFFIServerMessage.FFIMessage)
 private:
  class _Internal;
  void set_has_server_message();
  void set_has_device_event();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Buttplug::ServerMessage* server_message_;
      ::Buttplug::DeviceEvent* device_event_;
    } msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};// -------------------------------------------------------------------

class ButtplugFFIServerMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Buttplug.ButtplugFFIServerMessage) */ {
 public:
  inline ButtplugFFIServerMessage() : ButtplugFFIServerMessage(nullptr) {}
  ~ButtplugFFIServerMessage() override;
  explicit PROTOBUF_CONSTEXPR ButtplugFFIServerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ButtplugFFIServerMessage(const ButtplugFFIServerMessage& from);
  ButtplugFFIServerMessage(ButtplugFFIServerMessage&& from) noexcept
    : ButtplugFFIServerMessage() {
    *this = ::std::move(from);
  }

  inline ButtplugFFIServerMessage& operator=(const ButtplugFFIServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtplugFFIServerMessage& operator=(ButtplugFFIServerMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ButtplugFFIServerMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ButtplugFFIServerMessage* internal_default_instance() {
    return reinterpret_cast<const ButtplugFFIServerMessage*>(
               &_ButtplugFFIServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ButtplugFFIServerMessage& a, ButtplugFFIServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtplugFFIServerMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtplugFFIServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ButtplugFFIServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ButtplugFFIServerMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ButtplugFFIServerMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ButtplugFFIServerMessage& from) {
    ButtplugFFIServerMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtplugFFIServerMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Buttplug.ButtplugFFIServerMessage";
  }
  protected:
  explicit ButtplugFFIServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ButtplugFFIServerMessage_FFIMessage FFIMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .Buttplug.ButtplugFFIServerMessage.FFIMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::Buttplug::ButtplugFFIServerMessage_FFIMessage& message() const;
  PROTOBUF_NODISCARD ::Buttplug::ButtplugFFIServerMessage_FFIMessage* release_message();
  ::Buttplug::ButtplugFFIServerMessage_FFIMessage* mutable_message();
  void set_allocated_message(::Buttplug::ButtplugFFIServerMessage_FFIMessage* message);
  private:
  const ::Buttplug::ButtplugFFIServerMessage_FFIMessage& _internal_message() const;
  ::Buttplug::ButtplugFFIServerMessage_FFIMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::Buttplug::ButtplugFFIServerMessage_FFIMessage* message);
  ::Buttplug::ButtplugFFIServerMessage_FFIMessage* unsafe_arena_release_message();

  // uint32 id = 1;
  void clear_id();
  ::uint32_t id() const;
  void set_id(::uint32_t value);
  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Buttplug.ButtplugFFIServerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Buttplug::ButtplugFFIServerMessage_FFIMessage* message_;
    ::uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buttplug_5frs_5fffi_2eproto;
};
// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ClientMessage_ConnectLocal

// string server_name = 1;
inline void ClientMessage_ConnectLocal::clear_server_name() {
  _impl_.server_name_.ClearToEmpty();
}
inline const std::string& ClientMessage_ConnectLocal::server_name() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.ConnectLocal.server_name)
  return _internal_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMessage_ConnectLocal::set_server_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Buttplug.ClientMessage.ConnectLocal.server_name)
}
inline std::string* ClientMessage_ConnectLocal::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.ConnectLocal.server_name)
  return _s;
}
inline const std::string& ClientMessage_ConnectLocal::_internal_server_name() const {
  return _impl_.server_name_.Get();
}
inline void ClientMessage_ConnectLocal::_internal_set_server_name(const std::string& value) {

  _impl_.server_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMessage_ConnectLocal::_internal_mutable_server_name() {

  return _impl_.server_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMessage_ConnectLocal::release_server_name() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.ConnectLocal.server_name)
  return _impl_.server_name_.Release();
}
inline void ClientMessage_ConnectLocal::set_allocated_server_name(std::string* server_name) {
  _impl_.server_name_.SetAllocated(server_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_name_.IsDefault()) {
    _impl_.server_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.ConnectLocal.server_name)
}

// uint32 max_ping_time = 2;
inline void ClientMessage_ConnectLocal::clear_max_ping_time() {
  _impl_.max_ping_time_ = 0u;
}
inline ::uint32_t ClientMessage_ConnectLocal::_internal_max_ping_time() const {
  return _impl_.max_ping_time_;
}
inline ::uint32_t ClientMessage_ConnectLocal::max_ping_time() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.ConnectLocal.max_ping_time)
  return _internal_max_ping_time();
}
inline void ClientMessage_ConnectLocal::_internal_set_max_ping_time(::uint32_t value) {

  _impl_.max_ping_time_ = value;
}
inline void ClientMessage_ConnectLocal::set_max_ping_time(::uint32_t value) {
  _internal_set_max_ping_time(value);
  // @@protoc_insertion_point(field_set:Buttplug.ClientMessage.ConnectLocal.max_ping_time)
}

// bool allow_raw_messages = 3;
inline void ClientMessage_ConnectLocal::clear_allow_raw_messages() {
  _impl_.allow_raw_messages_ = false;
}
inline bool ClientMessage_ConnectLocal::_internal_allow_raw_messages() const {
  return _impl_.allow_raw_messages_;
}
inline bool ClientMessage_ConnectLocal::allow_raw_messages() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.ConnectLocal.allow_raw_messages)
  return _internal_allow_raw_messages();
}
inline void ClientMessage_ConnectLocal::_internal_set_allow_raw_messages(bool value) {

  _impl_.allow_raw_messages_ = value;
}
inline void ClientMessage_ConnectLocal::set_allow_raw_messages(bool value) {
  _internal_set_allow_raw_messages(value);
  // @@protoc_insertion_point(field_set:Buttplug.ClientMessage.ConnectLocal.allow_raw_messages)
}

// string device_configuration_json = 4;
inline void ClientMessage_ConnectLocal::clear_device_configuration_json() {
  _impl_.device_configuration_json_.ClearToEmpty();
}
inline const std::string& ClientMessage_ConnectLocal::device_configuration_json() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.ConnectLocal.device_configuration_json)
  return _internal_device_configuration_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMessage_ConnectLocal::set_device_configuration_json(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_configuration_json_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Buttplug.ClientMessage.ConnectLocal.device_configuration_json)
}
inline std::string* ClientMessage_ConnectLocal::mutable_device_configuration_json() {
  std::string* _s = _internal_mutable_device_configuration_json();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.ConnectLocal.device_configuration_json)
  return _s;
}
inline const std::string& ClientMessage_ConnectLocal::_internal_device_configuration_json() const {
  return _impl_.device_configuration_json_.Get();
}
inline void ClientMessage_ConnectLocal::_internal_set_device_configuration_json(const std::string& value) {

  _impl_.device_configuration_json_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMessage_ConnectLocal::_internal_mutable_device_configuration_json() {

  return _impl_.device_configuration_json_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMessage_ConnectLocal::release_device_configuration_json() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.ConnectLocal.device_configuration_json)
  return _impl_.device_configuration_json_.Release();
}
inline void ClientMessage_ConnectLocal::set_allocated_device_configuration_json(std::string* device_configuration_json) {
  _impl_.device_configuration_json_.SetAllocated(device_configuration_json, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_configuration_json_.IsDefault()) {
    _impl_.device_configuration_json_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.ConnectLocal.device_configuration_json)
}

// string user_device_configuration_json = 5;
inline void ClientMessage_ConnectLocal::clear_user_device_configuration_json() {
  _impl_.user_device_configuration_json_.ClearToEmpty();
}
inline const std::string& ClientMessage_ConnectLocal::user_device_configuration_json() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.ConnectLocal.user_device_configuration_json)
  return _internal_user_device_configuration_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMessage_ConnectLocal::set_user_device_configuration_json(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_device_configuration_json_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Buttplug.ClientMessage.ConnectLocal.user_device_configuration_json)
}
inline std::string* ClientMessage_ConnectLocal::mutable_user_device_configuration_json() {
  std::string* _s = _internal_mutable_user_device_configuration_json();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.ConnectLocal.user_device_configuration_json)
  return _s;
}
inline const std::string& ClientMessage_ConnectLocal::_internal_user_device_configuration_json() const {
  return _impl_.user_device_configuration_json_.Get();
}
inline void ClientMessage_ConnectLocal::_internal_set_user_device_configuration_json(const std::string& value) {

  _impl_.user_device_configuration_json_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMessage_ConnectLocal::_internal_mutable_user_device_configuration_json() {

  return _impl_.user_device_configuration_json_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMessage_ConnectLocal::release_user_device_configuration_json() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.ConnectLocal.user_device_configuration_json)
  return _impl_.user_device_configuration_json_.Release();
}
inline void ClientMessage_ConnectLocal::set_allocated_user_device_configuration_json(std::string* user_device_configuration_json) {
  _impl_.user_device_configuration_json_.SetAllocated(user_device_configuration_json, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_device_configuration_json_.IsDefault()) {
    _impl_.user_device_configuration_json_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.ConnectLocal.user_device_configuration_json)
}

// uint32 comm_manager_types = 6;
inline void ClientMessage_ConnectLocal::clear_comm_manager_types() {
  _impl_.comm_manager_types_ = 0u;
}
inline ::uint32_t ClientMessage_ConnectLocal::_internal_comm_manager_types() const {
  return _impl_.comm_manager_types_;
}
inline ::uint32_t ClientMessage_ConnectLocal::comm_manager_types() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.ConnectLocal.comm_manager_types)
  return _internal_comm_manager_types();
}
inline void ClientMessage_ConnectLocal::_internal_set_comm_manager_types(::uint32_t value) {

  _impl_.comm_manager_types_ = value;
}
inline void ClientMessage_ConnectLocal::set_comm_manager_types(::uint32_t value) {
  _internal_set_comm_manager_types(value);
  // @@protoc_insertion_point(field_set:Buttplug.ClientMessage.ConnectLocal.comm_manager_types)
}

// -------------------------------------------------------------------

// ClientMessage_ConnectWebsocket

// string address = 1;
inline void ClientMessage_ConnectWebsocket::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& ClientMessage_ConnectWebsocket::address() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.ConnectWebsocket.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMessage_ConnectWebsocket::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Buttplug.ClientMessage.ConnectWebsocket.address)
}
inline std::string* ClientMessage_ConnectWebsocket::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.ConnectWebsocket.address)
  return _s;
}
inline const std::string& ClientMessage_ConnectWebsocket::_internal_address() const {
  return _impl_.address_.Get();
}
inline void ClientMessage_ConnectWebsocket::_internal_set_address(const std::string& value) {

  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMessage_ConnectWebsocket::_internal_mutable_address() {

  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMessage_ConnectWebsocket::release_address() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.ConnectWebsocket.address)
  return _impl_.address_.Release();
}
inline void ClientMessage_ConnectWebsocket::set_allocated_address(std::string* address) {
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.ConnectWebsocket.address)
}

// bool bypass_cert_verification = 2;
inline void ClientMessage_ConnectWebsocket::clear_bypass_cert_verification() {
  _impl_.bypass_cert_verification_ = false;
}
inline bool ClientMessage_ConnectWebsocket::_internal_bypass_cert_verification() const {
  return _impl_.bypass_cert_verification_;
}
inline bool ClientMessage_ConnectWebsocket::bypass_cert_verification() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.ConnectWebsocket.bypass_cert_verification)
  return _internal_bypass_cert_verification();
}
inline void ClientMessage_ConnectWebsocket::_internal_set_bypass_cert_verification(bool value) {

  _impl_.bypass_cert_verification_ = value;
}
inline void ClientMessage_ConnectWebsocket::set_bypass_cert_verification(bool value) {
  _internal_set_bypass_cert_verification(value);
  // @@protoc_insertion_point(field_set:Buttplug.ClientMessage.ConnectWebsocket.bypass_cert_verification)
}

// -------------------------------------------------------------------

// ClientMessage_StartScanning

// -------------------------------------------------------------------

// ClientMessage_StopScanning

// -------------------------------------------------------------------

// ClientMessage_StopAllDevices

// -------------------------------------------------------------------

// ClientMessage_Disconnect

// -------------------------------------------------------------------

// ClientMessage_Ping

// -------------------------------------------------------------------

// ClientMessage_FFIMessage

// .Buttplug.ClientMessage.ConnectLocal connect_local = 1;
inline bool ClientMessage_FFIMessage::_internal_has_connect_local() const {
  return msg_case() == kConnectLocal;
}
inline bool ClientMessage_FFIMessage::has_connect_local() const {
  return _internal_has_connect_local();
}
inline void ClientMessage_FFIMessage::set_has_connect_local() {
  _impl_._oneof_case_[0] = kConnectLocal;
}
inline void ClientMessage_FFIMessage::clear_connect_local() {
  if (_internal_has_connect_local()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.connect_local_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ClientMessage_ConnectLocal* ClientMessage_FFIMessage::release_connect_local() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.FFIMessage.connect_local)
  if (_internal_has_connect_local()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_ConnectLocal* temp = _impl_.msg_.connect_local_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.connect_local_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ClientMessage_ConnectLocal& ClientMessage_FFIMessage::_internal_connect_local() const {
  return _internal_has_connect_local()
      ? *_impl_.msg_.connect_local_
      : reinterpret_cast< ::Buttplug::ClientMessage_ConnectLocal&>(::Buttplug::_ClientMessage_ConnectLocal_default_instance_);
}
inline const ::Buttplug::ClientMessage_ConnectLocal& ClientMessage_FFIMessage::connect_local() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.FFIMessage.connect_local)
  return _internal_connect_local();
}
inline ::Buttplug::ClientMessage_ConnectLocal* ClientMessage_FFIMessage::unsafe_arena_release_connect_local() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ClientMessage.FFIMessage.connect_local)
  if (_internal_has_connect_local()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_ConnectLocal* temp = _impl_.msg_.connect_local_;
    _impl_.msg_.connect_local_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage_FFIMessage::unsafe_arena_set_allocated_connect_local(::Buttplug::ClientMessage_ConnectLocal* connect_local) {
  clear_msg();
  if (connect_local) {
    set_has_connect_local();
    _impl_.msg_.connect_local_ = connect_local;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ClientMessage.FFIMessage.connect_local)
}
inline ::Buttplug::ClientMessage_ConnectLocal* ClientMessage_FFIMessage::_internal_mutable_connect_local() {
  if (!_internal_has_connect_local()) {
    clear_msg();
    set_has_connect_local();
    _impl_.msg_.connect_local_ = CreateMaybeMessage< ::Buttplug::ClientMessage_ConnectLocal >(GetArenaForAllocation());
  }
  return _impl_.msg_.connect_local_;
}
inline ::Buttplug::ClientMessage_ConnectLocal* ClientMessage_FFIMessage::mutable_connect_local() {
  ::Buttplug::ClientMessage_ConnectLocal* _msg = _internal_mutable_connect_local();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.FFIMessage.connect_local)
  return _msg;
}

// .Buttplug.ClientMessage.ConnectWebsocket connect_websocket = 2;
inline bool ClientMessage_FFIMessage::_internal_has_connect_websocket() const {
  return msg_case() == kConnectWebsocket;
}
inline bool ClientMessage_FFIMessage::has_connect_websocket() const {
  return _internal_has_connect_websocket();
}
inline void ClientMessage_FFIMessage::set_has_connect_websocket() {
  _impl_._oneof_case_[0] = kConnectWebsocket;
}
inline void ClientMessage_FFIMessage::clear_connect_websocket() {
  if (_internal_has_connect_websocket()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.connect_websocket_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ClientMessage_ConnectWebsocket* ClientMessage_FFIMessage::release_connect_websocket() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.FFIMessage.connect_websocket)
  if (_internal_has_connect_websocket()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_ConnectWebsocket* temp = _impl_.msg_.connect_websocket_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.connect_websocket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ClientMessage_ConnectWebsocket& ClientMessage_FFIMessage::_internal_connect_websocket() const {
  return _internal_has_connect_websocket()
      ? *_impl_.msg_.connect_websocket_
      : reinterpret_cast< ::Buttplug::ClientMessage_ConnectWebsocket&>(::Buttplug::_ClientMessage_ConnectWebsocket_default_instance_);
}
inline const ::Buttplug::ClientMessage_ConnectWebsocket& ClientMessage_FFIMessage::connect_websocket() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.FFIMessage.connect_websocket)
  return _internal_connect_websocket();
}
inline ::Buttplug::ClientMessage_ConnectWebsocket* ClientMessage_FFIMessage::unsafe_arena_release_connect_websocket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ClientMessage.FFIMessage.connect_websocket)
  if (_internal_has_connect_websocket()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_ConnectWebsocket* temp = _impl_.msg_.connect_websocket_;
    _impl_.msg_.connect_websocket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage_FFIMessage::unsafe_arena_set_allocated_connect_websocket(::Buttplug::ClientMessage_ConnectWebsocket* connect_websocket) {
  clear_msg();
  if (connect_websocket) {
    set_has_connect_websocket();
    _impl_.msg_.connect_websocket_ = connect_websocket;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ClientMessage.FFIMessage.connect_websocket)
}
inline ::Buttplug::ClientMessage_ConnectWebsocket* ClientMessage_FFIMessage::_internal_mutable_connect_websocket() {
  if (!_internal_has_connect_websocket()) {
    clear_msg();
    set_has_connect_websocket();
    _impl_.msg_.connect_websocket_ = CreateMaybeMessage< ::Buttplug::ClientMessage_ConnectWebsocket >(GetArenaForAllocation());
  }
  return _impl_.msg_.connect_websocket_;
}
inline ::Buttplug::ClientMessage_ConnectWebsocket* ClientMessage_FFIMessage::mutable_connect_websocket() {
  ::Buttplug::ClientMessage_ConnectWebsocket* _msg = _internal_mutable_connect_websocket();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.FFIMessage.connect_websocket)
  return _msg;
}

// .Buttplug.ClientMessage.StartScanning start_scanning = 3;
inline bool ClientMessage_FFIMessage::_internal_has_start_scanning() const {
  return msg_case() == kStartScanning;
}
inline bool ClientMessage_FFIMessage::has_start_scanning() const {
  return _internal_has_start_scanning();
}
inline void ClientMessage_FFIMessage::set_has_start_scanning() {
  _impl_._oneof_case_[0] = kStartScanning;
}
inline void ClientMessage_FFIMessage::clear_start_scanning() {
  if (_internal_has_start_scanning()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.start_scanning_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ClientMessage_StartScanning* ClientMessage_FFIMessage::release_start_scanning() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.FFIMessage.start_scanning)
  if (_internal_has_start_scanning()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_StartScanning* temp = _impl_.msg_.start_scanning_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.start_scanning_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ClientMessage_StartScanning& ClientMessage_FFIMessage::_internal_start_scanning() const {
  return _internal_has_start_scanning()
      ? *_impl_.msg_.start_scanning_
      : reinterpret_cast< ::Buttplug::ClientMessage_StartScanning&>(::Buttplug::_ClientMessage_StartScanning_default_instance_);
}
inline const ::Buttplug::ClientMessage_StartScanning& ClientMessage_FFIMessage::start_scanning() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.FFIMessage.start_scanning)
  return _internal_start_scanning();
}
inline ::Buttplug::ClientMessage_StartScanning* ClientMessage_FFIMessage::unsafe_arena_release_start_scanning() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ClientMessage.FFIMessage.start_scanning)
  if (_internal_has_start_scanning()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_StartScanning* temp = _impl_.msg_.start_scanning_;
    _impl_.msg_.start_scanning_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage_FFIMessage::unsafe_arena_set_allocated_start_scanning(::Buttplug::ClientMessage_StartScanning* start_scanning) {
  clear_msg();
  if (start_scanning) {
    set_has_start_scanning();
    _impl_.msg_.start_scanning_ = start_scanning;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ClientMessage.FFIMessage.start_scanning)
}
inline ::Buttplug::ClientMessage_StartScanning* ClientMessage_FFIMessage::_internal_mutable_start_scanning() {
  if (!_internal_has_start_scanning()) {
    clear_msg();
    set_has_start_scanning();
    _impl_.msg_.start_scanning_ = CreateMaybeMessage< ::Buttplug::ClientMessage_StartScanning >(GetArenaForAllocation());
  }
  return _impl_.msg_.start_scanning_;
}
inline ::Buttplug::ClientMessage_StartScanning* ClientMessage_FFIMessage::mutable_start_scanning() {
  ::Buttplug::ClientMessage_StartScanning* _msg = _internal_mutable_start_scanning();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.FFIMessage.start_scanning)
  return _msg;
}

// .Buttplug.ClientMessage.StopScanning stop_scanning = 4;
inline bool ClientMessage_FFIMessage::_internal_has_stop_scanning() const {
  return msg_case() == kStopScanning;
}
inline bool ClientMessage_FFIMessage::has_stop_scanning() const {
  return _internal_has_stop_scanning();
}
inline void ClientMessage_FFIMessage::set_has_stop_scanning() {
  _impl_._oneof_case_[0] = kStopScanning;
}
inline void ClientMessage_FFIMessage::clear_stop_scanning() {
  if (_internal_has_stop_scanning()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.stop_scanning_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ClientMessage_StopScanning* ClientMessage_FFIMessage::release_stop_scanning() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.FFIMessage.stop_scanning)
  if (_internal_has_stop_scanning()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_StopScanning* temp = _impl_.msg_.stop_scanning_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.stop_scanning_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ClientMessage_StopScanning& ClientMessage_FFIMessage::_internal_stop_scanning() const {
  return _internal_has_stop_scanning()
      ? *_impl_.msg_.stop_scanning_
      : reinterpret_cast< ::Buttplug::ClientMessage_StopScanning&>(::Buttplug::_ClientMessage_StopScanning_default_instance_);
}
inline const ::Buttplug::ClientMessage_StopScanning& ClientMessage_FFIMessage::stop_scanning() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.FFIMessage.stop_scanning)
  return _internal_stop_scanning();
}
inline ::Buttplug::ClientMessage_StopScanning* ClientMessage_FFIMessage::unsafe_arena_release_stop_scanning() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ClientMessage.FFIMessage.stop_scanning)
  if (_internal_has_stop_scanning()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_StopScanning* temp = _impl_.msg_.stop_scanning_;
    _impl_.msg_.stop_scanning_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage_FFIMessage::unsafe_arena_set_allocated_stop_scanning(::Buttplug::ClientMessage_StopScanning* stop_scanning) {
  clear_msg();
  if (stop_scanning) {
    set_has_stop_scanning();
    _impl_.msg_.stop_scanning_ = stop_scanning;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ClientMessage.FFIMessage.stop_scanning)
}
inline ::Buttplug::ClientMessage_StopScanning* ClientMessage_FFIMessage::_internal_mutable_stop_scanning() {
  if (!_internal_has_stop_scanning()) {
    clear_msg();
    set_has_stop_scanning();
    _impl_.msg_.stop_scanning_ = CreateMaybeMessage< ::Buttplug::ClientMessage_StopScanning >(GetArenaForAllocation());
  }
  return _impl_.msg_.stop_scanning_;
}
inline ::Buttplug::ClientMessage_StopScanning* ClientMessage_FFIMessage::mutable_stop_scanning() {
  ::Buttplug::ClientMessage_StopScanning* _msg = _internal_mutable_stop_scanning();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.FFIMessage.stop_scanning)
  return _msg;
}

// .Buttplug.ClientMessage.StopAllDevices stop_all_devices = 5;
inline bool ClientMessage_FFIMessage::_internal_has_stop_all_devices() const {
  return msg_case() == kStopAllDevices;
}
inline bool ClientMessage_FFIMessage::has_stop_all_devices() const {
  return _internal_has_stop_all_devices();
}
inline void ClientMessage_FFIMessage::set_has_stop_all_devices() {
  _impl_._oneof_case_[0] = kStopAllDevices;
}
inline void ClientMessage_FFIMessage::clear_stop_all_devices() {
  if (_internal_has_stop_all_devices()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.stop_all_devices_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ClientMessage_StopAllDevices* ClientMessage_FFIMessage::release_stop_all_devices() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.FFIMessage.stop_all_devices)
  if (_internal_has_stop_all_devices()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_StopAllDevices* temp = _impl_.msg_.stop_all_devices_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.stop_all_devices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ClientMessage_StopAllDevices& ClientMessage_FFIMessage::_internal_stop_all_devices() const {
  return _internal_has_stop_all_devices()
      ? *_impl_.msg_.stop_all_devices_
      : reinterpret_cast< ::Buttplug::ClientMessage_StopAllDevices&>(::Buttplug::_ClientMessage_StopAllDevices_default_instance_);
}
inline const ::Buttplug::ClientMessage_StopAllDevices& ClientMessage_FFIMessage::stop_all_devices() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.FFIMessage.stop_all_devices)
  return _internal_stop_all_devices();
}
inline ::Buttplug::ClientMessage_StopAllDevices* ClientMessage_FFIMessage::unsafe_arena_release_stop_all_devices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ClientMessage.FFIMessage.stop_all_devices)
  if (_internal_has_stop_all_devices()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_StopAllDevices* temp = _impl_.msg_.stop_all_devices_;
    _impl_.msg_.stop_all_devices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage_FFIMessage::unsafe_arena_set_allocated_stop_all_devices(::Buttplug::ClientMessage_StopAllDevices* stop_all_devices) {
  clear_msg();
  if (stop_all_devices) {
    set_has_stop_all_devices();
    _impl_.msg_.stop_all_devices_ = stop_all_devices;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ClientMessage.FFIMessage.stop_all_devices)
}
inline ::Buttplug::ClientMessage_StopAllDevices* ClientMessage_FFIMessage::_internal_mutable_stop_all_devices() {
  if (!_internal_has_stop_all_devices()) {
    clear_msg();
    set_has_stop_all_devices();
    _impl_.msg_.stop_all_devices_ = CreateMaybeMessage< ::Buttplug::ClientMessage_StopAllDevices >(GetArenaForAllocation());
  }
  return _impl_.msg_.stop_all_devices_;
}
inline ::Buttplug::ClientMessage_StopAllDevices* ClientMessage_FFIMessage::mutable_stop_all_devices() {
  ::Buttplug::ClientMessage_StopAllDevices* _msg = _internal_mutable_stop_all_devices();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.FFIMessage.stop_all_devices)
  return _msg;
}

// .Buttplug.ClientMessage.Disconnect disconnect = 6;
inline bool ClientMessage_FFIMessage::_internal_has_disconnect() const {
  return msg_case() == kDisconnect;
}
inline bool ClientMessage_FFIMessage::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void ClientMessage_FFIMessage::set_has_disconnect() {
  _impl_._oneof_case_[0] = kDisconnect;
}
inline void ClientMessage_FFIMessage::clear_disconnect() {
  if (_internal_has_disconnect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.disconnect_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ClientMessage_Disconnect* ClientMessage_FFIMessage::release_disconnect() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.FFIMessage.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_Disconnect* temp = _impl_.msg_.disconnect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ClientMessage_Disconnect& ClientMessage_FFIMessage::_internal_disconnect() const {
  return _internal_has_disconnect()
      ? *_impl_.msg_.disconnect_
      : reinterpret_cast< ::Buttplug::ClientMessage_Disconnect&>(::Buttplug::_ClientMessage_Disconnect_default_instance_);
}
inline const ::Buttplug::ClientMessage_Disconnect& ClientMessage_FFIMessage::disconnect() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.FFIMessage.disconnect)
  return _internal_disconnect();
}
inline ::Buttplug::ClientMessage_Disconnect* ClientMessage_FFIMessage::unsafe_arena_release_disconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ClientMessage.FFIMessage.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_Disconnect* temp = _impl_.msg_.disconnect_;
    _impl_.msg_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage_FFIMessage::unsafe_arena_set_allocated_disconnect(::Buttplug::ClientMessage_Disconnect* disconnect) {
  clear_msg();
  if (disconnect) {
    set_has_disconnect();
    _impl_.msg_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ClientMessage.FFIMessage.disconnect)
}
inline ::Buttplug::ClientMessage_Disconnect* ClientMessage_FFIMessage::_internal_mutable_disconnect() {
  if (!_internal_has_disconnect()) {
    clear_msg();
    set_has_disconnect();
    _impl_.msg_.disconnect_ = CreateMaybeMessage< ::Buttplug::ClientMessage_Disconnect >(GetArenaForAllocation());
  }
  return _impl_.msg_.disconnect_;
}
inline ::Buttplug::ClientMessage_Disconnect* ClientMessage_FFIMessage::mutable_disconnect() {
  ::Buttplug::ClientMessage_Disconnect* _msg = _internal_mutable_disconnect();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.FFIMessage.disconnect)
  return _msg;
}

// .Buttplug.ClientMessage.Ping ping = 7;
inline bool ClientMessage_FFIMessage::_internal_has_ping() const {
  return msg_case() == kPing;
}
inline bool ClientMessage_FFIMessage::has_ping() const {
  return _internal_has_ping();
}
inline void ClientMessage_FFIMessage::set_has_ping() {
  _impl_._oneof_case_[0] = kPing;
}
inline void ClientMessage_FFIMessage::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.ping_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ClientMessage_Ping* ClientMessage_FFIMessage::release_ping() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.FFIMessage.ping)
  if (_internal_has_ping()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_Ping* temp = _impl_.msg_.ping_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ClientMessage_Ping& ClientMessage_FFIMessage::_internal_ping() const {
  return _internal_has_ping()
      ? *_impl_.msg_.ping_
      : reinterpret_cast< ::Buttplug::ClientMessage_Ping&>(::Buttplug::_ClientMessage_Ping_default_instance_);
}
inline const ::Buttplug::ClientMessage_Ping& ClientMessage_FFIMessage::ping() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.FFIMessage.ping)
  return _internal_ping();
}
inline ::Buttplug::ClientMessage_Ping* ClientMessage_FFIMessage::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ClientMessage.FFIMessage.ping)
  if (_internal_has_ping()) {
    clear_has_msg();
    ::Buttplug::ClientMessage_Ping* temp = _impl_.msg_.ping_;
    _impl_.msg_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage_FFIMessage::unsafe_arena_set_allocated_ping(::Buttplug::ClientMessage_Ping* ping) {
  clear_msg();
  if (ping) {
    set_has_ping();
    _impl_.msg_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ClientMessage.FFIMessage.ping)
}
inline ::Buttplug::ClientMessage_Ping* ClientMessage_FFIMessage::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_msg();
    set_has_ping();
    _impl_.msg_.ping_ = CreateMaybeMessage< ::Buttplug::ClientMessage_Ping >(GetArenaForAllocation());
  }
  return _impl_.msg_.ping_;
}
inline ::Buttplug::ClientMessage_Ping* ClientMessage_FFIMessage::mutable_ping() {
  ::Buttplug::ClientMessage_Ping* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.FFIMessage.ping)
  return _msg;
}

inline bool ClientMessage_FFIMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ClientMessage_FFIMessage::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline ClientMessage_FFIMessage::MsgCase ClientMessage_FFIMessage::msg_case() const {
  return ClientMessage_FFIMessage::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ClientMessage

// uint32 id = 1;
inline void ClientMessage::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t ClientMessage::_internal_id() const {
  return _impl_.id_;
}
inline ::uint32_t ClientMessage::id() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.id)
  return _internal_id();
}
inline void ClientMessage::_internal_set_id(::uint32_t value) {

  _impl_.id_ = value;
}
inline void ClientMessage::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Buttplug.ClientMessage.id)
}

// .Buttplug.ClientMessage.FFIMessage message = 2;
inline bool ClientMessage::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool ClientMessage::has_message() const {
  return _internal_has_message();
}
inline void ClientMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
}
inline const ::Buttplug::ClientMessage_FFIMessage& ClientMessage::_internal_message() const {
  const ::Buttplug::ClientMessage_FFIMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::Buttplug::ClientMessage_FFIMessage&>(
      ::Buttplug::_ClientMessage_FFIMessage_default_instance_);
}
inline const ::Buttplug::ClientMessage_FFIMessage& ClientMessage::message() const {
  // @@protoc_insertion_point(field_get:Buttplug.ClientMessage.message)
  return _internal_message();
}
inline void ClientMessage::unsafe_arena_set_allocated_message(
    ::Buttplug::ClientMessage_FFIMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ClientMessage.message)
}
inline ::Buttplug::ClientMessage_FFIMessage* ClientMessage::release_message() {
  
  ::Buttplug::ClientMessage_FFIMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Buttplug::ClientMessage_FFIMessage* ClientMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:Buttplug.ClientMessage.message)
  
  ::Buttplug::ClientMessage_FFIMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::Buttplug::ClientMessage_FFIMessage* ClientMessage::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::Buttplug::ClientMessage_FFIMessage>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::Buttplug::ClientMessage_FFIMessage* ClientMessage::mutable_message() {
  ::Buttplug::ClientMessage_FFIMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Buttplug.ClientMessage.message)
  return _msg;
}
inline void ClientMessage::set_allocated_message(::Buttplug::ClientMessage_FFIMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }

  } else {

  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.message)
}

// -------------------------------------------------------------------

// DeviceMessage_VibrateComponent

// uint32 index = 1;
inline void DeviceMessage_VibrateComponent::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t DeviceMessage_VibrateComponent::_internal_index() const {
  return _impl_.index_;
}
inline ::uint32_t DeviceMessage_VibrateComponent::index() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.VibrateComponent.index)
  return _internal_index();
}
inline void DeviceMessage_VibrateComponent::_internal_set_index(::uint32_t value) {

  _impl_.index_ = value;
}
inline void DeviceMessage_VibrateComponent::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.VibrateComponent.index)
}

// double speed = 2;
inline void DeviceMessage_VibrateComponent::clear_speed() {
  _impl_.speed_ = 0;
}
inline double DeviceMessage_VibrateComponent::_internal_speed() const {
  return _impl_.speed_;
}
inline double DeviceMessage_VibrateComponent::speed() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.VibrateComponent.speed)
  return _internal_speed();
}
inline void DeviceMessage_VibrateComponent::_internal_set_speed(double value) {

  _impl_.speed_ = value;
}
inline void DeviceMessage_VibrateComponent::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.VibrateComponent.speed)
}

// -------------------------------------------------------------------

// DeviceMessage_VibrateCmd

// repeated .Buttplug.DeviceMessage.VibrateComponent speeds = 1;
inline int DeviceMessage_VibrateCmd::_internal_speeds_size() const {
  return _impl_.speeds_.size();
}
inline int DeviceMessage_VibrateCmd::speeds_size() const {
  return _internal_speeds_size();
}
inline void DeviceMessage_VibrateCmd::clear_speeds() {
  _impl_.speeds_.Clear();
}
inline ::Buttplug::DeviceMessage_VibrateComponent* DeviceMessage_VibrateCmd::mutable_speeds(int index) {
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.VibrateCmd.speeds)
  return _impl_.speeds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_VibrateComponent >*
DeviceMessage_VibrateCmd::mutable_speeds() {
  // @@protoc_insertion_point(field_mutable_list:Buttplug.DeviceMessage.VibrateCmd.speeds)
  return &_impl_.speeds_;
}
inline const ::Buttplug::DeviceMessage_VibrateComponent& DeviceMessage_VibrateCmd::_internal_speeds(int index) const {
  return _impl_.speeds_.Get(index);
}
inline const ::Buttplug::DeviceMessage_VibrateComponent& DeviceMessage_VibrateCmd::speeds(int index) const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.VibrateCmd.speeds)
  return _internal_speeds(index);
}
inline ::Buttplug::DeviceMessage_VibrateComponent* DeviceMessage_VibrateCmd::_internal_add_speeds() {
  return _impl_.speeds_.Add();
}
inline ::Buttplug::DeviceMessage_VibrateComponent* DeviceMessage_VibrateCmd::add_speeds() {
  ::Buttplug::DeviceMessage_VibrateComponent* _add = _internal_add_speeds();
  // @@protoc_insertion_point(field_add:Buttplug.DeviceMessage.VibrateCmd.speeds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_VibrateComponent >&
DeviceMessage_VibrateCmd::speeds() const {
  // @@protoc_insertion_point(field_list:Buttplug.DeviceMessage.VibrateCmd.speeds)
  return _impl_.speeds_;
}

// -------------------------------------------------------------------

// DeviceMessage_RotateComponent

// uint32 index = 1;
inline void DeviceMessage_RotateComponent::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t DeviceMessage_RotateComponent::_internal_index() const {
  return _impl_.index_;
}
inline ::uint32_t DeviceMessage_RotateComponent::index() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RotateComponent.index)
  return _internal_index();
}
inline void DeviceMessage_RotateComponent::_internal_set_index(::uint32_t value) {

  _impl_.index_ = value;
}
inline void DeviceMessage_RotateComponent::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RotateComponent.index)
}

// double speed = 2;
inline void DeviceMessage_RotateComponent::clear_speed() {
  _impl_.speed_ = 0;
}
inline double DeviceMessage_RotateComponent::_internal_speed() const {
  return _impl_.speed_;
}
inline double DeviceMessage_RotateComponent::speed() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RotateComponent.speed)
  return _internal_speed();
}
inline void DeviceMessage_RotateComponent::_internal_set_speed(double value) {

  _impl_.speed_ = value;
}
inline void DeviceMessage_RotateComponent::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RotateComponent.speed)
}

// bool clockwise = 3;
inline void DeviceMessage_RotateComponent::clear_clockwise() {
  _impl_.clockwise_ = false;
}
inline bool DeviceMessage_RotateComponent::_internal_clockwise() const {
  return _impl_.clockwise_;
}
inline bool DeviceMessage_RotateComponent::clockwise() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RotateComponent.clockwise)
  return _internal_clockwise();
}
inline void DeviceMessage_RotateComponent::_internal_set_clockwise(bool value) {

  _impl_.clockwise_ = value;
}
inline void DeviceMessage_RotateComponent::set_clockwise(bool value) {
  _internal_set_clockwise(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RotateComponent.clockwise)
}

// -------------------------------------------------------------------

// DeviceMessage_RotateCmd

// repeated .Buttplug.DeviceMessage.RotateComponent rotations = 1;
inline int DeviceMessage_RotateCmd::_internal_rotations_size() const {
  return _impl_.rotations_.size();
}
inline int DeviceMessage_RotateCmd::rotations_size() const {
  return _internal_rotations_size();
}
inline void DeviceMessage_RotateCmd::clear_rotations() {
  _impl_.rotations_.Clear();
}
inline ::Buttplug::DeviceMessage_RotateComponent* DeviceMessage_RotateCmd::mutable_rotations(int index) {
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.RotateCmd.rotations)
  return _impl_.rotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_RotateComponent >*
DeviceMessage_RotateCmd::mutable_rotations() {
  // @@protoc_insertion_point(field_mutable_list:Buttplug.DeviceMessage.RotateCmd.rotations)
  return &_impl_.rotations_;
}
inline const ::Buttplug::DeviceMessage_RotateComponent& DeviceMessage_RotateCmd::_internal_rotations(int index) const {
  return _impl_.rotations_.Get(index);
}
inline const ::Buttplug::DeviceMessage_RotateComponent& DeviceMessage_RotateCmd::rotations(int index) const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RotateCmd.rotations)
  return _internal_rotations(index);
}
inline ::Buttplug::DeviceMessage_RotateComponent* DeviceMessage_RotateCmd::_internal_add_rotations() {
  return _impl_.rotations_.Add();
}
inline ::Buttplug::DeviceMessage_RotateComponent* DeviceMessage_RotateCmd::add_rotations() {
  ::Buttplug::DeviceMessage_RotateComponent* _add = _internal_add_rotations();
  // @@protoc_insertion_point(field_add:Buttplug.DeviceMessage.RotateCmd.rotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_RotateComponent >&
DeviceMessage_RotateCmd::rotations() const {
  // @@protoc_insertion_point(field_list:Buttplug.DeviceMessage.RotateCmd.rotations)
  return _impl_.rotations_;
}

// -------------------------------------------------------------------

// DeviceMessage_LinearComponent

// uint32 index = 1;
inline void DeviceMessage_LinearComponent::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t DeviceMessage_LinearComponent::_internal_index() const {
  return _impl_.index_;
}
inline ::uint32_t DeviceMessage_LinearComponent::index() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.LinearComponent.index)
  return _internal_index();
}
inline void DeviceMessage_LinearComponent::_internal_set_index(::uint32_t value) {

  _impl_.index_ = value;
}
inline void DeviceMessage_LinearComponent::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.LinearComponent.index)
}

// uint32 duration = 2;
inline void DeviceMessage_LinearComponent::clear_duration() {
  _impl_.duration_ = 0u;
}
inline ::uint32_t DeviceMessage_LinearComponent::_internal_duration() const {
  return _impl_.duration_;
}
inline ::uint32_t DeviceMessage_LinearComponent::duration() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.LinearComponent.duration)
  return _internal_duration();
}
inline void DeviceMessage_LinearComponent::_internal_set_duration(::uint32_t value) {

  _impl_.duration_ = value;
}
inline void DeviceMessage_LinearComponent::set_duration(::uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.LinearComponent.duration)
}

// double position = 3;
inline void DeviceMessage_LinearComponent::clear_position() {
  _impl_.position_ = 0;
}
inline double DeviceMessage_LinearComponent::_internal_position() const {
  return _impl_.position_;
}
inline double DeviceMessage_LinearComponent::position() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.LinearComponent.position)
  return _internal_position();
}
inline void DeviceMessage_LinearComponent::_internal_set_position(double value) {

  _impl_.position_ = value;
}
inline void DeviceMessage_LinearComponent::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.LinearComponent.position)
}

// -------------------------------------------------------------------

// DeviceMessage_LinearCmd

// repeated .Buttplug.DeviceMessage.LinearComponent movements = 1;
inline int DeviceMessage_LinearCmd::_internal_movements_size() const {
  return _impl_.movements_.size();
}
inline int DeviceMessage_LinearCmd::movements_size() const {
  return _internal_movements_size();
}
inline void DeviceMessage_LinearCmd::clear_movements() {
  _impl_.movements_.Clear();
}
inline ::Buttplug::DeviceMessage_LinearComponent* DeviceMessage_LinearCmd::mutable_movements(int index) {
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.LinearCmd.movements)
  return _impl_.movements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_LinearComponent >*
DeviceMessage_LinearCmd::mutable_movements() {
  // @@protoc_insertion_point(field_mutable_list:Buttplug.DeviceMessage.LinearCmd.movements)
  return &_impl_.movements_;
}
inline const ::Buttplug::DeviceMessage_LinearComponent& DeviceMessage_LinearCmd::_internal_movements(int index) const {
  return _impl_.movements_.Get(index);
}
inline const ::Buttplug::DeviceMessage_LinearComponent& DeviceMessage_LinearCmd::movements(int index) const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.LinearCmd.movements)
  return _internal_movements(index);
}
inline ::Buttplug::DeviceMessage_LinearComponent* DeviceMessage_LinearCmd::_internal_add_movements() {
  return _impl_.movements_.Add();
}
inline ::Buttplug::DeviceMessage_LinearComponent* DeviceMessage_LinearCmd::add_movements() {
  ::Buttplug::DeviceMessage_LinearComponent* _add = _internal_add_movements();
  // @@protoc_insertion_point(field_add:Buttplug.DeviceMessage.LinearCmd.movements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::DeviceMessage_LinearComponent >&
DeviceMessage_LinearCmd::movements() const {
  // @@protoc_insertion_point(field_list:Buttplug.DeviceMessage.LinearCmd.movements)
  return _impl_.movements_;
}

// -------------------------------------------------------------------

// DeviceMessage_StopDeviceCmd

// -------------------------------------------------------------------

// DeviceMessage_RawReadCmd

// .Buttplug.Endpoint endpoint = 1;
inline void DeviceMessage_RawReadCmd::clear_endpoint() {
  _impl_.endpoint_ = 0;
}
inline ::Buttplug::Endpoint DeviceMessage_RawReadCmd::_internal_endpoint() const {
  return static_cast< ::Buttplug::Endpoint >(_impl_.endpoint_);
}
inline ::Buttplug::Endpoint DeviceMessage_RawReadCmd::endpoint() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RawReadCmd.endpoint)
  return _internal_endpoint();
}
inline void DeviceMessage_RawReadCmd::_internal_set_endpoint(::Buttplug::Endpoint value) {
  
  _impl_.endpoint_ = value;
}
inline void DeviceMessage_RawReadCmd::set_endpoint(::Buttplug::Endpoint value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RawReadCmd.endpoint)
}

// bytes data = 2;
inline void DeviceMessage_RawReadCmd::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& DeviceMessage_RawReadCmd::data() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RawReadCmd.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceMessage_RawReadCmd::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RawReadCmd.data)
}
inline std::string* DeviceMessage_RawReadCmd::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.RawReadCmd.data)
  return _s;
}
inline const std::string& DeviceMessage_RawReadCmd::_internal_data() const {
  return _impl_.data_.Get();
}
inline void DeviceMessage_RawReadCmd::_internal_set_data(const std::string& value) {

  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceMessage_RawReadCmd::_internal_mutable_data() {

  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceMessage_RawReadCmd::release_data() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.RawReadCmd.data)
  return _impl_.data_.Release();
}
inline void DeviceMessage_RawReadCmd::set_allocated_data(std::string* data) {
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.RawReadCmd.data)
}

// uint32 expected_length = 3;
inline void DeviceMessage_RawReadCmd::clear_expected_length() {
  _impl_.expected_length_ = 0u;
}
inline ::uint32_t DeviceMessage_RawReadCmd::_internal_expected_length() const {
  return _impl_.expected_length_;
}
inline ::uint32_t DeviceMessage_RawReadCmd::expected_length() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RawReadCmd.expected_length)
  return _internal_expected_length();
}
inline void DeviceMessage_RawReadCmd::_internal_set_expected_length(::uint32_t value) {

  _impl_.expected_length_ = value;
}
inline void DeviceMessage_RawReadCmd::set_expected_length(::uint32_t value) {
  _internal_set_expected_length(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RawReadCmd.expected_length)
}

// uint32 timeout = 4;
inline void DeviceMessage_RawReadCmd::clear_timeout() {
  _impl_.timeout_ = 0u;
}
inline ::uint32_t DeviceMessage_RawReadCmd::_internal_timeout() const {
  return _impl_.timeout_;
}
inline ::uint32_t DeviceMessage_RawReadCmd::timeout() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RawReadCmd.timeout)
  return _internal_timeout();
}
inline void DeviceMessage_RawReadCmd::_internal_set_timeout(::uint32_t value) {

  _impl_.timeout_ = value;
}
inline void DeviceMessage_RawReadCmd::set_timeout(::uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RawReadCmd.timeout)
}

// -------------------------------------------------------------------

// DeviceMessage_RawWriteCmd

// .Buttplug.Endpoint endpoint = 1;
inline void DeviceMessage_RawWriteCmd::clear_endpoint() {
  _impl_.endpoint_ = 0;
}
inline ::Buttplug::Endpoint DeviceMessage_RawWriteCmd::_internal_endpoint() const {
  return static_cast< ::Buttplug::Endpoint >(_impl_.endpoint_);
}
inline ::Buttplug::Endpoint DeviceMessage_RawWriteCmd::endpoint() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RawWriteCmd.endpoint)
  return _internal_endpoint();
}
inline void DeviceMessage_RawWriteCmd::_internal_set_endpoint(::Buttplug::Endpoint value) {
  
  _impl_.endpoint_ = value;
}
inline void DeviceMessage_RawWriteCmd::set_endpoint(::Buttplug::Endpoint value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RawWriteCmd.endpoint)
}

// bytes data = 2;
inline void DeviceMessage_RawWriteCmd::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& DeviceMessage_RawWriteCmd::data() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RawWriteCmd.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceMessage_RawWriteCmd::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RawWriteCmd.data)
}
inline std::string* DeviceMessage_RawWriteCmd::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.RawWriteCmd.data)
  return _s;
}
inline const std::string& DeviceMessage_RawWriteCmd::_internal_data() const {
  return _impl_.data_.Get();
}
inline void DeviceMessage_RawWriteCmd::_internal_set_data(const std::string& value) {

  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceMessage_RawWriteCmd::_internal_mutable_data() {

  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceMessage_RawWriteCmd::release_data() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.RawWriteCmd.data)
  return _impl_.data_.Release();
}
inline void DeviceMessage_RawWriteCmd::set_allocated_data(std::string* data) {
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.RawWriteCmd.data)
}

// bool write_with_response = 3;
inline void DeviceMessage_RawWriteCmd::clear_write_with_response() {
  _impl_.write_with_response_ = false;
}
inline bool DeviceMessage_RawWriteCmd::_internal_write_with_response() const {
  return _impl_.write_with_response_;
}
inline bool DeviceMessage_RawWriteCmd::write_with_response() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RawWriteCmd.write_with_response)
  return _internal_write_with_response();
}
inline void DeviceMessage_RawWriteCmd::_internal_set_write_with_response(bool value) {

  _impl_.write_with_response_ = value;
}
inline void DeviceMessage_RawWriteCmd::set_write_with_response(bool value) {
  _internal_set_write_with_response(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RawWriteCmd.write_with_response)
}

// -------------------------------------------------------------------

// DeviceMessage_RawSubscribeCmd

// .Buttplug.Endpoint endpoint = 1;
inline void DeviceMessage_RawSubscribeCmd::clear_endpoint() {
  _impl_.endpoint_ = 0;
}
inline ::Buttplug::Endpoint DeviceMessage_RawSubscribeCmd::_internal_endpoint() const {
  return static_cast< ::Buttplug::Endpoint >(_impl_.endpoint_);
}
inline ::Buttplug::Endpoint DeviceMessage_RawSubscribeCmd::endpoint() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RawSubscribeCmd.endpoint)
  return _internal_endpoint();
}
inline void DeviceMessage_RawSubscribeCmd::_internal_set_endpoint(::Buttplug::Endpoint value) {
  
  _impl_.endpoint_ = value;
}
inline void DeviceMessage_RawSubscribeCmd::set_endpoint(::Buttplug::Endpoint value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RawSubscribeCmd.endpoint)
}

// -------------------------------------------------------------------

// DeviceMessage_RawUnsubscribeCmd

// .Buttplug.Endpoint endpoint = 1;
inline void DeviceMessage_RawUnsubscribeCmd::clear_endpoint() {
  _impl_.endpoint_ = 0;
}
inline ::Buttplug::Endpoint DeviceMessage_RawUnsubscribeCmd::_internal_endpoint() const {
  return static_cast< ::Buttplug::Endpoint >(_impl_.endpoint_);
}
inline ::Buttplug::Endpoint DeviceMessage_RawUnsubscribeCmd::endpoint() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.RawUnsubscribeCmd.endpoint)
  return _internal_endpoint();
}
inline void DeviceMessage_RawUnsubscribeCmd::_internal_set_endpoint(::Buttplug::Endpoint value) {
  
  _impl_.endpoint_ = value;
}
inline void DeviceMessage_RawUnsubscribeCmd::set_endpoint(::Buttplug::Endpoint value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.RawUnsubscribeCmd.endpoint)
}

// -------------------------------------------------------------------

// DeviceMessage_BatteryLevelCmd

// -------------------------------------------------------------------

// DeviceMessage_RSSILevelCmd

// -------------------------------------------------------------------

// DeviceMessage_FFIMessage

// .Buttplug.DeviceMessage.VibrateCmd vibrate_cmd = 1;
inline bool DeviceMessage_FFIMessage::_internal_has_vibrate_cmd() const {
  return msg_case() == kVibrateCmd;
}
inline bool DeviceMessage_FFIMessage::has_vibrate_cmd() const {
  return _internal_has_vibrate_cmd();
}
inline void DeviceMessage_FFIMessage::set_has_vibrate_cmd() {
  _impl_._oneof_case_[0] = kVibrateCmd;
}
inline void DeviceMessage_FFIMessage::clear_vibrate_cmd() {
  if (_internal_has_vibrate_cmd()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.vibrate_cmd_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceMessage_VibrateCmd* DeviceMessage_FFIMessage::release_vibrate_cmd() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.FFIMessage.vibrate_cmd)
  if (_internal_has_vibrate_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_VibrateCmd* temp = _impl_.msg_.vibrate_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.vibrate_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceMessage_VibrateCmd& DeviceMessage_FFIMessage::_internal_vibrate_cmd() const {
  return _internal_has_vibrate_cmd()
      ? *_impl_.msg_.vibrate_cmd_
      : reinterpret_cast< ::Buttplug::DeviceMessage_VibrateCmd&>(::Buttplug::_DeviceMessage_VibrateCmd_default_instance_);
}
inline const ::Buttplug::DeviceMessage_VibrateCmd& DeviceMessage_FFIMessage::vibrate_cmd() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.FFIMessage.vibrate_cmd)
  return _internal_vibrate_cmd();
}
inline ::Buttplug::DeviceMessage_VibrateCmd* DeviceMessage_FFIMessage::unsafe_arena_release_vibrate_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceMessage.FFIMessage.vibrate_cmd)
  if (_internal_has_vibrate_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_VibrateCmd* temp = _impl_.msg_.vibrate_cmd_;
    _impl_.msg_.vibrate_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceMessage_FFIMessage::unsafe_arena_set_allocated_vibrate_cmd(::Buttplug::DeviceMessage_VibrateCmd* vibrate_cmd) {
  clear_msg();
  if (vibrate_cmd) {
    set_has_vibrate_cmd();
    _impl_.msg_.vibrate_cmd_ = vibrate_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.FFIMessage.vibrate_cmd)
}
inline ::Buttplug::DeviceMessage_VibrateCmd* DeviceMessage_FFIMessage::_internal_mutable_vibrate_cmd() {
  if (!_internal_has_vibrate_cmd()) {
    clear_msg();
    set_has_vibrate_cmd();
    _impl_.msg_.vibrate_cmd_ = CreateMaybeMessage< ::Buttplug::DeviceMessage_VibrateCmd >(GetArenaForAllocation());
  }
  return _impl_.msg_.vibrate_cmd_;
}
inline ::Buttplug::DeviceMessage_VibrateCmd* DeviceMessage_FFIMessage::mutable_vibrate_cmd() {
  ::Buttplug::DeviceMessage_VibrateCmd* _msg = _internal_mutable_vibrate_cmd();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.FFIMessage.vibrate_cmd)
  return _msg;
}

// .Buttplug.DeviceMessage.RotateCmd rotate_cmd = 2;
inline bool DeviceMessage_FFIMessage::_internal_has_rotate_cmd() const {
  return msg_case() == kRotateCmd;
}
inline bool DeviceMessage_FFIMessage::has_rotate_cmd() const {
  return _internal_has_rotate_cmd();
}
inline void DeviceMessage_FFIMessage::set_has_rotate_cmd() {
  _impl_._oneof_case_[0] = kRotateCmd;
}
inline void DeviceMessage_FFIMessage::clear_rotate_cmd() {
  if (_internal_has_rotate_cmd()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.rotate_cmd_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceMessage_RotateCmd* DeviceMessage_FFIMessage::release_rotate_cmd() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.FFIMessage.rotate_cmd)
  if (_internal_has_rotate_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RotateCmd* temp = _impl_.msg_.rotate_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.rotate_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceMessage_RotateCmd& DeviceMessage_FFIMessage::_internal_rotate_cmd() const {
  return _internal_has_rotate_cmd()
      ? *_impl_.msg_.rotate_cmd_
      : reinterpret_cast< ::Buttplug::DeviceMessage_RotateCmd&>(::Buttplug::_DeviceMessage_RotateCmd_default_instance_);
}
inline const ::Buttplug::DeviceMessage_RotateCmd& DeviceMessage_FFIMessage::rotate_cmd() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.FFIMessage.rotate_cmd)
  return _internal_rotate_cmd();
}
inline ::Buttplug::DeviceMessage_RotateCmd* DeviceMessage_FFIMessage::unsafe_arena_release_rotate_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceMessage.FFIMessage.rotate_cmd)
  if (_internal_has_rotate_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RotateCmd* temp = _impl_.msg_.rotate_cmd_;
    _impl_.msg_.rotate_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceMessage_FFIMessage::unsafe_arena_set_allocated_rotate_cmd(::Buttplug::DeviceMessage_RotateCmd* rotate_cmd) {
  clear_msg();
  if (rotate_cmd) {
    set_has_rotate_cmd();
    _impl_.msg_.rotate_cmd_ = rotate_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.FFIMessage.rotate_cmd)
}
inline ::Buttplug::DeviceMessage_RotateCmd* DeviceMessage_FFIMessage::_internal_mutable_rotate_cmd() {
  if (!_internal_has_rotate_cmd()) {
    clear_msg();
    set_has_rotate_cmd();
    _impl_.msg_.rotate_cmd_ = CreateMaybeMessage< ::Buttplug::DeviceMessage_RotateCmd >(GetArenaForAllocation());
  }
  return _impl_.msg_.rotate_cmd_;
}
inline ::Buttplug::DeviceMessage_RotateCmd* DeviceMessage_FFIMessage::mutable_rotate_cmd() {
  ::Buttplug::DeviceMessage_RotateCmd* _msg = _internal_mutable_rotate_cmd();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.FFIMessage.rotate_cmd)
  return _msg;
}

// .Buttplug.DeviceMessage.LinearCmd linear_cmd = 3;
inline bool DeviceMessage_FFIMessage::_internal_has_linear_cmd() const {
  return msg_case() == kLinearCmd;
}
inline bool DeviceMessage_FFIMessage::has_linear_cmd() const {
  return _internal_has_linear_cmd();
}
inline void DeviceMessage_FFIMessage::set_has_linear_cmd() {
  _impl_._oneof_case_[0] = kLinearCmd;
}
inline void DeviceMessage_FFIMessage::clear_linear_cmd() {
  if (_internal_has_linear_cmd()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.linear_cmd_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceMessage_LinearCmd* DeviceMessage_FFIMessage::release_linear_cmd() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.FFIMessage.linear_cmd)
  if (_internal_has_linear_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_LinearCmd* temp = _impl_.msg_.linear_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.linear_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceMessage_LinearCmd& DeviceMessage_FFIMessage::_internal_linear_cmd() const {
  return _internal_has_linear_cmd()
      ? *_impl_.msg_.linear_cmd_
      : reinterpret_cast< ::Buttplug::DeviceMessage_LinearCmd&>(::Buttplug::_DeviceMessage_LinearCmd_default_instance_);
}
inline const ::Buttplug::DeviceMessage_LinearCmd& DeviceMessage_FFIMessage::linear_cmd() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.FFIMessage.linear_cmd)
  return _internal_linear_cmd();
}
inline ::Buttplug::DeviceMessage_LinearCmd* DeviceMessage_FFIMessage::unsafe_arena_release_linear_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceMessage.FFIMessage.linear_cmd)
  if (_internal_has_linear_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_LinearCmd* temp = _impl_.msg_.linear_cmd_;
    _impl_.msg_.linear_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceMessage_FFIMessage::unsafe_arena_set_allocated_linear_cmd(::Buttplug::DeviceMessage_LinearCmd* linear_cmd) {
  clear_msg();
  if (linear_cmd) {
    set_has_linear_cmd();
    _impl_.msg_.linear_cmd_ = linear_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.FFIMessage.linear_cmd)
}
inline ::Buttplug::DeviceMessage_LinearCmd* DeviceMessage_FFIMessage::_internal_mutable_linear_cmd() {
  if (!_internal_has_linear_cmd()) {
    clear_msg();
    set_has_linear_cmd();
    _impl_.msg_.linear_cmd_ = CreateMaybeMessage< ::Buttplug::DeviceMessage_LinearCmd >(GetArenaForAllocation());
  }
  return _impl_.msg_.linear_cmd_;
}
inline ::Buttplug::DeviceMessage_LinearCmd* DeviceMessage_FFIMessage::mutable_linear_cmd() {
  ::Buttplug::DeviceMessage_LinearCmd* _msg = _internal_mutable_linear_cmd();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.FFIMessage.linear_cmd)
  return _msg;
}

// .Buttplug.DeviceMessage.StopDeviceCmd stop_device_cmd = 4;
inline bool DeviceMessage_FFIMessage::_internal_has_stop_device_cmd() const {
  return msg_case() == kStopDeviceCmd;
}
inline bool DeviceMessage_FFIMessage::has_stop_device_cmd() const {
  return _internal_has_stop_device_cmd();
}
inline void DeviceMessage_FFIMessage::set_has_stop_device_cmd() {
  _impl_._oneof_case_[0] = kStopDeviceCmd;
}
inline void DeviceMessage_FFIMessage::clear_stop_device_cmd() {
  if (_internal_has_stop_device_cmd()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.stop_device_cmd_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceMessage_StopDeviceCmd* DeviceMessage_FFIMessage::release_stop_device_cmd() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.FFIMessage.stop_device_cmd)
  if (_internal_has_stop_device_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_StopDeviceCmd* temp = _impl_.msg_.stop_device_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.stop_device_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceMessage_StopDeviceCmd& DeviceMessage_FFIMessage::_internal_stop_device_cmd() const {
  return _internal_has_stop_device_cmd()
      ? *_impl_.msg_.stop_device_cmd_
      : reinterpret_cast< ::Buttplug::DeviceMessage_StopDeviceCmd&>(::Buttplug::_DeviceMessage_StopDeviceCmd_default_instance_);
}
inline const ::Buttplug::DeviceMessage_StopDeviceCmd& DeviceMessage_FFIMessage::stop_device_cmd() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.FFIMessage.stop_device_cmd)
  return _internal_stop_device_cmd();
}
inline ::Buttplug::DeviceMessage_StopDeviceCmd* DeviceMessage_FFIMessage::unsafe_arena_release_stop_device_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceMessage.FFIMessage.stop_device_cmd)
  if (_internal_has_stop_device_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_StopDeviceCmd* temp = _impl_.msg_.stop_device_cmd_;
    _impl_.msg_.stop_device_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceMessage_FFIMessage::unsafe_arena_set_allocated_stop_device_cmd(::Buttplug::DeviceMessage_StopDeviceCmd* stop_device_cmd) {
  clear_msg();
  if (stop_device_cmd) {
    set_has_stop_device_cmd();
    _impl_.msg_.stop_device_cmd_ = stop_device_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.FFIMessage.stop_device_cmd)
}
inline ::Buttplug::DeviceMessage_StopDeviceCmd* DeviceMessage_FFIMessage::_internal_mutable_stop_device_cmd() {
  if (!_internal_has_stop_device_cmd()) {
    clear_msg();
    set_has_stop_device_cmd();
    _impl_.msg_.stop_device_cmd_ = CreateMaybeMessage< ::Buttplug::DeviceMessage_StopDeviceCmd >(GetArenaForAllocation());
  }
  return _impl_.msg_.stop_device_cmd_;
}
inline ::Buttplug::DeviceMessage_StopDeviceCmd* DeviceMessage_FFIMessage::mutable_stop_device_cmd() {
  ::Buttplug::DeviceMessage_StopDeviceCmd* _msg = _internal_mutable_stop_device_cmd();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.FFIMessage.stop_device_cmd)
  return _msg;
}

// .Buttplug.DeviceMessage.RawReadCmd raw_read_cmd = 5;
inline bool DeviceMessage_FFIMessage::_internal_has_raw_read_cmd() const {
  return msg_case() == kRawReadCmd;
}
inline bool DeviceMessage_FFIMessage::has_raw_read_cmd() const {
  return _internal_has_raw_read_cmd();
}
inline void DeviceMessage_FFIMessage::set_has_raw_read_cmd() {
  _impl_._oneof_case_[0] = kRawReadCmd;
}
inline void DeviceMessage_FFIMessage::clear_raw_read_cmd() {
  if (_internal_has_raw_read_cmd()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.raw_read_cmd_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceMessage_RawReadCmd* DeviceMessage_FFIMessage::release_raw_read_cmd() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.FFIMessage.raw_read_cmd)
  if (_internal_has_raw_read_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RawReadCmd* temp = _impl_.msg_.raw_read_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.raw_read_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceMessage_RawReadCmd& DeviceMessage_FFIMessage::_internal_raw_read_cmd() const {
  return _internal_has_raw_read_cmd()
      ? *_impl_.msg_.raw_read_cmd_
      : reinterpret_cast< ::Buttplug::DeviceMessage_RawReadCmd&>(::Buttplug::_DeviceMessage_RawReadCmd_default_instance_);
}
inline const ::Buttplug::DeviceMessage_RawReadCmd& DeviceMessage_FFIMessage::raw_read_cmd() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.FFIMessage.raw_read_cmd)
  return _internal_raw_read_cmd();
}
inline ::Buttplug::DeviceMessage_RawReadCmd* DeviceMessage_FFIMessage::unsafe_arena_release_raw_read_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceMessage.FFIMessage.raw_read_cmd)
  if (_internal_has_raw_read_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RawReadCmd* temp = _impl_.msg_.raw_read_cmd_;
    _impl_.msg_.raw_read_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceMessage_FFIMessage::unsafe_arena_set_allocated_raw_read_cmd(::Buttplug::DeviceMessage_RawReadCmd* raw_read_cmd) {
  clear_msg();
  if (raw_read_cmd) {
    set_has_raw_read_cmd();
    _impl_.msg_.raw_read_cmd_ = raw_read_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.FFIMessage.raw_read_cmd)
}
inline ::Buttplug::DeviceMessage_RawReadCmd* DeviceMessage_FFIMessage::_internal_mutable_raw_read_cmd() {
  if (!_internal_has_raw_read_cmd()) {
    clear_msg();
    set_has_raw_read_cmd();
    _impl_.msg_.raw_read_cmd_ = CreateMaybeMessage< ::Buttplug::DeviceMessage_RawReadCmd >(GetArenaForAllocation());
  }
  return _impl_.msg_.raw_read_cmd_;
}
inline ::Buttplug::DeviceMessage_RawReadCmd* DeviceMessage_FFIMessage::mutable_raw_read_cmd() {
  ::Buttplug::DeviceMessage_RawReadCmd* _msg = _internal_mutable_raw_read_cmd();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.FFIMessage.raw_read_cmd)
  return _msg;
}

// .Buttplug.DeviceMessage.RawWriteCmd raw_write_cmd = 6;
inline bool DeviceMessage_FFIMessage::_internal_has_raw_write_cmd() const {
  return msg_case() == kRawWriteCmd;
}
inline bool DeviceMessage_FFIMessage::has_raw_write_cmd() const {
  return _internal_has_raw_write_cmd();
}
inline void DeviceMessage_FFIMessage::set_has_raw_write_cmd() {
  _impl_._oneof_case_[0] = kRawWriteCmd;
}
inline void DeviceMessage_FFIMessage::clear_raw_write_cmd() {
  if (_internal_has_raw_write_cmd()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.raw_write_cmd_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceMessage_RawWriteCmd* DeviceMessage_FFIMessage::release_raw_write_cmd() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.FFIMessage.raw_write_cmd)
  if (_internal_has_raw_write_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RawWriteCmd* temp = _impl_.msg_.raw_write_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.raw_write_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceMessage_RawWriteCmd& DeviceMessage_FFIMessage::_internal_raw_write_cmd() const {
  return _internal_has_raw_write_cmd()
      ? *_impl_.msg_.raw_write_cmd_
      : reinterpret_cast< ::Buttplug::DeviceMessage_RawWriteCmd&>(::Buttplug::_DeviceMessage_RawWriteCmd_default_instance_);
}
inline const ::Buttplug::DeviceMessage_RawWriteCmd& DeviceMessage_FFIMessage::raw_write_cmd() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.FFIMessage.raw_write_cmd)
  return _internal_raw_write_cmd();
}
inline ::Buttplug::DeviceMessage_RawWriteCmd* DeviceMessage_FFIMessage::unsafe_arena_release_raw_write_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceMessage.FFIMessage.raw_write_cmd)
  if (_internal_has_raw_write_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RawWriteCmd* temp = _impl_.msg_.raw_write_cmd_;
    _impl_.msg_.raw_write_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceMessage_FFIMessage::unsafe_arena_set_allocated_raw_write_cmd(::Buttplug::DeviceMessage_RawWriteCmd* raw_write_cmd) {
  clear_msg();
  if (raw_write_cmd) {
    set_has_raw_write_cmd();
    _impl_.msg_.raw_write_cmd_ = raw_write_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.FFIMessage.raw_write_cmd)
}
inline ::Buttplug::DeviceMessage_RawWriteCmd* DeviceMessage_FFIMessage::_internal_mutable_raw_write_cmd() {
  if (!_internal_has_raw_write_cmd()) {
    clear_msg();
    set_has_raw_write_cmd();
    _impl_.msg_.raw_write_cmd_ = CreateMaybeMessage< ::Buttplug::DeviceMessage_RawWriteCmd >(GetArenaForAllocation());
  }
  return _impl_.msg_.raw_write_cmd_;
}
inline ::Buttplug::DeviceMessage_RawWriteCmd* DeviceMessage_FFIMessage::mutable_raw_write_cmd() {
  ::Buttplug::DeviceMessage_RawWriteCmd* _msg = _internal_mutable_raw_write_cmd();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.FFIMessage.raw_write_cmd)
  return _msg;
}

// .Buttplug.DeviceMessage.RawSubscribeCmd raw_subscribe_cmd = 7;
inline bool DeviceMessage_FFIMessage::_internal_has_raw_subscribe_cmd() const {
  return msg_case() == kRawSubscribeCmd;
}
inline bool DeviceMessage_FFIMessage::has_raw_subscribe_cmd() const {
  return _internal_has_raw_subscribe_cmd();
}
inline void DeviceMessage_FFIMessage::set_has_raw_subscribe_cmd() {
  _impl_._oneof_case_[0] = kRawSubscribeCmd;
}
inline void DeviceMessage_FFIMessage::clear_raw_subscribe_cmd() {
  if (_internal_has_raw_subscribe_cmd()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.raw_subscribe_cmd_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceMessage_RawSubscribeCmd* DeviceMessage_FFIMessage::release_raw_subscribe_cmd() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.FFIMessage.raw_subscribe_cmd)
  if (_internal_has_raw_subscribe_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RawSubscribeCmd* temp = _impl_.msg_.raw_subscribe_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.raw_subscribe_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceMessage_RawSubscribeCmd& DeviceMessage_FFIMessage::_internal_raw_subscribe_cmd() const {
  return _internal_has_raw_subscribe_cmd()
      ? *_impl_.msg_.raw_subscribe_cmd_
      : reinterpret_cast< ::Buttplug::DeviceMessage_RawSubscribeCmd&>(::Buttplug::_DeviceMessage_RawSubscribeCmd_default_instance_);
}
inline const ::Buttplug::DeviceMessage_RawSubscribeCmd& DeviceMessage_FFIMessage::raw_subscribe_cmd() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.FFIMessage.raw_subscribe_cmd)
  return _internal_raw_subscribe_cmd();
}
inline ::Buttplug::DeviceMessage_RawSubscribeCmd* DeviceMessage_FFIMessage::unsafe_arena_release_raw_subscribe_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceMessage.FFIMessage.raw_subscribe_cmd)
  if (_internal_has_raw_subscribe_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RawSubscribeCmd* temp = _impl_.msg_.raw_subscribe_cmd_;
    _impl_.msg_.raw_subscribe_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceMessage_FFIMessage::unsafe_arena_set_allocated_raw_subscribe_cmd(::Buttplug::DeviceMessage_RawSubscribeCmd* raw_subscribe_cmd) {
  clear_msg();
  if (raw_subscribe_cmd) {
    set_has_raw_subscribe_cmd();
    _impl_.msg_.raw_subscribe_cmd_ = raw_subscribe_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.FFIMessage.raw_subscribe_cmd)
}
inline ::Buttplug::DeviceMessage_RawSubscribeCmd* DeviceMessage_FFIMessage::_internal_mutable_raw_subscribe_cmd() {
  if (!_internal_has_raw_subscribe_cmd()) {
    clear_msg();
    set_has_raw_subscribe_cmd();
    _impl_.msg_.raw_subscribe_cmd_ = CreateMaybeMessage< ::Buttplug::DeviceMessage_RawSubscribeCmd >(GetArenaForAllocation());
  }
  return _impl_.msg_.raw_subscribe_cmd_;
}
inline ::Buttplug::DeviceMessage_RawSubscribeCmd* DeviceMessage_FFIMessage::mutable_raw_subscribe_cmd() {
  ::Buttplug::DeviceMessage_RawSubscribeCmd* _msg = _internal_mutable_raw_subscribe_cmd();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.FFIMessage.raw_subscribe_cmd)
  return _msg;
}

// .Buttplug.DeviceMessage.RawUnsubscribeCmd raw_unsubscribe_cmd = 8;
inline bool DeviceMessage_FFIMessage::_internal_has_raw_unsubscribe_cmd() const {
  return msg_case() == kRawUnsubscribeCmd;
}
inline bool DeviceMessage_FFIMessage::has_raw_unsubscribe_cmd() const {
  return _internal_has_raw_unsubscribe_cmd();
}
inline void DeviceMessage_FFIMessage::set_has_raw_unsubscribe_cmd() {
  _impl_._oneof_case_[0] = kRawUnsubscribeCmd;
}
inline void DeviceMessage_FFIMessage::clear_raw_unsubscribe_cmd() {
  if (_internal_has_raw_unsubscribe_cmd()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.raw_unsubscribe_cmd_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceMessage_RawUnsubscribeCmd* DeviceMessage_FFIMessage::release_raw_unsubscribe_cmd() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.FFIMessage.raw_unsubscribe_cmd)
  if (_internal_has_raw_unsubscribe_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RawUnsubscribeCmd* temp = _impl_.msg_.raw_unsubscribe_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.raw_unsubscribe_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceMessage_RawUnsubscribeCmd& DeviceMessage_FFIMessage::_internal_raw_unsubscribe_cmd() const {
  return _internal_has_raw_unsubscribe_cmd()
      ? *_impl_.msg_.raw_unsubscribe_cmd_
      : reinterpret_cast< ::Buttplug::DeviceMessage_RawUnsubscribeCmd&>(::Buttplug::_DeviceMessage_RawUnsubscribeCmd_default_instance_);
}
inline const ::Buttplug::DeviceMessage_RawUnsubscribeCmd& DeviceMessage_FFIMessage::raw_unsubscribe_cmd() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.FFIMessage.raw_unsubscribe_cmd)
  return _internal_raw_unsubscribe_cmd();
}
inline ::Buttplug::DeviceMessage_RawUnsubscribeCmd* DeviceMessage_FFIMessage::unsafe_arena_release_raw_unsubscribe_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceMessage.FFIMessage.raw_unsubscribe_cmd)
  if (_internal_has_raw_unsubscribe_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RawUnsubscribeCmd* temp = _impl_.msg_.raw_unsubscribe_cmd_;
    _impl_.msg_.raw_unsubscribe_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceMessage_FFIMessage::unsafe_arena_set_allocated_raw_unsubscribe_cmd(::Buttplug::DeviceMessage_RawUnsubscribeCmd* raw_unsubscribe_cmd) {
  clear_msg();
  if (raw_unsubscribe_cmd) {
    set_has_raw_unsubscribe_cmd();
    _impl_.msg_.raw_unsubscribe_cmd_ = raw_unsubscribe_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.FFIMessage.raw_unsubscribe_cmd)
}
inline ::Buttplug::DeviceMessage_RawUnsubscribeCmd* DeviceMessage_FFIMessage::_internal_mutable_raw_unsubscribe_cmd() {
  if (!_internal_has_raw_unsubscribe_cmd()) {
    clear_msg();
    set_has_raw_unsubscribe_cmd();
    _impl_.msg_.raw_unsubscribe_cmd_ = CreateMaybeMessage< ::Buttplug::DeviceMessage_RawUnsubscribeCmd >(GetArenaForAllocation());
  }
  return _impl_.msg_.raw_unsubscribe_cmd_;
}
inline ::Buttplug::DeviceMessage_RawUnsubscribeCmd* DeviceMessage_FFIMessage::mutable_raw_unsubscribe_cmd() {
  ::Buttplug::DeviceMessage_RawUnsubscribeCmd* _msg = _internal_mutable_raw_unsubscribe_cmd();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.FFIMessage.raw_unsubscribe_cmd)
  return _msg;
}

// .Buttplug.DeviceMessage.BatteryLevelCmd battery_level_cmd = 9;
inline bool DeviceMessage_FFIMessage::_internal_has_battery_level_cmd() const {
  return msg_case() == kBatteryLevelCmd;
}
inline bool DeviceMessage_FFIMessage::has_battery_level_cmd() const {
  return _internal_has_battery_level_cmd();
}
inline void DeviceMessage_FFIMessage::set_has_battery_level_cmd() {
  _impl_._oneof_case_[0] = kBatteryLevelCmd;
}
inline void DeviceMessage_FFIMessage::clear_battery_level_cmd() {
  if (_internal_has_battery_level_cmd()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.battery_level_cmd_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceMessage_BatteryLevelCmd* DeviceMessage_FFIMessage::release_battery_level_cmd() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.FFIMessage.battery_level_cmd)
  if (_internal_has_battery_level_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_BatteryLevelCmd* temp = _impl_.msg_.battery_level_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.battery_level_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceMessage_BatteryLevelCmd& DeviceMessage_FFIMessage::_internal_battery_level_cmd() const {
  return _internal_has_battery_level_cmd()
      ? *_impl_.msg_.battery_level_cmd_
      : reinterpret_cast< ::Buttplug::DeviceMessage_BatteryLevelCmd&>(::Buttplug::_DeviceMessage_BatteryLevelCmd_default_instance_);
}
inline const ::Buttplug::DeviceMessage_BatteryLevelCmd& DeviceMessage_FFIMessage::battery_level_cmd() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.FFIMessage.battery_level_cmd)
  return _internal_battery_level_cmd();
}
inline ::Buttplug::DeviceMessage_BatteryLevelCmd* DeviceMessage_FFIMessage::unsafe_arena_release_battery_level_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceMessage.FFIMessage.battery_level_cmd)
  if (_internal_has_battery_level_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_BatteryLevelCmd* temp = _impl_.msg_.battery_level_cmd_;
    _impl_.msg_.battery_level_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceMessage_FFIMessage::unsafe_arena_set_allocated_battery_level_cmd(::Buttplug::DeviceMessage_BatteryLevelCmd* battery_level_cmd) {
  clear_msg();
  if (battery_level_cmd) {
    set_has_battery_level_cmd();
    _impl_.msg_.battery_level_cmd_ = battery_level_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.FFIMessage.battery_level_cmd)
}
inline ::Buttplug::DeviceMessage_BatteryLevelCmd* DeviceMessage_FFIMessage::_internal_mutable_battery_level_cmd() {
  if (!_internal_has_battery_level_cmd()) {
    clear_msg();
    set_has_battery_level_cmd();
    _impl_.msg_.battery_level_cmd_ = CreateMaybeMessage< ::Buttplug::DeviceMessage_BatteryLevelCmd >(GetArenaForAllocation());
  }
  return _impl_.msg_.battery_level_cmd_;
}
inline ::Buttplug::DeviceMessage_BatteryLevelCmd* DeviceMessage_FFIMessage::mutable_battery_level_cmd() {
  ::Buttplug::DeviceMessage_BatteryLevelCmd* _msg = _internal_mutable_battery_level_cmd();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.FFIMessage.battery_level_cmd)
  return _msg;
}

// .Buttplug.DeviceMessage.RSSILevelCmd rssi_level_cmd = 10;
inline bool DeviceMessage_FFIMessage::_internal_has_rssi_level_cmd() const {
  return msg_case() == kRssiLevelCmd;
}
inline bool DeviceMessage_FFIMessage::has_rssi_level_cmd() const {
  return _internal_has_rssi_level_cmd();
}
inline void DeviceMessage_FFIMessage::set_has_rssi_level_cmd() {
  _impl_._oneof_case_[0] = kRssiLevelCmd;
}
inline void DeviceMessage_FFIMessage::clear_rssi_level_cmd() {
  if (_internal_has_rssi_level_cmd()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.rssi_level_cmd_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceMessage_RSSILevelCmd* DeviceMessage_FFIMessage::release_rssi_level_cmd() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.FFIMessage.rssi_level_cmd)
  if (_internal_has_rssi_level_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RSSILevelCmd* temp = _impl_.msg_.rssi_level_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.rssi_level_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceMessage_RSSILevelCmd& DeviceMessage_FFIMessage::_internal_rssi_level_cmd() const {
  return _internal_has_rssi_level_cmd()
      ? *_impl_.msg_.rssi_level_cmd_
      : reinterpret_cast< ::Buttplug::DeviceMessage_RSSILevelCmd&>(::Buttplug::_DeviceMessage_RSSILevelCmd_default_instance_);
}
inline const ::Buttplug::DeviceMessage_RSSILevelCmd& DeviceMessage_FFIMessage::rssi_level_cmd() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.FFIMessage.rssi_level_cmd)
  return _internal_rssi_level_cmd();
}
inline ::Buttplug::DeviceMessage_RSSILevelCmd* DeviceMessage_FFIMessage::unsafe_arena_release_rssi_level_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceMessage.FFIMessage.rssi_level_cmd)
  if (_internal_has_rssi_level_cmd()) {
    clear_has_msg();
    ::Buttplug::DeviceMessage_RSSILevelCmd* temp = _impl_.msg_.rssi_level_cmd_;
    _impl_.msg_.rssi_level_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceMessage_FFIMessage::unsafe_arena_set_allocated_rssi_level_cmd(::Buttplug::DeviceMessage_RSSILevelCmd* rssi_level_cmd) {
  clear_msg();
  if (rssi_level_cmd) {
    set_has_rssi_level_cmd();
    _impl_.msg_.rssi_level_cmd_ = rssi_level_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.FFIMessage.rssi_level_cmd)
}
inline ::Buttplug::DeviceMessage_RSSILevelCmd* DeviceMessage_FFIMessage::_internal_mutable_rssi_level_cmd() {
  if (!_internal_has_rssi_level_cmd()) {
    clear_msg();
    set_has_rssi_level_cmd();
    _impl_.msg_.rssi_level_cmd_ = CreateMaybeMessage< ::Buttplug::DeviceMessage_RSSILevelCmd >(GetArenaForAllocation());
  }
  return _impl_.msg_.rssi_level_cmd_;
}
inline ::Buttplug::DeviceMessage_RSSILevelCmd* DeviceMessage_FFIMessage::mutable_rssi_level_cmd() {
  ::Buttplug::DeviceMessage_RSSILevelCmd* _msg = _internal_mutable_rssi_level_cmd();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.FFIMessage.rssi_level_cmd)
  return _msg;
}

inline bool DeviceMessage_FFIMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void DeviceMessage_FFIMessage::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline DeviceMessage_FFIMessage::MsgCase DeviceMessage_FFIMessage::msg_case() const {
  return DeviceMessage_FFIMessage::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeviceMessage

// uint32 id = 1;
inline void DeviceMessage::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t DeviceMessage::_internal_id() const {
  return _impl_.id_;
}
inline ::uint32_t DeviceMessage::id() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.id)
  return _internal_id();
}
inline void DeviceMessage::_internal_set_id(::uint32_t value) {

  _impl_.id_ = value;
}
inline void DeviceMessage::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.id)
}

// uint32 index = 2;
inline void DeviceMessage::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t DeviceMessage::_internal_index() const {
  return _impl_.index_;
}
inline ::uint32_t DeviceMessage::index() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.index)
  return _internal_index();
}
inline void DeviceMessage::_internal_set_index(::uint32_t value) {

  _impl_.index_ = value;
}
inline void DeviceMessage::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceMessage.index)
}

// .Buttplug.DeviceMessage.FFIMessage message = 3;
inline bool DeviceMessage::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool DeviceMessage::has_message() const {
  return _internal_has_message();
}
inline void DeviceMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
}
inline const ::Buttplug::DeviceMessage_FFIMessage& DeviceMessage::_internal_message() const {
  const ::Buttplug::DeviceMessage_FFIMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::Buttplug::DeviceMessage_FFIMessage&>(
      ::Buttplug::_DeviceMessage_FFIMessage_default_instance_);
}
inline const ::Buttplug::DeviceMessage_FFIMessage& DeviceMessage::message() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceMessage.message)
  return _internal_message();
}
inline void DeviceMessage::unsafe_arena_set_allocated_message(
    ::Buttplug::DeviceMessage_FFIMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceMessage.message)
}
inline ::Buttplug::DeviceMessage_FFIMessage* DeviceMessage::release_message() {
  
  ::Buttplug::DeviceMessage_FFIMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Buttplug::DeviceMessage_FFIMessage* DeviceMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceMessage.message)
  
  ::Buttplug::DeviceMessage_FFIMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::Buttplug::DeviceMessage_FFIMessage* DeviceMessage::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::Buttplug::DeviceMessage_FFIMessage>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::Buttplug::DeviceMessage_FFIMessage* DeviceMessage::mutable_message() {
  ::Buttplug::DeviceMessage_FFIMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceMessage.message)
  return _msg;
}
inline void DeviceMessage::set_allocated_message(::Buttplug::DeviceMessage_FFIMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }

  } else {

  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.message)
}

// -------------------------------------------------------------------

// ServerMessage_MessageAttributes

// .Buttplug.ServerMessage.MessageAttributeType message_type = 1;
inline void ServerMessage_MessageAttributes::clear_message_type() {
  _impl_.message_type_ = 0;
}
inline ::Buttplug::ServerMessage_MessageAttributeType ServerMessage_MessageAttributes::_internal_message_type() const {
  return static_cast< ::Buttplug::ServerMessage_MessageAttributeType >(_impl_.message_type_);
}
inline ::Buttplug::ServerMessage_MessageAttributeType ServerMessage_MessageAttributes::message_type() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.MessageAttributes.message_type)
  return _internal_message_type();
}
inline void ServerMessage_MessageAttributes::_internal_set_message_type(::Buttplug::ServerMessage_MessageAttributeType value) {
  
  _impl_.message_type_ = value;
}
inline void ServerMessage_MessageAttributes::set_message_type(::Buttplug::ServerMessage_MessageAttributeType value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.MessageAttributes.message_type)
}

// uint32 feature_count = 2;
inline void ServerMessage_MessageAttributes::clear_feature_count() {
  _impl_.feature_count_ = 0u;
}
inline ::uint32_t ServerMessage_MessageAttributes::_internal_feature_count() const {
  return _impl_.feature_count_;
}
inline ::uint32_t ServerMessage_MessageAttributes::feature_count() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.MessageAttributes.feature_count)
  return _internal_feature_count();
}
inline void ServerMessage_MessageAttributes::_internal_set_feature_count(::uint32_t value) {

  _impl_.feature_count_ = value;
}
inline void ServerMessage_MessageAttributes::set_feature_count(::uint32_t value) {
  _internal_set_feature_count(value);
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.MessageAttributes.feature_count)
}

// repeated uint32 step_count = 3;
inline int ServerMessage_MessageAttributes::_internal_step_count_size() const {
  return _impl_.step_count_.size();
}
inline int ServerMessage_MessageAttributes::step_count_size() const {
  return _internal_step_count_size();
}
inline void ServerMessage_MessageAttributes::clear_step_count() {
  _impl_.step_count_.Clear();
}
inline ::uint32_t ServerMessage_MessageAttributes::_internal_step_count(int index) const {
  return _impl_.step_count_.Get(index);
}
inline ::uint32_t ServerMessage_MessageAttributes::step_count(int index) const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.MessageAttributes.step_count)
  return _internal_step_count(index);
}
inline void ServerMessage_MessageAttributes::set_step_count(int index, ::uint32_t value) {
  _impl_.step_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.MessageAttributes.step_count)
}
inline void ServerMessage_MessageAttributes::_internal_add_step_count(::uint32_t value) {
  _impl_.step_count_.Add(value);
}
inline void ServerMessage_MessageAttributes::add_step_count(::uint32_t value) {
  _internal_add_step_count(value);
  // @@protoc_insertion_point(field_add:Buttplug.ServerMessage.MessageAttributes.step_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
ServerMessage_MessageAttributes::_internal_step_count() const {
  return _impl_.step_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
ServerMessage_MessageAttributes::step_count() const {
  // @@protoc_insertion_point(field_list:Buttplug.ServerMessage.MessageAttributes.step_count)
  return _internal_step_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
ServerMessage_MessageAttributes::_internal_mutable_step_count() {
  return &_impl_.step_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
ServerMessage_MessageAttributes::mutable_step_count() {
  // @@protoc_insertion_point(field_mutable_list:Buttplug.ServerMessage.MessageAttributes.step_count)
  return _internal_mutable_step_count();
}

// repeated .Buttplug.Endpoint endpoints = 4;
inline int ServerMessage_MessageAttributes::_internal_endpoints_size() const {
  return _impl_.endpoints_.size();
}
inline int ServerMessage_MessageAttributes::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void ServerMessage_MessageAttributes::clear_endpoints() {
  _impl_.endpoints_.Clear();
}
inline ::Buttplug::Endpoint ServerMessage_MessageAttributes::_internal_endpoints(int index) const {
  return static_cast< ::Buttplug::Endpoint >(_impl_.endpoints_.Get(index));
}
inline ::Buttplug::Endpoint ServerMessage_MessageAttributes::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.MessageAttributes.endpoints)
  return _internal_endpoints(index);
}
inline void ServerMessage_MessageAttributes::set_endpoints(int index, ::Buttplug::Endpoint value) {
  _impl_.endpoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.MessageAttributes.endpoints)
}
inline void ServerMessage_MessageAttributes::_internal_add_endpoints(::Buttplug::Endpoint value) {
  _impl_.endpoints_.Add(value);
}
inline void ServerMessage_MessageAttributes::add_endpoints(::Buttplug::Endpoint value) {
  _internal_add_endpoints(value);
  // @@protoc_insertion_point(field_add:Buttplug.ServerMessage.MessageAttributes.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ServerMessage_MessageAttributes::endpoints() const {
  // @@protoc_insertion_point(field_list:Buttplug.ServerMessage.MessageAttributes.endpoints)
  return _impl_.endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ServerMessage_MessageAttributes::_internal_mutable_endpoints() {
  return &_impl_.endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ServerMessage_MessageAttributes::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:Buttplug.ServerMessage.MessageAttributes.endpoints)
  return _internal_mutable_endpoints();
}

// repeated uint32 max_duration = 5;
inline int ServerMessage_MessageAttributes::_internal_max_duration_size() const {
  return _impl_.max_duration_.size();
}
inline int ServerMessage_MessageAttributes::max_duration_size() const {
  return _internal_max_duration_size();
}
inline void ServerMessage_MessageAttributes::clear_max_duration() {
  _impl_.max_duration_.Clear();
}
inline ::uint32_t ServerMessage_MessageAttributes::_internal_max_duration(int index) const {
  return _impl_.max_duration_.Get(index);
}
inline ::uint32_t ServerMessage_MessageAttributes::max_duration(int index) const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.MessageAttributes.max_duration)
  return _internal_max_duration(index);
}
inline void ServerMessage_MessageAttributes::set_max_duration(int index, ::uint32_t value) {
  _impl_.max_duration_.Set(index, value);
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.MessageAttributes.max_duration)
}
inline void ServerMessage_MessageAttributes::_internal_add_max_duration(::uint32_t value) {
  _impl_.max_duration_.Add(value);
}
inline void ServerMessage_MessageAttributes::add_max_duration(::uint32_t value) {
  _internal_add_max_duration(value);
  // @@protoc_insertion_point(field_add:Buttplug.ServerMessage.MessageAttributes.max_duration)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
ServerMessage_MessageAttributes::_internal_max_duration() const {
  return _impl_.max_duration_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
ServerMessage_MessageAttributes::max_duration() const {
  // @@protoc_insertion_point(field_list:Buttplug.ServerMessage.MessageAttributes.max_duration)
  return _internal_max_duration();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
ServerMessage_MessageAttributes::_internal_mutable_max_duration() {
  return &_impl_.max_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
ServerMessage_MessageAttributes::mutable_max_duration() {
  // @@protoc_insertion_point(field_mutable_list:Buttplug.ServerMessage.MessageAttributes.max_duration)
  return _internal_mutable_max_duration();
}

// -------------------------------------------------------------------

// ServerMessage_Ok

// -------------------------------------------------------------------

// ServerMessage_Error

// .Buttplug.ServerMessage.ButtplugErrorType error_type = 1;
inline void ServerMessage_Error::clear_error_type() {
  _impl_.error_type_ = 0;
}
inline ::Buttplug::ServerMessage_ButtplugErrorType ServerMessage_Error::_internal_error_type() const {
  return static_cast< ::Buttplug::ServerMessage_ButtplugErrorType >(_impl_.error_type_);
}
inline ::Buttplug::ServerMessage_ButtplugErrorType ServerMessage_Error::error_type() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.Error.error_type)
  return _internal_error_type();
}
inline void ServerMessage_Error::_internal_set_error_type(::Buttplug::ServerMessage_ButtplugErrorType value) {
  
  _impl_.error_type_ = value;
}
inline void ServerMessage_Error::set_error_type(::Buttplug::ServerMessage_ButtplugErrorType value) {
  _internal_set_error_type(value);
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.Error.error_type)
}

// string message = 2;
inline void ServerMessage_Error::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ServerMessage_Error::message() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.Error.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerMessage_Error::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.Error.message)
}
inline std::string* ServerMessage_Error::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Buttplug.ServerMessage.Error.message)
  return _s;
}
inline const std::string& ServerMessage_Error::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ServerMessage_Error::_internal_set_message(const std::string& value) {

  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerMessage_Error::_internal_mutable_message() {

  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerMessage_Error::release_message() {
  // @@protoc_insertion_point(field_release:Buttplug.ServerMessage.Error.message)
  return _impl_.message_.Release();
}
inline void ServerMessage_Error::set_allocated_message(std::string* message) {
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ServerMessage.Error.message)
}

// string backtrace = 3;
inline void ServerMessage_Error::clear_backtrace() {
  _impl_.backtrace_.ClearToEmpty();
}
inline const std::string& ServerMessage_Error::backtrace() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.Error.backtrace)
  return _internal_backtrace();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerMessage_Error::set_backtrace(ArgT0&& arg0, ArgT... args) {
 
 _impl_.backtrace_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.Error.backtrace)
}
inline std::string* ServerMessage_Error::mutable_backtrace() {
  std::string* _s = _internal_mutable_backtrace();
  // @@protoc_insertion_point(field_mutable:Buttplug.ServerMessage.Error.backtrace)
  return _s;
}
inline const std::string& ServerMessage_Error::_internal_backtrace() const {
  return _impl_.backtrace_.Get();
}
inline void ServerMessage_Error::_internal_set_backtrace(const std::string& value) {

  _impl_.backtrace_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerMessage_Error::_internal_mutable_backtrace() {

  return _impl_.backtrace_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerMessage_Error::release_backtrace() {
  // @@protoc_insertion_point(field_release:Buttplug.ServerMessage.Error.backtrace)
  return _impl_.backtrace_.Release();
}
inline void ServerMessage_Error::set_allocated_backtrace(std::string* backtrace) {
  _impl_.backtrace_.SetAllocated(backtrace, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.backtrace_.IsDefault()) {
    _impl_.backtrace_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ServerMessage.Error.backtrace)
}

// -------------------------------------------------------------------

// ServerMessage_ScanningFinished

// -------------------------------------------------------------------

// ServerMessage_DeviceAdded

// string name = 1;
inline void ServerMessage_DeviceAdded::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServerMessage_DeviceAdded::name() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.DeviceAdded.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerMessage_DeviceAdded::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.DeviceAdded.name)
}
inline std::string* ServerMessage_DeviceAdded::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Buttplug.ServerMessage.DeviceAdded.name)
  return _s;
}
inline const std::string& ServerMessage_DeviceAdded::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ServerMessage_DeviceAdded::_internal_set_name(const std::string& value) {

  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerMessage_DeviceAdded::_internal_mutable_name() {

  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerMessage_DeviceAdded::release_name() {
  // @@protoc_insertion_point(field_release:Buttplug.ServerMessage.DeviceAdded.name)
  return _impl_.name_.Release();
}
inline void ServerMessage_DeviceAdded::set_allocated_name(std::string* name) {
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ServerMessage.DeviceAdded.name)
}

// uint32 index = 2;
inline void ServerMessage_DeviceAdded::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t ServerMessage_DeviceAdded::_internal_index() const {
  return _impl_.index_;
}
inline ::uint32_t ServerMessage_DeviceAdded::index() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.DeviceAdded.index)
  return _internal_index();
}
inline void ServerMessage_DeviceAdded::_internal_set_index(::uint32_t value) {

  _impl_.index_ = value;
}
inline void ServerMessage_DeviceAdded::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.DeviceAdded.index)
}

// repeated .Buttplug.ServerMessage.MessageAttributes message_attributes = 3;
inline int ServerMessage_DeviceAdded::_internal_message_attributes_size() const {
  return _impl_.message_attributes_.size();
}
inline int ServerMessage_DeviceAdded::message_attributes_size() const {
  return _internal_message_attributes_size();
}
inline void ServerMessage_DeviceAdded::clear_message_attributes() {
  _impl_.message_attributes_.Clear();
}
inline ::Buttplug::ServerMessage_MessageAttributes* ServerMessage_DeviceAdded::mutable_message_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:Buttplug.ServerMessage.DeviceAdded.message_attributes)
  return _impl_.message_attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::ServerMessage_MessageAttributes >*
ServerMessage_DeviceAdded::mutable_message_attributes() {
  // @@protoc_insertion_point(field_mutable_list:Buttplug.ServerMessage.DeviceAdded.message_attributes)
  return &_impl_.message_attributes_;
}
inline const ::Buttplug::ServerMessage_MessageAttributes& ServerMessage_DeviceAdded::_internal_message_attributes(int index) const {
  return _impl_.message_attributes_.Get(index);
}
inline const ::Buttplug::ServerMessage_MessageAttributes& ServerMessage_DeviceAdded::message_attributes(int index) const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.DeviceAdded.message_attributes)
  return _internal_message_attributes(index);
}
inline ::Buttplug::ServerMessage_MessageAttributes* ServerMessage_DeviceAdded::_internal_add_message_attributes() {
  return _impl_.message_attributes_.Add();
}
inline ::Buttplug::ServerMessage_MessageAttributes* ServerMessage_DeviceAdded::add_message_attributes() {
  ::Buttplug::ServerMessage_MessageAttributes* _add = _internal_add_message_attributes();
  // @@protoc_insertion_point(field_add:Buttplug.ServerMessage.DeviceAdded.message_attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Buttplug::ServerMessage_MessageAttributes >&
ServerMessage_DeviceAdded::message_attributes() const {
  // @@protoc_insertion_point(field_list:Buttplug.ServerMessage.DeviceAdded.message_attributes)
  return _impl_.message_attributes_;
}

// -------------------------------------------------------------------

// ServerMessage_DeviceRemoved

// uint32 index = 1;
inline void ServerMessage_DeviceRemoved::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t ServerMessage_DeviceRemoved::_internal_index() const {
  return _impl_.index_;
}
inline ::uint32_t ServerMessage_DeviceRemoved::index() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.DeviceRemoved.index)
  return _internal_index();
}
inline void ServerMessage_DeviceRemoved::_internal_set_index(::uint32_t value) {

  _impl_.index_ = value;
}
inline void ServerMessage_DeviceRemoved::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Buttplug.ServerMessage.DeviceRemoved.index)
}

// -------------------------------------------------------------------

// ServerMessage_Disconnect

// -------------------------------------------------------------------

// ServerMessage

// .Buttplug.ServerMessage.Ok ok = 1;
inline bool ServerMessage::_internal_has_ok() const {
  return msg_case() == kOk;
}
inline bool ServerMessage::has_ok() const {
  return _internal_has_ok();
}
inline void ServerMessage::set_has_ok() {
  _impl_._oneof_case_[0] = kOk;
}
inline void ServerMessage::clear_ok() {
  if (_internal_has_ok()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.ok_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ServerMessage_Ok* ServerMessage::release_ok() {
  // @@protoc_insertion_point(field_release:Buttplug.ServerMessage.ok)
  if (_internal_has_ok()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_Ok* temp = _impl_.msg_.ok_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.ok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ServerMessage_Ok& ServerMessage::_internal_ok() const {
  return _internal_has_ok()
      ? *_impl_.msg_.ok_
      : reinterpret_cast< ::Buttplug::ServerMessage_Ok&>(::Buttplug::_ServerMessage_Ok_default_instance_);
}
inline const ::Buttplug::ServerMessage_Ok& ServerMessage::ok() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.ok)
  return _internal_ok();
}
inline ::Buttplug::ServerMessage_Ok* ServerMessage::unsafe_arena_release_ok() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ServerMessage.ok)
  if (_internal_has_ok()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_Ok* temp = _impl_.msg_.ok_;
    _impl_.msg_.ok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_ok(::Buttplug::ServerMessage_Ok* ok) {
  clear_msg();
  if (ok) {
    set_has_ok();
    _impl_.msg_.ok_ = ok;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ServerMessage.ok)
}
inline ::Buttplug::ServerMessage_Ok* ServerMessage::_internal_mutable_ok() {
  if (!_internal_has_ok()) {
    clear_msg();
    set_has_ok();
    _impl_.msg_.ok_ = CreateMaybeMessage< ::Buttplug::ServerMessage_Ok >(GetArenaForAllocation());
  }
  return _impl_.msg_.ok_;
}
inline ::Buttplug::ServerMessage_Ok* ServerMessage::mutable_ok() {
  ::Buttplug::ServerMessage_Ok* _msg = _internal_mutable_ok();
  // @@protoc_insertion_point(field_mutable:Buttplug.ServerMessage.ok)
  return _msg;
}

// .Buttplug.ServerMessage.Error error = 2;
inline bool ServerMessage::_internal_has_error() const {
  return msg_case() == kError;
}
inline bool ServerMessage::has_error() const {
  return _internal_has_error();
}
inline void ServerMessage::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void ServerMessage::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.error_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ServerMessage_Error* ServerMessage::release_error() {
  // @@protoc_insertion_point(field_release:Buttplug.ServerMessage.error)
  if (_internal_has_error()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_Error* temp = _impl_.msg_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ServerMessage_Error& ServerMessage::_internal_error() const {
  return _internal_has_error()
      ? *_impl_.msg_.error_
      : reinterpret_cast< ::Buttplug::ServerMessage_Error&>(::Buttplug::_ServerMessage_Error_default_instance_);
}
inline const ::Buttplug::ServerMessage_Error& ServerMessage::error() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.error)
  return _internal_error();
}
inline ::Buttplug::ServerMessage_Error* ServerMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ServerMessage.error)
  if (_internal_has_error()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_Error* temp = _impl_.msg_.error_;
    _impl_.msg_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_error(::Buttplug::ServerMessage_Error* error) {
  clear_msg();
  if (error) {
    set_has_error();
    _impl_.msg_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ServerMessage.error)
}
inline ::Buttplug::ServerMessage_Error* ServerMessage::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_msg();
    set_has_error();
    _impl_.msg_.error_ = CreateMaybeMessage< ::Buttplug::ServerMessage_Error >(GetArenaForAllocation());
  }
  return _impl_.msg_.error_;
}
inline ::Buttplug::ServerMessage_Error* ServerMessage::mutable_error() {
  ::Buttplug::ServerMessage_Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Buttplug.ServerMessage.error)
  return _msg;
}

// .Buttplug.ServerMessage.ScanningFinished scanning_finished = 3;
inline bool ServerMessage::_internal_has_scanning_finished() const {
  return msg_case() == kScanningFinished;
}
inline bool ServerMessage::has_scanning_finished() const {
  return _internal_has_scanning_finished();
}
inline void ServerMessage::set_has_scanning_finished() {
  _impl_._oneof_case_[0] = kScanningFinished;
}
inline void ServerMessage::clear_scanning_finished() {
  if (_internal_has_scanning_finished()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.scanning_finished_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ServerMessage_ScanningFinished* ServerMessage::release_scanning_finished() {
  // @@protoc_insertion_point(field_release:Buttplug.ServerMessage.scanning_finished)
  if (_internal_has_scanning_finished()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_ScanningFinished* temp = _impl_.msg_.scanning_finished_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.scanning_finished_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ServerMessage_ScanningFinished& ServerMessage::_internal_scanning_finished() const {
  return _internal_has_scanning_finished()
      ? *_impl_.msg_.scanning_finished_
      : reinterpret_cast< ::Buttplug::ServerMessage_ScanningFinished&>(::Buttplug::_ServerMessage_ScanningFinished_default_instance_);
}
inline const ::Buttplug::ServerMessage_ScanningFinished& ServerMessage::scanning_finished() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.scanning_finished)
  return _internal_scanning_finished();
}
inline ::Buttplug::ServerMessage_ScanningFinished* ServerMessage::unsafe_arena_release_scanning_finished() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ServerMessage.scanning_finished)
  if (_internal_has_scanning_finished()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_ScanningFinished* temp = _impl_.msg_.scanning_finished_;
    _impl_.msg_.scanning_finished_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_scanning_finished(::Buttplug::ServerMessage_ScanningFinished* scanning_finished) {
  clear_msg();
  if (scanning_finished) {
    set_has_scanning_finished();
    _impl_.msg_.scanning_finished_ = scanning_finished;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ServerMessage.scanning_finished)
}
inline ::Buttplug::ServerMessage_ScanningFinished* ServerMessage::_internal_mutable_scanning_finished() {
  if (!_internal_has_scanning_finished()) {
    clear_msg();
    set_has_scanning_finished();
    _impl_.msg_.scanning_finished_ = CreateMaybeMessage< ::Buttplug::ServerMessage_ScanningFinished >(GetArenaForAllocation());
  }
  return _impl_.msg_.scanning_finished_;
}
inline ::Buttplug::ServerMessage_ScanningFinished* ServerMessage::mutable_scanning_finished() {
  ::Buttplug::ServerMessage_ScanningFinished* _msg = _internal_mutable_scanning_finished();
  // @@protoc_insertion_point(field_mutable:Buttplug.ServerMessage.scanning_finished)
  return _msg;
}

// .Buttplug.ServerMessage.DeviceAdded device_added = 4;
inline bool ServerMessage::_internal_has_device_added() const {
  return msg_case() == kDeviceAdded;
}
inline bool ServerMessage::has_device_added() const {
  return _internal_has_device_added();
}
inline void ServerMessage::set_has_device_added() {
  _impl_._oneof_case_[0] = kDeviceAdded;
}
inline void ServerMessage::clear_device_added() {
  if (_internal_has_device_added()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.device_added_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ServerMessage_DeviceAdded* ServerMessage::release_device_added() {
  // @@protoc_insertion_point(field_release:Buttplug.ServerMessage.device_added)
  if (_internal_has_device_added()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_DeviceAdded* temp = _impl_.msg_.device_added_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.device_added_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ServerMessage_DeviceAdded& ServerMessage::_internal_device_added() const {
  return _internal_has_device_added()
      ? *_impl_.msg_.device_added_
      : reinterpret_cast< ::Buttplug::ServerMessage_DeviceAdded&>(::Buttplug::_ServerMessage_DeviceAdded_default_instance_);
}
inline const ::Buttplug::ServerMessage_DeviceAdded& ServerMessage::device_added() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.device_added)
  return _internal_device_added();
}
inline ::Buttplug::ServerMessage_DeviceAdded* ServerMessage::unsafe_arena_release_device_added() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ServerMessage.device_added)
  if (_internal_has_device_added()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_DeviceAdded* temp = _impl_.msg_.device_added_;
    _impl_.msg_.device_added_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_device_added(::Buttplug::ServerMessage_DeviceAdded* device_added) {
  clear_msg();
  if (device_added) {
    set_has_device_added();
    _impl_.msg_.device_added_ = device_added;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ServerMessage.device_added)
}
inline ::Buttplug::ServerMessage_DeviceAdded* ServerMessage::_internal_mutable_device_added() {
  if (!_internal_has_device_added()) {
    clear_msg();
    set_has_device_added();
    _impl_.msg_.device_added_ = CreateMaybeMessage< ::Buttplug::ServerMessage_DeviceAdded >(GetArenaForAllocation());
  }
  return _impl_.msg_.device_added_;
}
inline ::Buttplug::ServerMessage_DeviceAdded* ServerMessage::mutable_device_added() {
  ::Buttplug::ServerMessage_DeviceAdded* _msg = _internal_mutable_device_added();
  // @@protoc_insertion_point(field_mutable:Buttplug.ServerMessage.device_added)
  return _msg;
}

// .Buttplug.ServerMessage.DeviceRemoved device_removed = 5;
inline bool ServerMessage::_internal_has_device_removed() const {
  return msg_case() == kDeviceRemoved;
}
inline bool ServerMessage::has_device_removed() const {
  return _internal_has_device_removed();
}
inline void ServerMessage::set_has_device_removed() {
  _impl_._oneof_case_[0] = kDeviceRemoved;
}
inline void ServerMessage::clear_device_removed() {
  if (_internal_has_device_removed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.device_removed_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ServerMessage_DeviceRemoved* ServerMessage::release_device_removed() {
  // @@protoc_insertion_point(field_release:Buttplug.ServerMessage.device_removed)
  if (_internal_has_device_removed()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_DeviceRemoved* temp = _impl_.msg_.device_removed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.device_removed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ServerMessage_DeviceRemoved& ServerMessage::_internal_device_removed() const {
  return _internal_has_device_removed()
      ? *_impl_.msg_.device_removed_
      : reinterpret_cast< ::Buttplug::ServerMessage_DeviceRemoved&>(::Buttplug::_ServerMessage_DeviceRemoved_default_instance_);
}
inline const ::Buttplug::ServerMessage_DeviceRemoved& ServerMessage::device_removed() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.device_removed)
  return _internal_device_removed();
}
inline ::Buttplug::ServerMessage_DeviceRemoved* ServerMessage::unsafe_arena_release_device_removed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ServerMessage.device_removed)
  if (_internal_has_device_removed()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_DeviceRemoved* temp = _impl_.msg_.device_removed_;
    _impl_.msg_.device_removed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_device_removed(::Buttplug::ServerMessage_DeviceRemoved* device_removed) {
  clear_msg();
  if (device_removed) {
    set_has_device_removed();
    _impl_.msg_.device_removed_ = device_removed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ServerMessage.device_removed)
}
inline ::Buttplug::ServerMessage_DeviceRemoved* ServerMessage::_internal_mutable_device_removed() {
  if (!_internal_has_device_removed()) {
    clear_msg();
    set_has_device_removed();
    _impl_.msg_.device_removed_ = CreateMaybeMessage< ::Buttplug::ServerMessage_DeviceRemoved >(GetArenaForAllocation());
  }
  return _impl_.msg_.device_removed_;
}
inline ::Buttplug::ServerMessage_DeviceRemoved* ServerMessage::mutable_device_removed() {
  ::Buttplug::ServerMessage_DeviceRemoved* _msg = _internal_mutable_device_removed();
  // @@protoc_insertion_point(field_mutable:Buttplug.ServerMessage.device_removed)
  return _msg;
}

// .Buttplug.ServerMessage.Disconnect disconnect = 6;
inline bool ServerMessage::_internal_has_disconnect() const {
  return msg_case() == kDisconnect;
}
inline bool ServerMessage::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void ServerMessage::set_has_disconnect() {
  _impl_._oneof_case_[0] = kDisconnect;
}
inline void ServerMessage::clear_disconnect() {
  if (_internal_has_disconnect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.disconnect_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ServerMessage_Disconnect* ServerMessage::release_disconnect() {
  // @@protoc_insertion_point(field_release:Buttplug.ServerMessage.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_Disconnect* temp = _impl_.msg_.disconnect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ServerMessage_Disconnect& ServerMessage::_internal_disconnect() const {
  return _internal_has_disconnect()
      ? *_impl_.msg_.disconnect_
      : reinterpret_cast< ::Buttplug::ServerMessage_Disconnect&>(::Buttplug::_ServerMessage_Disconnect_default_instance_);
}
inline const ::Buttplug::ServerMessage_Disconnect& ServerMessage::disconnect() const {
  // @@protoc_insertion_point(field_get:Buttplug.ServerMessage.disconnect)
  return _internal_disconnect();
}
inline ::Buttplug::ServerMessage_Disconnect* ServerMessage::unsafe_arena_release_disconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ServerMessage.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_msg();
    ::Buttplug::ServerMessage_Disconnect* temp = _impl_.msg_.disconnect_;
    _impl_.msg_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_disconnect(::Buttplug::ServerMessage_Disconnect* disconnect) {
  clear_msg();
  if (disconnect) {
    set_has_disconnect();
    _impl_.msg_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ServerMessage.disconnect)
}
inline ::Buttplug::ServerMessage_Disconnect* ServerMessage::_internal_mutable_disconnect() {
  if (!_internal_has_disconnect()) {
    clear_msg();
    set_has_disconnect();
    _impl_.msg_.disconnect_ = CreateMaybeMessage< ::Buttplug::ServerMessage_Disconnect >(GetArenaForAllocation());
  }
  return _impl_.msg_.disconnect_;
}
inline ::Buttplug::ServerMessage_Disconnect* ServerMessage::mutable_disconnect() {
  ::Buttplug::ServerMessage_Disconnect* _msg = _internal_mutable_disconnect();
  // @@protoc_insertion_point(field_mutable:Buttplug.ServerMessage.disconnect)
  return _msg;
}

inline bool ServerMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ServerMessage::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline ServerMessage::MsgCase ServerMessage::msg_case() const {
  return ServerMessage::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeviceEvent_Disconnect

// uint32 index = 1;
inline void DeviceEvent_Disconnect::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t DeviceEvent_Disconnect::_internal_index() const {
  return _impl_.index_;
}
inline ::uint32_t DeviceEvent_Disconnect::index() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.Disconnect.index)
  return _internal_index();
}
inline void DeviceEvent_Disconnect::_internal_set_index(::uint32_t value) {

  _impl_.index_ = value;
}
inline void DeviceEvent_Disconnect::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceEvent.Disconnect.index)
}

// -------------------------------------------------------------------

// DeviceEvent_RawReading

// uint32 index = 1;
inline void DeviceEvent_RawReading::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t DeviceEvent_RawReading::_internal_index() const {
  return _impl_.index_;
}
inline ::uint32_t DeviceEvent_RawReading::index() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.RawReading.index)
  return _internal_index();
}
inline void DeviceEvent_RawReading::_internal_set_index(::uint32_t value) {

  _impl_.index_ = value;
}
inline void DeviceEvent_RawReading::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceEvent.RawReading.index)
}

// .Buttplug.Endpoint endpoint = 2;
inline void DeviceEvent_RawReading::clear_endpoint() {
  _impl_.endpoint_ = 0;
}
inline ::Buttplug::Endpoint DeviceEvent_RawReading::_internal_endpoint() const {
  return static_cast< ::Buttplug::Endpoint >(_impl_.endpoint_);
}
inline ::Buttplug::Endpoint DeviceEvent_RawReading::endpoint() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.RawReading.endpoint)
  return _internal_endpoint();
}
inline void DeviceEvent_RawReading::_internal_set_endpoint(::Buttplug::Endpoint value) {
  
  _impl_.endpoint_ = value;
}
inline void DeviceEvent_RawReading::set_endpoint(::Buttplug::Endpoint value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceEvent.RawReading.endpoint)
}

// bytes data = 3;
inline void DeviceEvent_RawReading::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& DeviceEvent_RawReading::data() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.RawReading.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceEvent_RawReading::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Buttplug.DeviceEvent.RawReading.data)
}
inline std::string* DeviceEvent_RawReading::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceEvent.RawReading.data)
  return _s;
}
inline const std::string& DeviceEvent_RawReading::_internal_data() const {
  return _impl_.data_.Get();
}
inline void DeviceEvent_RawReading::_internal_set_data(const std::string& value) {

  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceEvent_RawReading::_internal_mutable_data() {

  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceEvent_RawReading::release_data() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceEvent.RawReading.data)
  return _impl_.data_.Release();
}
inline void DeviceEvent_RawReading::set_allocated_data(std::string* data) {
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceEvent.RawReading.data)
}

// -------------------------------------------------------------------

// DeviceEvent_BatteryLevelReading

// uint32 index = 1;
inline void DeviceEvent_BatteryLevelReading::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t DeviceEvent_BatteryLevelReading::_internal_index() const {
  return _impl_.index_;
}
inline ::uint32_t DeviceEvent_BatteryLevelReading::index() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.BatteryLevelReading.index)
  return _internal_index();
}
inline void DeviceEvent_BatteryLevelReading::_internal_set_index(::uint32_t value) {

  _impl_.index_ = value;
}
inline void DeviceEvent_BatteryLevelReading::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceEvent.BatteryLevelReading.index)
}

// double reading = 2;
inline void DeviceEvent_BatteryLevelReading::clear_reading() {
  _impl_.reading_ = 0;
}
inline double DeviceEvent_BatteryLevelReading::_internal_reading() const {
  return _impl_.reading_;
}
inline double DeviceEvent_BatteryLevelReading::reading() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.BatteryLevelReading.reading)
  return _internal_reading();
}
inline void DeviceEvent_BatteryLevelReading::_internal_set_reading(double value) {

  _impl_.reading_ = value;
}
inline void DeviceEvent_BatteryLevelReading::set_reading(double value) {
  _internal_set_reading(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceEvent.BatteryLevelReading.reading)
}

// -------------------------------------------------------------------

// DeviceEvent_RSSILevelReading

// uint32 index = 1;
inline void DeviceEvent_RSSILevelReading::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t DeviceEvent_RSSILevelReading::_internal_index() const {
  return _impl_.index_;
}
inline ::uint32_t DeviceEvent_RSSILevelReading::index() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.RSSILevelReading.index)
  return _internal_index();
}
inline void DeviceEvent_RSSILevelReading::_internal_set_index(::uint32_t value) {

  _impl_.index_ = value;
}
inline void DeviceEvent_RSSILevelReading::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceEvent.RSSILevelReading.index)
}

// int32 reading = 2;
inline void DeviceEvent_RSSILevelReading::clear_reading() {
  _impl_.reading_ = 0;
}
inline ::int32_t DeviceEvent_RSSILevelReading::_internal_reading() const {
  return _impl_.reading_;
}
inline ::int32_t DeviceEvent_RSSILevelReading::reading() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.RSSILevelReading.reading)
  return _internal_reading();
}
inline void DeviceEvent_RSSILevelReading::_internal_set_reading(::int32_t value) {

  _impl_.reading_ = value;
}
inline void DeviceEvent_RSSILevelReading::set_reading(::int32_t value) {
  _internal_set_reading(value);
  // @@protoc_insertion_point(field_set:Buttplug.DeviceEvent.RSSILevelReading.reading)
}

// -------------------------------------------------------------------

// DeviceEvent

// .Buttplug.DeviceEvent.Disconnect disconnect = 1;
inline bool DeviceEvent::_internal_has_disconnect() const {
  return msg_case() == kDisconnect;
}
inline bool DeviceEvent::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void DeviceEvent::set_has_disconnect() {
  _impl_._oneof_case_[0] = kDisconnect;
}
inline void DeviceEvent::clear_disconnect() {
  if (_internal_has_disconnect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.disconnect_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceEvent_Disconnect* DeviceEvent::release_disconnect() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceEvent.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_msg();
    ::Buttplug::DeviceEvent_Disconnect* temp = _impl_.msg_.disconnect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceEvent_Disconnect& DeviceEvent::_internal_disconnect() const {
  return _internal_has_disconnect()
      ? *_impl_.msg_.disconnect_
      : reinterpret_cast< ::Buttplug::DeviceEvent_Disconnect&>(::Buttplug::_DeviceEvent_Disconnect_default_instance_);
}
inline const ::Buttplug::DeviceEvent_Disconnect& DeviceEvent::disconnect() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.disconnect)
  return _internal_disconnect();
}
inline ::Buttplug::DeviceEvent_Disconnect* DeviceEvent::unsafe_arena_release_disconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceEvent.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_msg();
    ::Buttplug::DeviceEvent_Disconnect* temp = _impl_.msg_.disconnect_;
    _impl_.msg_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceEvent::unsafe_arena_set_allocated_disconnect(::Buttplug::DeviceEvent_Disconnect* disconnect) {
  clear_msg();
  if (disconnect) {
    set_has_disconnect();
    _impl_.msg_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceEvent.disconnect)
}
inline ::Buttplug::DeviceEvent_Disconnect* DeviceEvent::_internal_mutable_disconnect() {
  if (!_internal_has_disconnect()) {
    clear_msg();
    set_has_disconnect();
    _impl_.msg_.disconnect_ = CreateMaybeMessage< ::Buttplug::DeviceEvent_Disconnect >(GetArenaForAllocation());
  }
  return _impl_.msg_.disconnect_;
}
inline ::Buttplug::DeviceEvent_Disconnect* DeviceEvent::mutable_disconnect() {
  ::Buttplug::DeviceEvent_Disconnect* _msg = _internal_mutable_disconnect();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceEvent.disconnect)
  return _msg;
}

// .Buttplug.DeviceEvent.BatteryLevelReading battery_level_reading = 2;
inline bool DeviceEvent::_internal_has_battery_level_reading() const {
  return msg_case() == kBatteryLevelReading;
}
inline bool DeviceEvent::has_battery_level_reading() const {
  return _internal_has_battery_level_reading();
}
inline void DeviceEvent::set_has_battery_level_reading() {
  _impl_._oneof_case_[0] = kBatteryLevelReading;
}
inline void DeviceEvent::clear_battery_level_reading() {
  if (_internal_has_battery_level_reading()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.battery_level_reading_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceEvent_BatteryLevelReading* DeviceEvent::release_battery_level_reading() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceEvent.battery_level_reading)
  if (_internal_has_battery_level_reading()) {
    clear_has_msg();
    ::Buttplug::DeviceEvent_BatteryLevelReading* temp = _impl_.msg_.battery_level_reading_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.battery_level_reading_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceEvent_BatteryLevelReading& DeviceEvent::_internal_battery_level_reading() const {
  return _internal_has_battery_level_reading()
      ? *_impl_.msg_.battery_level_reading_
      : reinterpret_cast< ::Buttplug::DeviceEvent_BatteryLevelReading&>(::Buttplug::_DeviceEvent_BatteryLevelReading_default_instance_);
}
inline const ::Buttplug::DeviceEvent_BatteryLevelReading& DeviceEvent::battery_level_reading() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.battery_level_reading)
  return _internal_battery_level_reading();
}
inline ::Buttplug::DeviceEvent_BatteryLevelReading* DeviceEvent::unsafe_arena_release_battery_level_reading() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceEvent.battery_level_reading)
  if (_internal_has_battery_level_reading()) {
    clear_has_msg();
    ::Buttplug::DeviceEvent_BatteryLevelReading* temp = _impl_.msg_.battery_level_reading_;
    _impl_.msg_.battery_level_reading_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceEvent::unsafe_arena_set_allocated_battery_level_reading(::Buttplug::DeviceEvent_BatteryLevelReading* battery_level_reading) {
  clear_msg();
  if (battery_level_reading) {
    set_has_battery_level_reading();
    _impl_.msg_.battery_level_reading_ = battery_level_reading;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceEvent.battery_level_reading)
}
inline ::Buttplug::DeviceEvent_BatteryLevelReading* DeviceEvent::_internal_mutable_battery_level_reading() {
  if (!_internal_has_battery_level_reading()) {
    clear_msg();
    set_has_battery_level_reading();
    _impl_.msg_.battery_level_reading_ = CreateMaybeMessage< ::Buttplug::DeviceEvent_BatteryLevelReading >(GetArenaForAllocation());
  }
  return _impl_.msg_.battery_level_reading_;
}
inline ::Buttplug::DeviceEvent_BatteryLevelReading* DeviceEvent::mutable_battery_level_reading() {
  ::Buttplug::DeviceEvent_BatteryLevelReading* _msg = _internal_mutable_battery_level_reading();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceEvent.battery_level_reading)
  return _msg;
}

// .Buttplug.DeviceEvent.RSSILevelReading rssi_level_reading = 3;
inline bool DeviceEvent::_internal_has_rssi_level_reading() const {
  return msg_case() == kRssiLevelReading;
}
inline bool DeviceEvent::has_rssi_level_reading() const {
  return _internal_has_rssi_level_reading();
}
inline void DeviceEvent::set_has_rssi_level_reading() {
  _impl_._oneof_case_[0] = kRssiLevelReading;
}
inline void DeviceEvent::clear_rssi_level_reading() {
  if (_internal_has_rssi_level_reading()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.rssi_level_reading_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceEvent_RSSILevelReading* DeviceEvent::release_rssi_level_reading() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceEvent.rssi_level_reading)
  if (_internal_has_rssi_level_reading()) {
    clear_has_msg();
    ::Buttplug::DeviceEvent_RSSILevelReading* temp = _impl_.msg_.rssi_level_reading_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.rssi_level_reading_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceEvent_RSSILevelReading& DeviceEvent::_internal_rssi_level_reading() const {
  return _internal_has_rssi_level_reading()
      ? *_impl_.msg_.rssi_level_reading_
      : reinterpret_cast< ::Buttplug::DeviceEvent_RSSILevelReading&>(::Buttplug::_DeviceEvent_RSSILevelReading_default_instance_);
}
inline const ::Buttplug::DeviceEvent_RSSILevelReading& DeviceEvent::rssi_level_reading() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.rssi_level_reading)
  return _internal_rssi_level_reading();
}
inline ::Buttplug::DeviceEvent_RSSILevelReading* DeviceEvent::unsafe_arena_release_rssi_level_reading() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceEvent.rssi_level_reading)
  if (_internal_has_rssi_level_reading()) {
    clear_has_msg();
    ::Buttplug::DeviceEvent_RSSILevelReading* temp = _impl_.msg_.rssi_level_reading_;
    _impl_.msg_.rssi_level_reading_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceEvent::unsafe_arena_set_allocated_rssi_level_reading(::Buttplug::DeviceEvent_RSSILevelReading* rssi_level_reading) {
  clear_msg();
  if (rssi_level_reading) {
    set_has_rssi_level_reading();
    _impl_.msg_.rssi_level_reading_ = rssi_level_reading;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceEvent.rssi_level_reading)
}
inline ::Buttplug::DeviceEvent_RSSILevelReading* DeviceEvent::_internal_mutable_rssi_level_reading() {
  if (!_internal_has_rssi_level_reading()) {
    clear_msg();
    set_has_rssi_level_reading();
    _impl_.msg_.rssi_level_reading_ = CreateMaybeMessage< ::Buttplug::DeviceEvent_RSSILevelReading >(GetArenaForAllocation());
  }
  return _impl_.msg_.rssi_level_reading_;
}
inline ::Buttplug::DeviceEvent_RSSILevelReading* DeviceEvent::mutable_rssi_level_reading() {
  ::Buttplug::DeviceEvent_RSSILevelReading* _msg = _internal_mutable_rssi_level_reading();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceEvent.rssi_level_reading)
  return _msg;
}

// .Buttplug.DeviceEvent.RawReading raw_reading = 4;
inline bool DeviceEvent::_internal_has_raw_reading() const {
  return msg_case() == kRawReading;
}
inline bool DeviceEvent::has_raw_reading() const {
  return _internal_has_raw_reading();
}
inline void DeviceEvent::set_has_raw_reading() {
  _impl_._oneof_case_[0] = kRawReading;
}
inline void DeviceEvent::clear_raw_reading() {
  if (_internal_has_raw_reading()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.raw_reading_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceEvent_RawReading* DeviceEvent::release_raw_reading() {
  // @@protoc_insertion_point(field_release:Buttplug.DeviceEvent.raw_reading)
  if (_internal_has_raw_reading()) {
    clear_has_msg();
    ::Buttplug::DeviceEvent_RawReading* temp = _impl_.msg_.raw_reading_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.raw_reading_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceEvent_RawReading& DeviceEvent::_internal_raw_reading() const {
  return _internal_has_raw_reading()
      ? *_impl_.msg_.raw_reading_
      : reinterpret_cast< ::Buttplug::DeviceEvent_RawReading&>(::Buttplug::_DeviceEvent_RawReading_default_instance_);
}
inline const ::Buttplug::DeviceEvent_RawReading& DeviceEvent::raw_reading() const {
  // @@protoc_insertion_point(field_get:Buttplug.DeviceEvent.raw_reading)
  return _internal_raw_reading();
}
inline ::Buttplug::DeviceEvent_RawReading* DeviceEvent::unsafe_arena_release_raw_reading() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.DeviceEvent.raw_reading)
  if (_internal_has_raw_reading()) {
    clear_has_msg();
    ::Buttplug::DeviceEvent_RawReading* temp = _impl_.msg_.raw_reading_;
    _impl_.msg_.raw_reading_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceEvent::unsafe_arena_set_allocated_raw_reading(::Buttplug::DeviceEvent_RawReading* raw_reading) {
  clear_msg();
  if (raw_reading) {
    set_has_raw_reading();
    _impl_.msg_.raw_reading_ = raw_reading;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.DeviceEvent.raw_reading)
}
inline ::Buttplug::DeviceEvent_RawReading* DeviceEvent::_internal_mutable_raw_reading() {
  if (!_internal_has_raw_reading()) {
    clear_msg();
    set_has_raw_reading();
    _impl_.msg_.raw_reading_ = CreateMaybeMessage< ::Buttplug::DeviceEvent_RawReading >(GetArenaForAllocation());
  }
  return _impl_.msg_.raw_reading_;
}
inline ::Buttplug::DeviceEvent_RawReading* DeviceEvent::mutable_raw_reading() {
  ::Buttplug::DeviceEvent_RawReading* _msg = _internal_mutable_raw_reading();
  // @@protoc_insertion_point(field_mutable:Buttplug.DeviceEvent.raw_reading)
  return _msg;
}

inline bool DeviceEvent::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void DeviceEvent::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline DeviceEvent::MsgCase DeviceEvent::msg_case() const {
  return DeviceEvent::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ButtplugFFIServerMessage_FFIMessage

// .Buttplug.ServerMessage server_message = 1;
inline bool ButtplugFFIServerMessage_FFIMessage::_internal_has_server_message() const {
  return msg_case() == kServerMessage;
}
inline bool ButtplugFFIServerMessage_FFIMessage::has_server_message() const {
  return _internal_has_server_message();
}
inline void ButtplugFFIServerMessage_FFIMessage::set_has_server_message() {
  _impl_._oneof_case_[0] = kServerMessage;
}
inline void ButtplugFFIServerMessage_FFIMessage::clear_server_message() {
  if (_internal_has_server_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.server_message_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::ServerMessage* ButtplugFFIServerMessage_FFIMessage::release_server_message() {
  // @@protoc_insertion_point(field_release:Buttplug.ButtplugFFIServerMessage.FFIMessage.server_message)
  if (_internal_has_server_message()) {
    clear_has_msg();
    ::Buttplug::ServerMessage* temp = _impl_.msg_.server_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.server_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::ServerMessage& ButtplugFFIServerMessage_FFIMessage::_internal_server_message() const {
  return _internal_has_server_message()
      ? *_impl_.msg_.server_message_
      : reinterpret_cast< ::Buttplug::ServerMessage&>(::Buttplug::_ServerMessage_default_instance_);
}
inline const ::Buttplug::ServerMessage& ButtplugFFIServerMessage_FFIMessage::server_message() const {
  // @@protoc_insertion_point(field_get:Buttplug.ButtplugFFIServerMessage.FFIMessage.server_message)
  return _internal_server_message();
}
inline ::Buttplug::ServerMessage* ButtplugFFIServerMessage_FFIMessage::unsafe_arena_release_server_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ButtplugFFIServerMessage.FFIMessage.server_message)
  if (_internal_has_server_message()) {
    clear_has_msg();
    ::Buttplug::ServerMessage* temp = _impl_.msg_.server_message_;
    _impl_.msg_.server_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ButtplugFFIServerMessage_FFIMessage::unsafe_arena_set_allocated_server_message(::Buttplug::ServerMessage* server_message) {
  clear_msg();
  if (server_message) {
    set_has_server_message();
    _impl_.msg_.server_message_ = server_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ButtplugFFIServerMessage.FFIMessage.server_message)
}
inline ::Buttplug::ServerMessage* ButtplugFFIServerMessage_FFIMessage::_internal_mutable_server_message() {
  if (!_internal_has_server_message()) {
    clear_msg();
    set_has_server_message();
    _impl_.msg_.server_message_ = CreateMaybeMessage< ::Buttplug::ServerMessage >(GetArenaForAllocation());
  }
  return _impl_.msg_.server_message_;
}
inline ::Buttplug::ServerMessage* ButtplugFFIServerMessage_FFIMessage::mutable_server_message() {
  ::Buttplug::ServerMessage* _msg = _internal_mutable_server_message();
  // @@protoc_insertion_point(field_mutable:Buttplug.ButtplugFFIServerMessage.FFIMessage.server_message)
  return _msg;
}

// .Buttplug.DeviceEvent device_event = 2;
inline bool ButtplugFFIServerMessage_FFIMessage::_internal_has_device_event() const {
  return msg_case() == kDeviceEvent;
}
inline bool ButtplugFFIServerMessage_FFIMessage::has_device_event() const {
  return _internal_has_device_event();
}
inline void ButtplugFFIServerMessage_FFIMessage::set_has_device_event() {
  _impl_._oneof_case_[0] = kDeviceEvent;
}
inline void ButtplugFFIServerMessage_FFIMessage::clear_device_event() {
  if (_internal_has_device_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.device_event_;
    }
    clear_has_msg();
  }
}
inline ::Buttplug::DeviceEvent* ButtplugFFIServerMessage_FFIMessage::release_device_event() {
  // @@protoc_insertion_point(field_release:Buttplug.ButtplugFFIServerMessage.FFIMessage.device_event)
  if (_internal_has_device_event()) {
    clear_has_msg();
    ::Buttplug::DeviceEvent* temp = _impl_.msg_.device_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.device_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Buttplug::DeviceEvent& ButtplugFFIServerMessage_FFIMessage::_internal_device_event() const {
  return _internal_has_device_event()
      ? *_impl_.msg_.device_event_
      : reinterpret_cast< ::Buttplug::DeviceEvent&>(::Buttplug::_DeviceEvent_default_instance_);
}
inline const ::Buttplug::DeviceEvent& ButtplugFFIServerMessage_FFIMessage::device_event() const {
  // @@protoc_insertion_point(field_get:Buttplug.ButtplugFFIServerMessage.FFIMessage.device_event)
  return _internal_device_event();
}
inline ::Buttplug::DeviceEvent* ButtplugFFIServerMessage_FFIMessage::unsafe_arena_release_device_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Buttplug.ButtplugFFIServerMessage.FFIMessage.device_event)
  if (_internal_has_device_event()) {
    clear_has_msg();
    ::Buttplug::DeviceEvent* temp = _impl_.msg_.device_event_;
    _impl_.msg_.device_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ButtplugFFIServerMessage_FFIMessage::unsafe_arena_set_allocated_device_event(::Buttplug::DeviceEvent* device_event) {
  clear_msg();
  if (device_event) {
    set_has_device_event();
    _impl_.msg_.device_event_ = device_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ButtplugFFIServerMessage.FFIMessage.device_event)
}
inline ::Buttplug::DeviceEvent* ButtplugFFIServerMessage_FFIMessage::_internal_mutable_device_event() {
  if (!_internal_has_device_event()) {
    clear_msg();
    set_has_device_event();
    _impl_.msg_.device_event_ = CreateMaybeMessage< ::Buttplug::DeviceEvent >(GetArenaForAllocation());
  }
  return _impl_.msg_.device_event_;
}
inline ::Buttplug::DeviceEvent* ButtplugFFIServerMessage_FFIMessage::mutable_device_event() {
  ::Buttplug::DeviceEvent* _msg = _internal_mutable_device_event();
  // @@protoc_insertion_point(field_mutable:Buttplug.ButtplugFFIServerMessage.FFIMessage.device_event)
  return _msg;
}

inline bool ButtplugFFIServerMessage_FFIMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ButtplugFFIServerMessage_FFIMessage::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline ButtplugFFIServerMessage_FFIMessage::MsgCase ButtplugFFIServerMessage_FFIMessage::msg_case() const {
  return ButtplugFFIServerMessage_FFIMessage::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ButtplugFFIServerMessage

// uint32 id = 1;
inline void ButtplugFFIServerMessage::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t ButtplugFFIServerMessage::_internal_id() const {
  return _impl_.id_;
}
inline ::uint32_t ButtplugFFIServerMessage::id() const {
  // @@protoc_insertion_point(field_get:Buttplug.ButtplugFFIServerMessage.id)
  return _internal_id();
}
inline void ButtplugFFIServerMessage::_internal_set_id(::uint32_t value) {

  _impl_.id_ = value;
}
inline void ButtplugFFIServerMessage::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Buttplug.ButtplugFFIServerMessage.id)
}

// .Buttplug.ButtplugFFIServerMessage.FFIMessage message = 2;
inline bool ButtplugFFIServerMessage::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool ButtplugFFIServerMessage::has_message() const {
  return _internal_has_message();
}
inline void ButtplugFFIServerMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
}
inline const ::Buttplug::ButtplugFFIServerMessage_FFIMessage& ButtplugFFIServerMessage::_internal_message() const {
  const ::Buttplug::ButtplugFFIServerMessage_FFIMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::Buttplug::ButtplugFFIServerMessage_FFIMessage&>(
      ::Buttplug::_ButtplugFFIServerMessage_FFIMessage_default_instance_);
}
inline const ::Buttplug::ButtplugFFIServerMessage_FFIMessage& ButtplugFFIServerMessage::message() const {
  // @@protoc_insertion_point(field_get:Buttplug.ButtplugFFIServerMessage.message)
  return _internal_message();
}
inline void ButtplugFFIServerMessage::unsafe_arena_set_allocated_message(
    ::Buttplug::ButtplugFFIServerMessage_FFIMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Buttplug.ButtplugFFIServerMessage.message)
}
inline ::Buttplug::ButtplugFFIServerMessage_FFIMessage* ButtplugFFIServerMessage::release_message() {
  
  ::Buttplug::ButtplugFFIServerMessage_FFIMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Buttplug::ButtplugFFIServerMessage_FFIMessage* ButtplugFFIServerMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:Buttplug.ButtplugFFIServerMessage.message)
  
  ::Buttplug::ButtplugFFIServerMessage_FFIMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::Buttplug::ButtplugFFIServerMessage_FFIMessage* ButtplugFFIServerMessage::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::Buttplug::ButtplugFFIServerMessage_FFIMessage>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::Buttplug::ButtplugFFIServerMessage_FFIMessage* ButtplugFFIServerMessage::mutable_message() {
  ::Buttplug::ButtplugFFIServerMessage_FFIMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Buttplug.ButtplugFFIServerMessage.message)
  return _msg;
}
inline void ButtplugFFIServerMessage::set_allocated_message(::Buttplug::ButtplugFFIServerMessage_FFIMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }

  } else {

  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ButtplugFFIServerMessage.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Buttplug


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::Buttplug::ClientMessage_DeviceCommunicationManagerTypes> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Buttplug::ClientMessage_DeviceCommunicationManagerTypes>() {
  return ::Buttplug::ClientMessage_DeviceCommunicationManagerTypes_descriptor();
}
template <>
struct is_proto_enum<::Buttplug::ServerMessage_ButtplugErrorType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Buttplug::ServerMessage_ButtplugErrorType>() {
  return ::Buttplug::ServerMessage_ButtplugErrorType_descriptor();
}
template <>
struct is_proto_enum<::Buttplug::ServerMessage_MessageAttributeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Buttplug::ServerMessage_MessageAttributeType>() {
  return ::Buttplug::ServerMessage_MessageAttributeType_descriptor();
}
template <>
struct is_proto_enum<::Buttplug::Endpoint> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Buttplug::Endpoint>() {
  return ::Buttplug::Endpoint_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_buttplug_5frs_5fffi_2eproto_2epb_2eh
