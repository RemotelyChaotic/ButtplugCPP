// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buttplug_rs_ffi.proto

#include "buttplug_rs_ffi.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace Buttplug {
PROTOBUF_CONSTEXPR ClientMessage_ConnectLocal::ClientMessage_ConnectLocal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_configuration_json_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_device_configuration_json_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_ping_time_)*/0u
  , /*decltype(_impl_.allow_raw_messages_)*/false
  , /*decltype(_impl_.comm_manager_types_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientMessage_ConnectLocalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessage_ConnectLocalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessage_ConnectLocalDefaultTypeInternal() {}
  union {
    ClientMessage_ConnectLocal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessage_ConnectLocalDefaultTypeInternal _ClientMessage_ConnectLocal_default_instance_;
PROTOBUF_CONSTEXPR ClientMessage_ConnectWebsocket::ClientMessage_ConnectWebsocket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bypass_cert_verification_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientMessage_ConnectWebsocketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessage_ConnectWebsocketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessage_ConnectWebsocketDefaultTypeInternal() {}
  union {
    ClientMessage_ConnectWebsocket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessage_ConnectWebsocketDefaultTypeInternal _ClientMessage_ConnectWebsocket_default_instance_;
PROTOBUF_CONSTEXPR ClientMessage_StartScanning::ClientMessage_StartScanning(
    ::_pbi::ConstantInitialized) {}
struct ClientMessage_StartScanningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessage_StartScanningDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessage_StartScanningDefaultTypeInternal() {}
  union {
    ClientMessage_StartScanning _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessage_StartScanningDefaultTypeInternal _ClientMessage_StartScanning_default_instance_;
PROTOBUF_CONSTEXPR ClientMessage_StopScanning::ClientMessage_StopScanning(
    ::_pbi::ConstantInitialized) {}
struct ClientMessage_StopScanningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessage_StopScanningDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessage_StopScanningDefaultTypeInternal() {}
  union {
    ClientMessage_StopScanning _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessage_StopScanningDefaultTypeInternal _ClientMessage_StopScanning_default_instance_;
PROTOBUF_CONSTEXPR ClientMessage_StopAllDevices::ClientMessage_StopAllDevices(
    ::_pbi::ConstantInitialized) {}
struct ClientMessage_StopAllDevicesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessage_StopAllDevicesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessage_StopAllDevicesDefaultTypeInternal() {}
  union {
    ClientMessage_StopAllDevices _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessage_StopAllDevicesDefaultTypeInternal _ClientMessage_StopAllDevices_default_instance_;
PROTOBUF_CONSTEXPR ClientMessage_Disconnect::ClientMessage_Disconnect(
    ::_pbi::ConstantInitialized) {}
struct ClientMessage_DisconnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessage_DisconnectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessage_DisconnectDefaultTypeInternal() {}
  union {
    ClientMessage_Disconnect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessage_DisconnectDefaultTypeInternal _ClientMessage_Disconnect_default_instance_;
PROTOBUF_CONSTEXPR ClientMessage_Ping::ClientMessage_Ping(
    ::_pbi::ConstantInitialized) {}
struct ClientMessage_PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessage_PingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessage_PingDefaultTypeInternal() {}
  union {
    ClientMessage_Ping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessage_PingDefaultTypeInternal _ClientMessage_Ping_default_instance_;
PROTOBUF_CONSTEXPR ClientMessage_FFIMessage::ClientMessage_FFIMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ClientMessage_FFIMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessage_FFIMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessage_FFIMessageDefaultTypeInternal() {}
  union {
    ClientMessage_FFIMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessage_FFIMessageDefaultTypeInternal _ClientMessage_FFIMessage_default_instance_;
PROTOBUF_CONSTEXPR ClientMessage::ClientMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessageDefaultTypeInternal() {}
  union {
    ClientMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_VibrateComponent::DeviceMessage_VibrateComponent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessage_VibrateComponentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_VibrateComponentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_VibrateComponentDefaultTypeInternal() {}
  union {
    DeviceMessage_VibrateComponent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_VibrateComponentDefaultTypeInternal _DeviceMessage_VibrateComponent_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_VibrateCmd::DeviceMessage_VibrateCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speeds_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessage_VibrateCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_VibrateCmdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_VibrateCmdDefaultTypeInternal() {}
  union {
    DeviceMessage_VibrateCmd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_VibrateCmdDefaultTypeInternal _DeviceMessage_VibrateCmd_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_RotateComponent::DeviceMessage_RotateComponent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.clockwise_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessage_RotateComponentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_RotateComponentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_RotateComponentDefaultTypeInternal() {}
  union {
    DeviceMessage_RotateComponent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_RotateComponentDefaultTypeInternal _DeviceMessage_RotateComponent_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_RotateCmd::DeviceMessage_RotateCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rotations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessage_RotateCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_RotateCmdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_RotateCmdDefaultTypeInternal() {}
  union {
    DeviceMessage_RotateCmd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_RotateCmdDefaultTypeInternal _DeviceMessage_RotateCmd_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_LinearComponent::DeviceMessage_LinearComponent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessage_LinearComponentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_LinearComponentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_LinearComponentDefaultTypeInternal() {}
  union {
    DeviceMessage_LinearComponent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_LinearComponentDefaultTypeInternal _DeviceMessage_LinearComponent_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_LinearCmd::DeviceMessage_LinearCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.movements_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessage_LinearCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_LinearCmdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_LinearCmdDefaultTypeInternal() {}
  union {
    DeviceMessage_LinearCmd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_LinearCmdDefaultTypeInternal _DeviceMessage_LinearCmd_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_StopDeviceCmd::DeviceMessage_StopDeviceCmd(
    ::_pbi::ConstantInitialized) {}
struct DeviceMessage_StopDeviceCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_StopDeviceCmdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_StopDeviceCmdDefaultTypeInternal() {}
  union {
    DeviceMessage_StopDeviceCmd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_StopDeviceCmdDefaultTypeInternal _DeviceMessage_StopDeviceCmd_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_RawReadCmd::DeviceMessage_RawReadCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endpoint_)*/0
  , /*decltype(_impl_.expected_length_)*/0u
  , /*decltype(_impl_.timeout_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessage_RawReadCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_RawReadCmdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_RawReadCmdDefaultTypeInternal() {}
  union {
    DeviceMessage_RawReadCmd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_RawReadCmdDefaultTypeInternal _DeviceMessage_RawReadCmd_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_RawWriteCmd::DeviceMessage_RawWriteCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endpoint_)*/0
  , /*decltype(_impl_.write_with_response_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessage_RawWriteCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_RawWriteCmdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_RawWriteCmdDefaultTypeInternal() {}
  union {
    DeviceMessage_RawWriteCmd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_RawWriteCmdDefaultTypeInternal _DeviceMessage_RawWriteCmd_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_RawSubscribeCmd::DeviceMessage_RawSubscribeCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.endpoint_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessage_RawSubscribeCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_RawSubscribeCmdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_RawSubscribeCmdDefaultTypeInternal() {}
  union {
    DeviceMessage_RawSubscribeCmd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_RawSubscribeCmdDefaultTypeInternal _DeviceMessage_RawSubscribeCmd_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_RawUnsubscribeCmd::DeviceMessage_RawUnsubscribeCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.endpoint_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessage_RawUnsubscribeCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_RawUnsubscribeCmdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_RawUnsubscribeCmdDefaultTypeInternal() {}
  union {
    DeviceMessage_RawUnsubscribeCmd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_RawUnsubscribeCmdDefaultTypeInternal _DeviceMessage_RawUnsubscribeCmd_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_BatteryLevelCmd::DeviceMessage_BatteryLevelCmd(
    ::_pbi::ConstantInitialized) {}
struct DeviceMessage_BatteryLevelCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_BatteryLevelCmdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_BatteryLevelCmdDefaultTypeInternal() {}
  union {
    DeviceMessage_BatteryLevelCmd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_BatteryLevelCmdDefaultTypeInternal _DeviceMessage_BatteryLevelCmd_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_RSSILevelCmd::DeviceMessage_RSSILevelCmd(
    ::_pbi::ConstantInitialized) {}
struct DeviceMessage_RSSILevelCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_RSSILevelCmdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_RSSILevelCmdDefaultTypeInternal() {}
  union {
    DeviceMessage_RSSILevelCmd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_RSSILevelCmdDefaultTypeInternal _DeviceMessage_RSSILevelCmd_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage_FFIMessage::DeviceMessage_FFIMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DeviceMessage_FFIMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessage_FFIMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessage_FFIMessageDefaultTypeInternal() {}
  union {
    DeviceMessage_FFIMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessage_FFIMessageDefaultTypeInternal _DeviceMessage_FFIMessage_default_instance_;
PROTOBUF_CONSTEXPR DeviceMessage::DeviceMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMessageDefaultTypeInternal() {}
  union {
    DeviceMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMessageDefaultTypeInternal _DeviceMessage_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage_MessageAttributes::ServerMessage_MessageAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.step_count_)*/{}
  , /*decltype(_impl_._step_count_cached_byte_size_)*/{0}
  , /*decltype(_impl_.endpoints_)*/{}
  , /*decltype(_impl_._endpoints_cached_byte_size_)*/{0}
  , /*decltype(_impl_.max_duration_)*/{}
  , /*decltype(_impl_._max_duration_cached_byte_size_)*/{0}
  , /*decltype(_impl_.message_type_)*/0
  , /*decltype(_impl_.feature_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMessage_MessageAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessage_MessageAttributesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessage_MessageAttributesDefaultTypeInternal() {}
  union {
    ServerMessage_MessageAttributes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessage_MessageAttributesDefaultTypeInternal _ServerMessage_MessageAttributes_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage_Ok::ServerMessage_Ok(
    ::_pbi::ConstantInitialized) {}
struct ServerMessage_OkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessage_OkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessage_OkDefaultTypeInternal() {}
  union {
    ServerMessage_Ok _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessage_OkDefaultTypeInternal _ServerMessage_Ok_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage_Error::ServerMessage_Error(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backtrace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMessage_ErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessage_ErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessage_ErrorDefaultTypeInternal() {}
  union {
    ServerMessage_Error _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessage_ErrorDefaultTypeInternal _ServerMessage_Error_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage_ScanningFinished::ServerMessage_ScanningFinished(
    ::_pbi::ConstantInitialized) {}
struct ServerMessage_ScanningFinishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessage_ScanningFinishedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessage_ScanningFinishedDefaultTypeInternal() {}
  union {
    ServerMessage_ScanningFinished _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessage_ScanningFinishedDefaultTypeInternal _ServerMessage_ScanningFinished_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage_DeviceAdded::ServerMessage_DeviceAdded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_attributes_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMessage_DeviceAddedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessage_DeviceAddedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessage_DeviceAddedDefaultTypeInternal() {}
  union {
    ServerMessage_DeviceAdded _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessage_DeviceAddedDefaultTypeInternal _ServerMessage_DeviceAdded_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage_DeviceRemoved::ServerMessage_DeviceRemoved(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMessage_DeviceRemovedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessage_DeviceRemovedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessage_DeviceRemovedDefaultTypeInternal() {}
  union {
    ServerMessage_DeviceRemoved _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessage_DeviceRemovedDefaultTypeInternal _ServerMessage_DeviceRemoved_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage_Disconnect::ServerMessage_Disconnect(
    ::_pbi::ConstantInitialized) {}
struct ServerMessage_DisconnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessage_DisconnectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessage_DisconnectDefaultTypeInternal() {}
  union {
    ServerMessage_Disconnect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessage_DisconnectDefaultTypeInternal _ServerMessage_Disconnect_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage::ServerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ServerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessageDefaultTypeInternal() {}
  union {
    ServerMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
PROTOBUF_CONSTEXPR DeviceEvent_Disconnect::DeviceEvent_Disconnect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceEvent_DisconnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceEvent_DisconnectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceEvent_DisconnectDefaultTypeInternal() {}
  union {
    DeviceEvent_Disconnect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceEvent_DisconnectDefaultTypeInternal _DeviceEvent_Disconnect_default_instance_;
PROTOBUF_CONSTEXPR DeviceEvent_RawReading::DeviceEvent_RawReading(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.endpoint_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceEvent_RawReadingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceEvent_RawReadingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceEvent_RawReadingDefaultTypeInternal() {}
  union {
    DeviceEvent_RawReading _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceEvent_RawReadingDefaultTypeInternal _DeviceEvent_RawReading_default_instance_;
PROTOBUF_CONSTEXPR DeviceEvent_BatteryLevelReading::DeviceEvent_BatteryLevelReading(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reading_)*/0
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceEvent_BatteryLevelReadingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceEvent_BatteryLevelReadingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceEvent_BatteryLevelReadingDefaultTypeInternal() {}
  union {
    DeviceEvent_BatteryLevelReading _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceEvent_BatteryLevelReadingDefaultTypeInternal _DeviceEvent_BatteryLevelReading_default_instance_;
PROTOBUF_CONSTEXPR DeviceEvent_RSSILevelReading::DeviceEvent_RSSILevelReading(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.reading_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceEvent_RSSILevelReadingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceEvent_RSSILevelReadingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceEvent_RSSILevelReadingDefaultTypeInternal() {}
  union {
    DeviceEvent_RSSILevelReading _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceEvent_RSSILevelReadingDefaultTypeInternal _DeviceEvent_RSSILevelReading_default_instance_;
PROTOBUF_CONSTEXPR DeviceEvent::DeviceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DeviceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceEventDefaultTypeInternal() {}
  union {
    DeviceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceEventDefaultTypeInternal _DeviceEvent_default_instance_;
PROTOBUF_CONSTEXPR ButtplugFFIServerMessage_FFIMessage::ButtplugFFIServerMessage_FFIMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ButtplugFFIServerMessage_FFIMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ButtplugFFIServerMessage_FFIMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ButtplugFFIServerMessage_FFIMessageDefaultTypeInternal() {}
  union {
    ButtplugFFIServerMessage_FFIMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ButtplugFFIServerMessage_FFIMessageDefaultTypeInternal _ButtplugFFIServerMessage_FFIMessage_default_instance_;
PROTOBUF_CONSTEXPR ButtplugFFIServerMessage::ButtplugFFIServerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ButtplugFFIServerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ButtplugFFIServerMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ButtplugFFIServerMessageDefaultTypeInternal() {}
  union {
    ButtplugFFIServerMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ButtplugFFIServerMessageDefaultTypeInternal _ButtplugFFIServerMessage_default_instance_;
}  // namespace Buttplug
static ::_pb::Metadata file_level_metadata_buttplug_5frs_5fffi_2eproto[39];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_buttplug_5frs_5fffi_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_buttplug_5frs_5fffi_2eproto = nullptr;
const ::uint32_t TableStruct_buttplug_5frs_5fffi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_ConnectLocal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_ConnectLocal, _impl_.server_name_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_ConnectLocal, _impl_.max_ping_time_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_ConnectLocal, _impl_.allow_raw_messages_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_ConnectLocal, _impl_.device_configuration_json_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_ConnectLocal, _impl_.user_device_configuration_json_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_ConnectLocal, _impl_.comm_manager_types_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_ConnectWebsocket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_ConnectWebsocket, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_ConnectWebsocket, _impl_.bypass_cert_verification_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_StartScanning, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_StopScanning, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_StopAllDevices, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_Disconnect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_Ping, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_FFIMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_FFIMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_FFIMessage, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_VibrateComponent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_VibrateComponent, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_VibrateComponent, _impl_.speed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_VibrateCmd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_VibrateCmd, _impl_.speeds_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RotateComponent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RotateComponent, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RotateComponent, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RotateComponent, _impl_.clockwise_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RotateCmd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RotateCmd, _impl_.rotations_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_LinearComponent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_LinearComponent, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_LinearComponent, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_LinearComponent, _impl_.position_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_LinearCmd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_LinearCmd, _impl_.movements_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_StopDeviceCmd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawReadCmd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawReadCmd, _impl_.endpoint_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawReadCmd, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawReadCmd, _impl_.expected_length_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawReadCmd, _impl_.timeout_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawWriteCmd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawWriteCmd, _impl_.endpoint_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawWriteCmd, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawWriteCmd, _impl_.write_with_response_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawSubscribeCmd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawSubscribeCmd, _impl_.endpoint_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawUnsubscribeCmd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RawUnsubscribeCmd, _impl_.endpoint_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_BatteryLevelCmd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_RSSILevelCmd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_FFIMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_FFIMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_FFIMessage, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_MessageAttributes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_MessageAttributes, _impl_.message_type_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_MessageAttributes, _impl_.feature_count_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_MessageAttributes, _impl_.step_count_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_MessageAttributes, _impl_.endpoints_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_MessageAttributes, _impl_.max_duration_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_Ok, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_Error, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_Error, _impl_.error_type_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_Error, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_Error, _impl_.backtrace_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_ScanningFinished, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_DeviceAdded, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_DeviceAdded, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_DeviceAdded, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_DeviceAdded, _impl_.message_attributes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_DeviceRemoved, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_DeviceRemoved, _impl_.index_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage_Disconnect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_Disconnect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_Disconnect, _impl_.index_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_RawReading, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_RawReading, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_RawReading, _impl_.endpoint_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_RawReading, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_BatteryLevelReading, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_BatteryLevelReading, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_BatteryLevelReading, _impl_.reading_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_RSSILevelReading, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_RSSILevelReading, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent_RSSILevelReading, _impl_.reading_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ButtplugFFIServerMessage_FFIMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ButtplugFFIServerMessage_FFIMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::Buttplug::ButtplugFFIServerMessage_FFIMessage, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Buttplug::ButtplugFFIServerMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Buttplug::ButtplugFFIServerMessage, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::Buttplug::ButtplugFFIServerMessage, _impl_.message_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::Buttplug::ClientMessage_ConnectLocal)},
        { 14, -1, -1, sizeof(::Buttplug::ClientMessage_ConnectWebsocket)},
        { 24, -1, -1, sizeof(::Buttplug::ClientMessage_StartScanning)},
        { 32, -1, -1, sizeof(::Buttplug::ClientMessage_StopScanning)},
        { 40, -1, -1, sizeof(::Buttplug::ClientMessage_StopAllDevices)},
        { 48, -1, -1, sizeof(::Buttplug::ClientMessage_Disconnect)},
        { 56, -1, -1, sizeof(::Buttplug::ClientMessage_Ping)},
        { 64, -1, -1, sizeof(::Buttplug::ClientMessage_FFIMessage)},
        { 80, -1, -1, sizeof(::Buttplug::ClientMessage)},
        { 90, -1, -1, sizeof(::Buttplug::DeviceMessage_VibrateComponent)},
        { 100, -1, -1, sizeof(::Buttplug::DeviceMessage_VibrateCmd)},
        { 109, -1, -1, sizeof(::Buttplug::DeviceMessage_RotateComponent)},
        { 120, -1, -1, sizeof(::Buttplug::DeviceMessage_RotateCmd)},
        { 129, -1, -1, sizeof(::Buttplug::DeviceMessage_LinearComponent)},
        { 140, -1, -1, sizeof(::Buttplug::DeviceMessage_LinearCmd)},
        { 149, -1, -1, sizeof(::Buttplug::DeviceMessage_StopDeviceCmd)},
        { 157, -1, -1, sizeof(::Buttplug::DeviceMessage_RawReadCmd)},
        { 169, -1, -1, sizeof(::Buttplug::DeviceMessage_RawWriteCmd)},
        { 180, -1, -1, sizeof(::Buttplug::DeviceMessage_RawSubscribeCmd)},
        { 189, -1, -1, sizeof(::Buttplug::DeviceMessage_RawUnsubscribeCmd)},
        { 198, -1, -1, sizeof(::Buttplug::DeviceMessage_BatteryLevelCmd)},
        { 206, -1, -1, sizeof(::Buttplug::DeviceMessage_RSSILevelCmd)},
        { 214, -1, -1, sizeof(::Buttplug::DeviceMessage_FFIMessage)},
        { 233, -1, -1, sizeof(::Buttplug::DeviceMessage)},
        { 244, -1, -1, sizeof(::Buttplug::ServerMessage_MessageAttributes)},
        { 257, -1, -1, sizeof(::Buttplug::ServerMessage_Ok)},
        { 265, -1, -1, sizeof(::Buttplug::ServerMessage_Error)},
        { 276, -1, -1, sizeof(::Buttplug::ServerMessage_ScanningFinished)},
        { 284, -1, -1, sizeof(::Buttplug::ServerMessage_DeviceAdded)},
        { 295, -1, -1, sizeof(::Buttplug::ServerMessage_DeviceRemoved)},
        { 304, -1, -1, sizeof(::Buttplug::ServerMessage_Disconnect)},
        { 312, -1, -1, sizeof(::Buttplug::ServerMessage)},
        { 327, -1, -1, sizeof(::Buttplug::DeviceEvent_Disconnect)},
        { 336, -1, -1, sizeof(::Buttplug::DeviceEvent_RawReading)},
        { 347, -1, -1, sizeof(::Buttplug::DeviceEvent_BatteryLevelReading)},
        { 357, -1, -1, sizeof(::Buttplug::DeviceEvent_RSSILevelReading)},
        { 367, -1, -1, sizeof(::Buttplug::DeviceEvent)},
        { 380, -1, -1, sizeof(::Buttplug::ButtplugFFIServerMessage_FFIMessage)},
        { 391, -1, -1, sizeof(::Buttplug::ButtplugFFIServerMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Buttplug::_ClientMessage_ConnectLocal_default_instance_._instance,
    &::Buttplug::_ClientMessage_ConnectWebsocket_default_instance_._instance,
    &::Buttplug::_ClientMessage_StartScanning_default_instance_._instance,
    &::Buttplug::_ClientMessage_StopScanning_default_instance_._instance,
    &::Buttplug::_ClientMessage_StopAllDevices_default_instance_._instance,
    &::Buttplug::_ClientMessage_Disconnect_default_instance_._instance,
    &::Buttplug::_ClientMessage_Ping_default_instance_._instance,
    &::Buttplug::_ClientMessage_FFIMessage_default_instance_._instance,
    &::Buttplug::_ClientMessage_default_instance_._instance,
    &::Buttplug::_DeviceMessage_VibrateComponent_default_instance_._instance,
    &::Buttplug::_DeviceMessage_VibrateCmd_default_instance_._instance,
    &::Buttplug::_DeviceMessage_RotateComponent_default_instance_._instance,
    &::Buttplug::_DeviceMessage_RotateCmd_default_instance_._instance,
    &::Buttplug::_DeviceMessage_LinearComponent_default_instance_._instance,
    &::Buttplug::_DeviceMessage_LinearCmd_default_instance_._instance,
    &::Buttplug::_DeviceMessage_StopDeviceCmd_default_instance_._instance,
    &::Buttplug::_DeviceMessage_RawReadCmd_default_instance_._instance,
    &::Buttplug::_DeviceMessage_RawWriteCmd_default_instance_._instance,
    &::Buttplug::_DeviceMessage_RawSubscribeCmd_default_instance_._instance,
    &::Buttplug::_DeviceMessage_RawUnsubscribeCmd_default_instance_._instance,
    &::Buttplug::_DeviceMessage_BatteryLevelCmd_default_instance_._instance,
    &::Buttplug::_DeviceMessage_RSSILevelCmd_default_instance_._instance,
    &::Buttplug::_DeviceMessage_FFIMessage_default_instance_._instance,
    &::Buttplug::_DeviceMessage_default_instance_._instance,
    &::Buttplug::_ServerMessage_MessageAttributes_default_instance_._instance,
    &::Buttplug::_ServerMessage_Ok_default_instance_._instance,
    &::Buttplug::_ServerMessage_Error_default_instance_._instance,
    &::Buttplug::_ServerMessage_ScanningFinished_default_instance_._instance,
    &::Buttplug::_ServerMessage_DeviceAdded_default_instance_._instance,
    &::Buttplug::_ServerMessage_DeviceRemoved_default_instance_._instance,
    &::Buttplug::_ServerMessage_Disconnect_default_instance_._instance,
    &::Buttplug::_ServerMessage_default_instance_._instance,
    &::Buttplug::_DeviceEvent_Disconnect_default_instance_._instance,
    &::Buttplug::_DeviceEvent_RawReading_default_instance_._instance,
    &::Buttplug::_DeviceEvent_BatteryLevelReading_default_instance_._instance,
    &::Buttplug::_DeviceEvent_RSSILevelReading_default_instance_._instance,
    &::Buttplug::_DeviceEvent_default_instance_._instance,
    &::Buttplug::_ButtplugFFIServerMessage_FFIMessage_default_instance_._instance,
    &::Buttplug::_ButtplugFFIServerMessage_default_instance_._instance,
};
const char descriptor_table_protodef_buttplug_5frs_5fffi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025buttplug_rs_ffi.proto\022\010Buttplug\"\356\007\n\rCl"
    "ientMessage\022\n\n\002id\030\001 \001(\r\0223\n\007message\030\002 \001(\013"
    "2\".Buttplug.ClientMessage.FFIMessage\032\275\001\n"
    "\014ConnectLocal\022\023\n\013server_name\030\001 \001(\t\022\025\n\rma"
    "x_ping_time\030\002 \001(\r\022\032\n\022allow_raw_messages\030"
    "\003 \001(\010\022!\n\031device_configuration_json\030\004 \001(\t"
    "\022&\n\036user_device_configuration_json\030\005 \001(\t"
    "\022\032\n\022comm_manager_types\030\006 \001(\r\032E\n\020ConnectW"
    "ebsocket\022\017\n\007address\030\001 \001(\t\022 \n\030bypass_cert"
    "_verification\030\002 \001(\010\032\017\n\rStartScanning\032\016\n\014"
    "StopScanning\032\020\n\016StopAllDevices\032\014\n\nDiscon"
    "nect\032\006\n\004Ping\032\305\003\n\nFFIMessage\022=\n\rconnect_l"
    "ocal\030\001 \001(\0132$.Buttplug.ClientMessage.Conn"
    "ectLocalH\000\022E\n\021connect_websocket\030\002 \001(\0132(."
    "Buttplug.ClientMessage.ConnectWebsocketH"
    "\000\022\?\n\016start_scanning\030\003 \001(\0132%.Buttplug.Cli"
    "entMessage.StartScanningH\000\022=\n\rstop_scann"
    "ing\030\004 \001(\0132$.Buttplug.ClientMessage.StopS"
    "canningH\000\022B\n\020stop_all_devices\030\005 \001(\0132&.Bu"
    "ttplug.ClientMessage.StopAllDevicesH\000\0228\n"
    "\ndisconnect\030\006 \001(\0132\".Buttplug.ClientMessa"
    "ge.DisconnectH\000\022,\n\004ping\030\007 \001(\0132\034.Buttplug"
    ".ClientMessage.PingH\000B\005\n\003msg\"\203\001\n\037DeviceC"
    "ommunicationManagerTypes\022\007\n\003All\020\000\022\014\n\010Btl"
    "eplug\020\001\022\n\n\006XInput\020\002\022\016\n\nSerialPort\020\004\022\024\n\020L"
    "ovenseHIDDongle\020\010\022\027\n\023LovenseSerialDongle"
    "\020\020\"\376\013\n\rDeviceMessage\022\n\n\002id\030\001 \001(\r\022\r\n\005inde"
    "x\030\002 \001(\r\0223\n\007message\030\003 \001(\0132\".Buttplug.Devi"
    "ceMessage.FFIMessage\0320\n\020VibrateComponent"
    "\022\r\n\005index\030\001 \001(\r\022\r\n\005speed\030\002 \001(\001\032F\n\nVibrat"
    "eCmd\0228\n\006speeds\030\001 \003(\0132(.Buttplug.DeviceMe"
    "ssage.VibrateComponent\032B\n\017RotateComponen"
    "t\022\r\n\005index\030\001 \001(\r\022\r\n\005speed\030\002 \001(\001\022\021\n\tclock"
    "wise\030\003 \001(\010\032G\n\tRotateCmd\022:\n\trotations\030\001 \003"
    "(\0132\'.Buttplug.DeviceMessage.RotateCompon"
    "ent\032D\n\017LinearComponent\022\r\n\005index\030\001 \001(\r\022\020\n"
    "\010duration\030\002 \001(\r\022\020\n\010position\030\003 \001(\001\032G\n\tLin"
    "earCmd\022:\n\tmovements\030\001 \003(\0132\'.Buttplug.Dev"
    "iceMessage.LinearComponent\032\017\n\rStopDevice"
    "Cmd\032j\n\nRawReadCmd\022$\n\010endpoint\030\001 \001(\0162\022.Bu"
    "ttplug.Endpoint\022\014\n\004data\030\002 \001(\014\022\027\n\017expecte"
    "d_length\030\003 \001(\r\022\017\n\007timeout\030\004 \001(\r\032^\n\013RawWr"
    "iteCmd\022$\n\010endpoint\030\001 \001(\0162\022.Buttplug.Endp"
    "oint\022\014\n\004data\030\002 \001(\014\022\033\n\023write_with_respons"
    "e\030\003 \001(\010\0327\n\017RawSubscribeCmd\022$\n\010endpoint\030\001"
    " \001(\0162\022.Buttplug.Endpoint\0329\n\021RawUnsubscri"
    "beCmd\022$\n\010endpoint\030\001 \001(\0162\022.Buttplug.Endpo"
    "int\032\021\n\017BatteryLevelCmd\032\016\n\014RSSILevelCmd\032\222"
    "\005\n\nFFIMessage\0229\n\013vibrate_cmd\030\001 \001(\0132\".But"
    "tplug.DeviceMessage.VibrateCmdH\000\0227\n\nrota"
    "te_cmd\030\002 \001(\0132!.Buttplug.DeviceMessage.Ro"
    "tateCmdH\000\0227\n\nlinear_cmd\030\003 \001(\0132!.Buttplug"
    ".DeviceMessage.LinearCmdH\000\022@\n\017stop_devic"
    "e_cmd\030\004 \001(\0132%.Buttplug.DeviceMessage.Sto"
    "pDeviceCmdH\000\022:\n\014raw_read_cmd\030\005 \001(\0132\".But"
    "tplug.DeviceMessage.RawReadCmdH\000\022<\n\rraw_"
    "write_cmd\030\006 \001(\0132#.Buttplug.DeviceMessage"
    ".RawWriteCmdH\000\022D\n\021raw_subscribe_cmd\030\007 \001("
    "\0132\'.Buttplug.DeviceMessage.RawSubscribeC"
    "mdH\000\022H\n\023raw_unsubscribe_cmd\030\010 \001(\0132).Butt"
    "plug.DeviceMessage.RawUnsubscribeCmdH\000\022D"
    "\n\021battery_level_cmd\030\t \001(\0132\'.Buttplug.Dev"
    "iceMessage.BatteryLevelCmdH\000\022>\n\016rssi_lev"
    "el_cmd\030\n \001(\0132$.Buttplug.DeviceMessage.RS"
    "SILevelCmdH\000B\005\n\003msg\"\330\t\n\rServerMessage\022(\n"
    "\002ok\030\001 \001(\0132\032.Buttplug.ServerMessage.OkH\000\022"
    ".\n\005error\030\002 \001(\0132\035.Buttplug.ServerMessage."
    "ErrorH\000\022E\n\021scanning_finished\030\003 \001(\0132(.But"
    "tplug.ServerMessage.ScanningFinishedH\000\022;"
    "\n\014device_added\030\004 \001(\0132#.Buttplug.ServerMe"
    "ssage.DeviceAddedH\000\022\?\n\016device_removed\030\005 "
    "\001(\0132%.Buttplug.ServerMessage.DeviceRemov"
    "edH\000\0228\n\ndisconnect\030\006 \001(\0132\".Buttplug.Serv"
    "erMessage.DisconnectH\000\032\277\001\n\021MessageAttrib"
    "utes\022B\n\014message_type\030\001 \001(\0162,.Buttplug.Se"
    "rverMessage.MessageAttributeType\022\025\n\rfeat"
    "ure_count\030\002 \001(\r\022\022\n\nstep_count\030\003 \003(\r\022%\n\te"
    "ndpoints\030\004 \003(\0162\022.Buttplug.Endpoint\022\024\n\014ma"
    "x_duration\030\005 \003(\r\032\004\n\002Ok\032j\n\005Error\022=\n\nerror"
    "_type\030\001 \001(\0162).Buttplug.ServerMessage.But"
    "tplugErrorType\022\017\n\007message\030\002 \001(\t\022\021\n\tbackt"
    "race\030\003 \001(\t\032\022\n\020ScanningFinished\032q\n\013Device"
    "Added\022\014\n\004name\030\001 \001(\t\022\r\n\005index\030\002 \001(\r\022E\n\022me"
    "ssage_attributes\030\003 \003(\0132).Buttplug.Server"
    "Message.MessageAttributes\032\036\n\rDeviceRemov"
    "ed\022\r\n\005index\030\001 \001(\r\032\014\n\nDisconnect\"\257\001\n\021Butt"
    "plugErrorType\022\032\n\026ButtplugConnectorError\020"
    "\000\022\032\n\026ButtplugHandshakeError\020\001\022\027\n\023Buttplu"
    "gDeviceError\020\002\022\025\n\021ButtplugPingError\020\003\022\030\n"
    "\024ButtplugMessageError\020\004\022\030\n\024ButtplugUnkno"
    "wnError\020\005\"\313\001\n\024MessageAttributeType\022\016\n\nVi"
    "brateCmd\020\000\022\r\n\tRotateCmd\020\001\022\r\n\tLinearCmd\020\002"
    "\022\021\n\rStopDeviceCmd\020\003\022\016\n\nRawReadCmd\020\004\022\017\n\013R"
    "awWriteCmd\020\005\022\023\n\017RawSubscribeCmd\020\006\022\025\n\021Raw"
    "UnsubscribeCmd\020\007\022\023\n\017BatteryLevelCmd\020\010\022\020\n"
    "\014RSSILevelCmd\020\tB\005\n\003msg\"\360\003\n\013DeviceEvent\0226"
    "\n\ndisconnect\030\001 \001(\0132 .Buttplug.DeviceEven"
    "t.DisconnectH\000\022J\n\025battery_level_reading\030"
    "\002 \001(\0132).Buttplug.DeviceEvent.BatteryLeve"
    "lReadingH\000\022D\n\022rssi_level_reading\030\003 \001(\0132&"
    ".Buttplug.DeviceEvent.RSSILevelReadingH\000"
    "\0227\n\013raw_reading\030\004 \001(\0132 .Buttplug.DeviceE"
    "vent.RawReadingH\000\032\033\n\nDisconnect\022\r\n\005index"
    "\030\001 \001(\r\032O\n\nRawReading\022\r\n\005index\030\001 \001(\r\022$\n\010e"
    "ndpoint\030\002 \001(\0162\022.Buttplug.Endpoint\022\014\n\004dat"
    "a\030\003 \001(\014\0325\n\023BatteryLevelReading\022\r\n\005index\030"
    "\001 \001(\r\022\017\n\007reading\030\002 \001(\001\0322\n\020RSSILevelReadi"
    "ng\022\r\n\005index\030\001 \001(\r\022\017\n\007reading\030\002 \001(\005B\005\n\003ms"
    "g\"\335\001\n\030ButtplugFFIServerMessage\022\n\n\002id\030\001 \001"
    "(\r\022>\n\007message\030\002 \001(\0132-.Buttplug.ButtplugF"
    "FIServerMessage.FFIMessage\032u\n\nFFIMessage"
    "\0221\n\016server_message\030\001 \001(\0132\027.Buttplug.Serv"
    "erMessageH\000\022-\n\014device_event\030\002 \001(\0132\025.Butt"
    "plug.DeviceEventH\000B\005\n\003msg*\243\005\n\010Endpoint\022\013"
    "\n\007Command\020\000\022\014\n\010Firmware\020\001\022\006\n\002Rx\020\002\022\013\n\007RxA"
    "ccel\020\003\022\020\n\014RxBLEBattery\020\004\022\016\n\nRxPressure\020\005"
    "\022\013\n\007RxTouch\020\006\022\006\n\002Tx\020\007\022\n\n\006TxMode\020\010\022\013\n\007TxS"
    "hock\020\t\022\r\n\tTxVibrate\020\n\022\023\n\017TxVendorControl"
    "\020\013\022\r\n\tWhitelist\020\014\022\014\n\010Generic0\020\r\022\014\n\010Gener"
    "ic1\020\016\022\014\n\010Generic2\020\017\022\014\n\010Generic3\020\020\022\014\n\010Gen"
    "eric4\020\021\022\014\n\010Generic5\020\022\022\014\n\010Generic6\020\023\022\014\n\010G"
    "eneric7\020\024\022\014\n\010Generic8\020\025\022\014\n\010Generic9\020\026\022\r\n"
    "\tGeneric10\020\027\022\r\n\tGeneric11\020\030\022\r\n\tGeneric12"
    "\020\031\022\r\n\tGeneric13\020\032\022\r\n\tGeneric14\020\033\022\r\n\tGene"
    "ric15\020\034\022\r\n\tGeneric16\020\035\022\r\n\tGeneric17\020\036\022\r\n"
    "\tGeneric18\020\037\022\r\n\tGeneric19\020 \022\r\n\tGeneric20"
    "\020!\022\r\n\tGeneric21\020\"\022\r\n\tGeneric22\020#\022\r\n\tGene"
    "ric23\020$\022\r\n\tGeneric24\020%\022\r\n\tGeneric25\020&\022\r\n"
    "\tGeneric26\020\'\022\r\n\tGeneric27\020(\022\r\n\tGeneric28"
    "\020)\022\r\n\tGeneric29\020*\022\r\n\tGeneric30\020+\022\r\n\tGene"
    "ric31\020,\022\016\n\nRxBLEModel\020-B\024\n\022io.buttplug.p"
    "rotosb\006proto3"
};
static ::absl::once_flag descriptor_table_buttplug_5frs_5fffi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_buttplug_5frs_5fffi_2eproto = {
    false,
    false,
    5253,
    descriptor_table_protodef_buttplug_5frs_5fffi_2eproto,
    "buttplug_rs_ffi.proto",
    &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
    nullptr,
    0,
    39,
    schemas,
    file_default_instances,
    TableStruct_buttplug_5frs_5fffi_2eproto::offsets,
    file_level_metadata_buttplug_5frs_5fffi_2eproto,
    file_level_enum_descriptors_buttplug_5frs_5fffi_2eproto,
    file_level_service_descriptors_buttplug_5frs_5fffi_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_buttplug_5frs_5fffi_2eproto_getter() {
  return &descriptor_table_buttplug_5frs_5fffi_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_buttplug_5frs_5fffi_2eproto(&descriptor_table_buttplug_5frs_5fffi_2eproto);
namespace Buttplug {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_DeviceCommunicationManagerTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_buttplug_5frs_5fffi_2eproto);
  return file_level_enum_descriptors_buttplug_5frs_5fffi_2eproto[0];
}
bool ClientMessage_DeviceCommunicationManagerTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ClientMessage_DeviceCommunicationManagerTypes ClientMessage::All;
constexpr ClientMessage_DeviceCommunicationManagerTypes ClientMessage::Btleplug;
constexpr ClientMessage_DeviceCommunicationManagerTypes ClientMessage::XInput;
constexpr ClientMessage_DeviceCommunicationManagerTypes ClientMessage::SerialPort;
constexpr ClientMessage_DeviceCommunicationManagerTypes ClientMessage::LovenseHIDDongle;
constexpr ClientMessage_DeviceCommunicationManagerTypes ClientMessage::LovenseSerialDongle;
constexpr ClientMessage_DeviceCommunicationManagerTypes ClientMessage::DeviceCommunicationManagerTypes_MIN;
constexpr ClientMessage_DeviceCommunicationManagerTypes ClientMessage::DeviceCommunicationManagerTypes_MAX;
constexpr int ClientMessage::DeviceCommunicationManagerTypes_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessage_ButtplugErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_buttplug_5frs_5fffi_2eproto);
  return file_level_enum_descriptors_buttplug_5frs_5fffi_2eproto[1];
}
bool ServerMessage_ButtplugErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ServerMessage_ButtplugErrorType ServerMessage::ButtplugConnectorError;
constexpr ServerMessage_ButtplugErrorType ServerMessage::ButtplugHandshakeError;
constexpr ServerMessage_ButtplugErrorType ServerMessage::ButtplugDeviceError;
constexpr ServerMessage_ButtplugErrorType ServerMessage::ButtplugPingError;
constexpr ServerMessage_ButtplugErrorType ServerMessage::ButtplugMessageError;
constexpr ServerMessage_ButtplugErrorType ServerMessage::ButtplugUnknownError;
constexpr ServerMessage_ButtplugErrorType ServerMessage::ButtplugErrorType_MIN;
constexpr ServerMessage_ButtplugErrorType ServerMessage::ButtplugErrorType_MAX;
constexpr int ServerMessage::ButtplugErrorType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessage_MessageAttributeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_buttplug_5frs_5fffi_2eproto);
  return file_level_enum_descriptors_buttplug_5frs_5fffi_2eproto[2];
}
bool ServerMessage_MessageAttributeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ServerMessage_MessageAttributeType ServerMessage::VibrateCmd;
constexpr ServerMessage_MessageAttributeType ServerMessage::RotateCmd;
constexpr ServerMessage_MessageAttributeType ServerMessage::LinearCmd;
constexpr ServerMessage_MessageAttributeType ServerMessage::StopDeviceCmd;
constexpr ServerMessage_MessageAttributeType ServerMessage::RawReadCmd;
constexpr ServerMessage_MessageAttributeType ServerMessage::RawWriteCmd;
constexpr ServerMessage_MessageAttributeType ServerMessage::RawSubscribeCmd;
constexpr ServerMessage_MessageAttributeType ServerMessage::RawUnsubscribeCmd;
constexpr ServerMessage_MessageAttributeType ServerMessage::BatteryLevelCmd;
constexpr ServerMessage_MessageAttributeType ServerMessage::RSSILevelCmd;
constexpr ServerMessage_MessageAttributeType ServerMessage::MessageAttributeType_MIN;
constexpr ServerMessage_MessageAttributeType ServerMessage::MessageAttributeType_MAX;
constexpr int ServerMessage::MessageAttributeType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Endpoint_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_buttplug_5frs_5fffi_2eproto);
  return file_level_enum_descriptors_buttplug_5frs_5fffi_2eproto[3];
}
bool Endpoint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ClientMessage_ConnectLocal::_Internal {
 public:
};

ClientMessage_ConnectLocal::ClientMessage_ConnectLocal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ClientMessage.ConnectLocal)
}
ClientMessage_ConnectLocal::ClientMessage_ConnectLocal(const ClientMessage_ConnectLocal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientMessage_ConnectLocal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_name_){}
    , decltype(_impl_.device_configuration_json_){}
    , decltype(_impl_.user_device_configuration_json_){}
    , decltype(_impl_.max_ping_time_){}
    , decltype(_impl_.allow_raw_messages_){}
    , decltype(_impl_.comm_manager_types_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_name().empty()) {
    _this->_impl_.server_name_.Set(from._internal_server_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_configuration_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_configuration_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_configuration_json().empty()) {
    _this->_impl_.device_configuration_json_.Set(from._internal_device_configuration_json(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_device_configuration_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_device_configuration_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_device_configuration_json().empty()) {
    _this->_impl_.user_device_configuration_json_.Set(from._internal_user_device_configuration_json(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_ping_time_, &from._impl_.max_ping_time_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.comm_manager_types_) -
    reinterpret_cast<char*>(&_impl_.max_ping_time_)) + sizeof(_impl_.comm_manager_types_));
  // @@protoc_insertion_point(copy_constructor:Buttplug.ClientMessage.ConnectLocal)
}

inline void ClientMessage_ConnectLocal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_name_){}
    , decltype(_impl_.device_configuration_json_){}
    , decltype(_impl_.user_device_configuration_json_){}
    , decltype(_impl_.max_ping_time_){0u}
    , decltype(_impl_.allow_raw_messages_){false}
    , decltype(_impl_.comm_manager_types_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.server_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_configuration_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_configuration_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_device_configuration_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_device_configuration_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientMessage_ConnectLocal::~ClientMessage_ConnectLocal() {
  // @@protoc_insertion_point(destructor:Buttplug.ClientMessage.ConnectLocal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientMessage_ConnectLocal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_name_.Destroy();
  _impl_.device_configuration_json_.Destroy();
  _impl_.user_device_configuration_json_.Destroy();
}

void ClientMessage_ConnectLocal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientMessage_ConnectLocal::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ClientMessage.ConnectLocal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_name_.ClearToEmpty();
  _impl_.device_configuration_json_.ClearToEmpty();
  _impl_.user_device_configuration_json_.ClearToEmpty();
  ::memset(&_impl_.max_ping_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.comm_manager_types_) -
      reinterpret_cast<char*>(&_impl_.max_ping_time_)) + sizeof(_impl_.comm_manager_types_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMessage_ConnectLocal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string server_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_server_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Buttplug.ClientMessage.ConnectLocal.server_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 max_ping_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.max_ping_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool allow_raw_messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.allow_raw_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string device_configuration_json = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_device_configuration_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Buttplug.ClientMessage.ConnectLocal.device_configuration_json"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_device_configuration_json = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_device_configuration_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Buttplug.ClientMessage.ConnectLocal.user_device_configuration_json"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 comm_manager_types = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.comm_manager_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientMessage_ConnectLocal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ClientMessage.ConnectLocal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_name = 1;
  if (!this->_internal_server_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_name().data(), static_cast<int>(this->_internal_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Buttplug.ClientMessage.ConnectLocal.server_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_name(), target);
  }

  // uint32 max_ping_time = 2;
  if (this->_internal_max_ping_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_ping_time(), target);
  }

  // bool allow_raw_messages = 3;
  if (this->_internal_allow_raw_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_raw_messages(), target);
  }

  // string device_configuration_json = 4;
  if (!this->_internal_device_configuration_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_configuration_json().data(), static_cast<int>(this->_internal_device_configuration_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Buttplug.ClientMessage.ConnectLocal.device_configuration_json");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_configuration_json(), target);
  }

  // string user_device_configuration_json = 5;
  if (!this->_internal_user_device_configuration_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_device_configuration_json().data(), static_cast<int>(this->_internal_user_device_configuration_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Buttplug.ClientMessage.ConnectLocal.user_device_configuration_json");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_device_configuration_json(), target);
  }

  // uint32 comm_manager_types = 6;
  if (this->_internal_comm_manager_types() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_comm_manager_types(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ClientMessage.ConnectLocal)
  return target;
}

::size_t ClientMessage_ConnectLocal::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ClientMessage.ConnectLocal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_name = 1;
  if (!this->_internal_server_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_name());
  }

  // string device_configuration_json = 4;
  if (!this->_internal_device_configuration_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_configuration_json());
  }

  // string user_device_configuration_json = 5;
  if (!this->_internal_user_device_configuration_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_device_configuration_json());
  }

  // uint32 max_ping_time = 2;
  if (this->_internal_max_ping_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_ping_time());
  }

  // bool allow_raw_messages = 3;
  if (this->_internal_allow_raw_messages() != 0) {
    total_size += 1 + 1;
  }

  // uint32 comm_manager_types = 6;
  if (this->_internal_comm_manager_types() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_comm_manager_types());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage_ConnectLocal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientMessage_ConnectLocal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage_ConnectLocal::GetClassData() const { return &_class_data_; }


void ClientMessage_ConnectLocal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientMessage_ConnectLocal*>(&to_msg);
  auto& from = static_cast<const ClientMessage_ConnectLocal&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ClientMessage.ConnectLocal)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_name().empty()) {
    _this->_internal_set_server_name(from._internal_server_name());
  }
  if (!from._internal_device_configuration_json().empty()) {
    _this->_internal_set_device_configuration_json(from._internal_device_configuration_json());
  }
  if (!from._internal_user_device_configuration_json().empty()) {
    _this->_internal_set_user_device_configuration_json(from._internal_user_device_configuration_json());
  }
  if (from._internal_max_ping_time() != 0) {
    _this->_internal_set_max_ping_time(from._internal_max_ping_time());
  }
  if (from._internal_allow_raw_messages() != 0) {
    _this->_internal_set_allow_raw_messages(from._internal_allow_raw_messages());
  }
  if (from._internal_comm_manager_types() != 0) {
    _this->_internal_set_comm_manager_types(from._internal_comm_manager_types());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientMessage_ConnectLocal::CopyFrom(const ClientMessage_ConnectLocal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ClientMessage.ConnectLocal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_ConnectLocal::IsInitialized() const {
  return true;
}

void ClientMessage_ConnectLocal::InternalSwap(ClientMessage_ConnectLocal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_name_, lhs_arena,
      &other->_impl_.server_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_configuration_json_, lhs_arena,
      &other->_impl_.device_configuration_json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_device_configuration_json_, lhs_arena,
      &other->_impl_.user_device_configuration_json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientMessage_ConnectLocal, _impl_.comm_manager_types_)
      + sizeof(ClientMessage_ConnectLocal::_impl_.comm_manager_types_)
      - PROTOBUF_FIELD_OFFSET(ClientMessage_ConnectLocal, _impl_.max_ping_time_)>(
          reinterpret_cast<char*>(&_impl_.max_ping_time_),
          reinterpret_cast<char*>(&other->_impl_.max_ping_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_ConnectLocal::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[0]);
}
// ===================================================================

class ClientMessage_ConnectWebsocket::_Internal {
 public:
};

ClientMessage_ConnectWebsocket::ClientMessage_ConnectWebsocket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ClientMessage.ConnectWebsocket)
}
ClientMessage_ConnectWebsocket::ClientMessage_ConnectWebsocket(const ClientMessage_ConnectWebsocket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientMessage_ConnectWebsocket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.bypass_cert_verification_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bypass_cert_verification_ = from._impl_.bypass_cert_verification_;
  // @@protoc_insertion_point(copy_constructor:Buttplug.ClientMessage.ConnectWebsocket)
}

inline void ClientMessage_ConnectWebsocket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.bypass_cert_verification_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientMessage_ConnectWebsocket::~ClientMessage_ConnectWebsocket() {
  // @@protoc_insertion_point(destructor:Buttplug.ClientMessage.ConnectWebsocket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientMessage_ConnectWebsocket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void ClientMessage_ConnectWebsocket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientMessage_ConnectWebsocket::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ClientMessage.ConnectWebsocket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.bypass_cert_verification_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMessage_ConnectWebsocket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Buttplug.ClientMessage.ConnectWebsocket.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool bypass_cert_verification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.bypass_cert_verification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientMessage_ConnectWebsocket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ClientMessage.ConnectWebsocket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Buttplug.ClientMessage.ConnectWebsocket.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool bypass_cert_verification = 2;
  if (this->_internal_bypass_cert_verification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bypass_cert_verification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ClientMessage.ConnectWebsocket)
  return target;
}

::size_t ClientMessage_ConnectWebsocket::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ClientMessage.ConnectWebsocket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool bypass_cert_verification = 2;
  if (this->_internal_bypass_cert_verification() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage_ConnectWebsocket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientMessage_ConnectWebsocket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage_ConnectWebsocket::GetClassData() const { return &_class_data_; }


void ClientMessage_ConnectWebsocket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientMessage_ConnectWebsocket*>(&to_msg);
  auto& from = static_cast<const ClientMessage_ConnectWebsocket&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ClientMessage.ConnectWebsocket)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_bypass_cert_verification() != 0) {
    _this->_internal_set_bypass_cert_verification(from._internal_bypass_cert_verification());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientMessage_ConnectWebsocket::CopyFrom(const ClientMessage_ConnectWebsocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ClientMessage.ConnectWebsocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_ConnectWebsocket::IsInitialized() const {
  return true;
}

void ClientMessage_ConnectWebsocket::InternalSwap(ClientMessage_ConnectWebsocket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.bypass_cert_verification_, other->_impl_.bypass_cert_verification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_ConnectWebsocket::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[1]);
}
// ===================================================================

class ClientMessage_StartScanning::_Internal {
 public:
};

ClientMessage_StartScanning::ClientMessage_StartScanning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.ClientMessage.StartScanning)
}
ClientMessage_StartScanning::ClientMessage_StartScanning(const ClientMessage_StartScanning& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ClientMessage_StartScanning* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.ClientMessage.StartScanning)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage_StartScanning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage_StartScanning::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_StartScanning::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[2]);
}
// ===================================================================

class ClientMessage_StopScanning::_Internal {
 public:
};

ClientMessage_StopScanning::ClientMessage_StopScanning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.ClientMessage.StopScanning)
}
ClientMessage_StopScanning::ClientMessage_StopScanning(const ClientMessage_StopScanning& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ClientMessage_StopScanning* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.ClientMessage.StopScanning)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage_StopScanning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage_StopScanning::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_StopScanning::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[3]);
}
// ===================================================================

class ClientMessage_StopAllDevices::_Internal {
 public:
};

ClientMessage_StopAllDevices::ClientMessage_StopAllDevices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.ClientMessage.StopAllDevices)
}
ClientMessage_StopAllDevices::ClientMessage_StopAllDevices(const ClientMessage_StopAllDevices& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ClientMessage_StopAllDevices* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.ClientMessage.StopAllDevices)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage_StopAllDevices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage_StopAllDevices::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_StopAllDevices::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[4]);
}
// ===================================================================

class ClientMessage_Disconnect::_Internal {
 public:
};

ClientMessage_Disconnect::ClientMessage_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.ClientMessage.Disconnect)
}
ClientMessage_Disconnect::ClientMessage_Disconnect(const ClientMessage_Disconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ClientMessage_Disconnect* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.ClientMessage.Disconnect)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage_Disconnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage_Disconnect::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_Disconnect::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[5]);
}
// ===================================================================

class ClientMessage_Ping::_Internal {
 public:
};

ClientMessage_Ping::ClientMessage_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.ClientMessage.Ping)
}
ClientMessage_Ping::ClientMessage_Ping(const ClientMessage_Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ClientMessage_Ping* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.ClientMessage.Ping)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage_Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage_Ping::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_Ping::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[6]);
}
// ===================================================================

class ClientMessage_FFIMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::Buttplug::ClientMessage_FFIMessage, _impl_._oneof_case_);
  static const ::Buttplug::ClientMessage_ConnectLocal& connect_local(const ClientMessage_FFIMessage* msg);
  static const ::Buttplug::ClientMessage_ConnectWebsocket& connect_websocket(const ClientMessage_FFIMessage* msg);
  static const ::Buttplug::ClientMessage_StartScanning& start_scanning(const ClientMessage_FFIMessage* msg);
  static const ::Buttplug::ClientMessage_StopScanning& stop_scanning(const ClientMessage_FFIMessage* msg);
  static const ::Buttplug::ClientMessage_StopAllDevices& stop_all_devices(const ClientMessage_FFIMessage* msg);
  static const ::Buttplug::ClientMessage_Disconnect& disconnect(const ClientMessage_FFIMessage* msg);
  static const ::Buttplug::ClientMessage_Ping& ping(const ClientMessage_FFIMessage* msg);
};

const ::Buttplug::ClientMessage_ConnectLocal&
ClientMessage_FFIMessage::_Internal::connect_local(const ClientMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.connect_local_;
}
const ::Buttplug::ClientMessage_ConnectWebsocket&
ClientMessage_FFIMessage::_Internal::connect_websocket(const ClientMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.connect_websocket_;
}
const ::Buttplug::ClientMessage_StartScanning&
ClientMessage_FFIMessage::_Internal::start_scanning(const ClientMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.start_scanning_;
}
const ::Buttplug::ClientMessage_StopScanning&
ClientMessage_FFIMessage::_Internal::stop_scanning(const ClientMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.stop_scanning_;
}
const ::Buttplug::ClientMessage_StopAllDevices&
ClientMessage_FFIMessage::_Internal::stop_all_devices(const ClientMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.stop_all_devices_;
}
const ::Buttplug::ClientMessage_Disconnect&
ClientMessage_FFIMessage::_Internal::disconnect(const ClientMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.disconnect_;
}
const ::Buttplug::ClientMessage_Ping&
ClientMessage_FFIMessage::_Internal::ping(const ClientMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.ping_;
}
void ClientMessage_FFIMessage::set_allocated_connect_local(::Buttplug::ClientMessage_ConnectLocal* connect_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (connect_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connect_local);
    if (message_arena != submessage_arena) {
      connect_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect_local, submessage_arena);
    }
    set_has_connect_local();
    _impl_.msg_.connect_local_ = connect_local;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.FFIMessage.connect_local)
}
void ClientMessage_FFIMessage::set_allocated_connect_websocket(::Buttplug::ClientMessage_ConnectWebsocket* connect_websocket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (connect_websocket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connect_websocket);
    if (message_arena != submessage_arena) {
      connect_websocket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect_websocket, submessage_arena);
    }
    set_has_connect_websocket();
    _impl_.msg_.connect_websocket_ = connect_websocket;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.FFIMessage.connect_websocket)
}
void ClientMessage_FFIMessage::set_allocated_start_scanning(::Buttplug::ClientMessage_StartScanning* start_scanning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (start_scanning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_scanning);
    if (message_arena != submessage_arena) {
      start_scanning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_scanning, submessage_arena);
    }
    set_has_start_scanning();
    _impl_.msg_.start_scanning_ = start_scanning;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.FFIMessage.start_scanning)
}
void ClientMessage_FFIMessage::set_allocated_stop_scanning(::Buttplug::ClientMessage_StopScanning* stop_scanning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (stop_scanning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_scanning);
    if (message_arena != submessage_arena) {
      stop_scanning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_scanning, submessage_arena);
    }
    set_has_stop_scanning();
    _impl_.msg_.stop_scanning_ = stop_scanning;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.FFIMessage.stop_scanning)
}
void ClientMessage_FFIMessage::set_allocated_stop_all_devices(::Buttplug::ClientMessage_StopAllDevices* stop_all_devices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (stop_all_devices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_all_devices);
    if (message_arena != submessage_arena) {
      stop_all_devices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_all_devices, submessage_arena);
    }
    set_has_stop_all_devices();
    _impl_.msg_.stop_all_devices_ = stop_all_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.FFIMessage.stop_all_devices)
}
void ClientMessage_FFIMessage::set_allocated_disconnect(::Buttplug::ClientMessage_Disconnect* disconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (disconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(disconnect);
    if (message_arena != submessage_arena) {
      disconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disconnect, submessage_arena);
    }
    set_has_disconnect();
    _impl_.msg_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.FFIMessage.disconnect)
}
void ClientMessage_FFIMessage::set_allocated_ping(::Buttplug::ClientMessage_Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.msg_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ClientMessage.FFIMessage.ping)
}
ClientMessage_FFIMessage::ClientMessage_FFIMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ClientMessage.FFIMessage)
}
ClientMessage_FFIMessage::ClientMessage_FFIMessage(const ClientMessage_FFIMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientMessage_FFIMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kConnectLocal: {
      _this->_internal_mutable_connect_local()->::Buttplug::ClientMessage_ConnectLocal::MergeFrom(
          from._internal_connect_local());
      break;
    }
    case kConnectWebsocket: {
      _this->_internal_mutable_connect_websocket()->::Buttplug::ClientMessage_ConnectWebsocket::MergeFrom(
          from._internal_connect_websocket());
      break;
    }
    case kStartScanning: {
      _this->_internal_mutable_start_scanning()->::Buttplug::ClientMessage_StartScanning::MergeFrom(
          from._internal_start_scanning());
      break;
    }
    case kStopScanning: {
      _this->_internal_mutable_stop_scanning()->::Buttplug::ClientMessage_StopScanning::MergeFrom(
          from._internal_stop_scanning());
      break;
    }
    case kStopAllDevices: {
      _this->_internal_mutable_stop_all_devices()->::Buttplug::ClientMessage_StopAllDevices::MergeFrom(
          from._internal_stop_all_devices());
      break;
    }
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::Buttplug::ClientMessage_Disconnect::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::Buttplug::ClientMessage_Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Buttplug.ClientMessage.FFIMessage)
}

inline void ClientMessage_FFIMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

ClientMessage_FFIMessage::~ClientMessage_FFIMessage() {
  // @@protoc_insertion_point(destructor:Buttplug.ClientMessage.FFIMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientMessage_FFIMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ClientMessage_FFIMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientMessage_FFIMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:Buttplug.ClientMessage.FFIMessage)
  switch (msg_case()) {
    case kConnectLocal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.connect_local_;
      }
      break;
    }
    case kConnectWebsocket: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.connect_websocket_;
      }
      break;
    }
    case kStartScanning: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.start_scanning_;
      }
      break;
    }
    case kStopScanning: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.stop_scanning_;
      }
      break;
    }
    case kStopAllDevices: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.stop_all_devices_;
      }
      break;
    }
    case kDisconnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.disconnect_;
      }
      break;
    }
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.ping_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void ClientMessage_FFIMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ClientMessage.FFIMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMessage_FFIMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.ClientMessage.ConnectLocal connect_local = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect_local(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ClientMessage.ConnectWebsocket connect_websocket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect_websocket(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ClientMessage.StartScanning start_scanning = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_scanning(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ClientMessage.StopScanning stop_scanning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_scanning(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ClientMessage.StopAllDevices stop_all_devices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_all_devices(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ClientMessage.Disconnect disconnect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_disconnect(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ClientMessage.Ping ping = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientMessage_FFIMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ClientMessage.FFIMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.ClientMessage.ConnectLocal connect_local = 1;
  if (_internal_has_connect_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connect_local(this),
        _Internal::connect_local(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ClientMessage.ConnectWebsocket connect_websocket = 2;
  if (_internal_has_connect_websocket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::connect_websocket(this),
        _Internal::connect_websocket(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ClientMessage.StartScanning start_scanning = 3;
  if (_internal_has_start_scanning()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start_scanning(this),
        _Internal::start_scanning(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ClientMessage.StopScanning stop_scanning = 4;
  if (_internal_has_stop_scanning()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stop_scanning(this),
        _Internal::stop_scanning(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ClientMessage.StopAllDevices stop_all_devices = 5;
  if (_internal_has_stop_all_devices()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stop_all_devices(this),
        _Internal::stop_all_devices(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ClientMessage.Disconnect disconnect = 6;
  if (_internal_has_disconnect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::disconnect(this),
        _Internal::disconnect(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ClientMessage.Ping ping = 7;
  if (_internal_has_ping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ClientMessage.FFIMessage)
  return target;
}

::size_t ClientMessage_FFIMessage::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ClientMessage.FFIMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .Buttplug.ClientMessage.ConnectLocal connect_local = 1;
    case kConnectLocal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.connect_local_);
      break;
    }
    // .Buttplug.ClientMessage.ConnectWebsocket connect_websocket = 2;
    case kConnectWebsocket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.connect_websocket_);
      break;
    }
    // .Buttplug.ClientMessage.StartScanning start_scanning = 3;
    case kStartScanning: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.start_scanning_);
      break;
    }
    // .Buttplug.ClientMessage.StopScanning stop_scanning = 4;
    case kStopScanning: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.stop_scanning_);
      break;
    }
    // .Buttplug.ClientMessage.StopAllDevices stop_all_devices = 5;
    case kStopAllDevices: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.stop_all_devices_);
      break;
    }
    // .Buttplug.ClientMessage.Disconnect disconnect = 6;
    case kDisconnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.disconnect_);
      break;
    }
    // .Buttplug.ClientMessage.Ping ping = 7;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.ping_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage_FFIMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientMessage_FFIMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage_FFIMessage::GetClassData() const { return &_class_data_; }


void ClientMessage_FFIMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientMessage_FFIMessage*>(&to_msg);
  auto& from = static_cast<const ClientMessage_FFIMessage&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ClientMessage.FFIMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kConnectLocal: {
      _this->_internal_mutable_connect_local()->::Buttplug::ClientMessage_ConnectLocal::MergeFrom(
          from._internal_connect_local());
      break;
    }
    case kConnectWebsocket: {
      _this->_internal_mutable_connect_websocket()->::Buttplug::ClientMessage_ConnectWebsocket::MergeFrom(
          from._internal_connect_websocket());
      break;
    }
    case kStartScanning: {
      _this->_internal_mutable_start_scanning()->::Buttplug::ClientMessage_StartScanning::MergeFrom(
          from._internal_start_scanning());
      break;
    }
    case kStopScanning: {
      _this->_internal_mutable_stop_scanning()->::Buttplug::ClientMessage_StopScanning::MergeFrom(
          from._internal_stop_scanning());
      break;
    }
    case kStopAllDevices: {
      _this->_internal_mutable_stop_all_devices()->::Buttplug::ClientMessage_StopAllDevices::MergeFrom(
          from._internal_stop_all_devices());
      break;
    }
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::Buttplug::ClientMessage_Disconnect::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::Buttplug::ClientMessage_Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientMessage_FFIMessage::CopyFrom(const ClientMessage_FFIMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ClientMessage.FFIMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_FFIMessage::IsInitialized() const {
  return true;
}

void ClientMessage_FFIMessage::InternalSwap(ClientMessage_FFIMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_FFIMessage::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[7]);
}
// ===================================================================

class ClientMessage::_Internal {
 public:
  static const ::Buttplug::ClientMessage_FFIMessage& message(const ClientMessage* msg);
};

const ::Buttplug::ClientMessage_FFIMessage&
ClientMessage::_Internal::message(const ClientMessage* msg) {
  return *msg->_impl_.message_;
}
ClientMessage::ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::Buttplug::ClientMessage_FFIMessage(*from._impl_.message_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:Buttplug.ClientMessage)
}

inline void ClientMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){nullptr}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:Buttplug.ClientMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.message_;
}

void ClientMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ClientMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ClientMessage.FFIMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ClientMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .Buttplug.ClientMessage.FFIMessage message = 2;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ClientMessage)
  return target;
}

::size_t ClientMessage::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ClientMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Buttplug.ClientMessage.FFIMessage message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage::GetClassData() const { return &_class_data_; }


void ClientMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientMessage*>(&to_msg);
  auto& from = static_cast<const ClientMessage&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ClientMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::Buttplug::ClientMessage_FFIMessage::MergeFrom(
        from._internal_message());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  return true;
}

void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientMessage, _impl_.id_)
      + sizeof(ClientMessage::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(ClientMessage, _impl_.message_)>(
          reinterpret_cast<char*>(&_impl_.message_),
          reinterpret_cast<char*>(&other->_impl_.message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[8]);
}
// ===================================================================

class DeviceMessage_VibrateComponent::_Internal {
 public:
};

DeviceMessage_VibrateComponent::DeviceMessage_VibrateComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.VibrateComponent)
}
DeviceMessage_VibrateComponent::DeviceMessage_VibrateComponent(const DeviceMessage_VibrateComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.VibrateComponent)
}

inline void DeviceMessage_VibrateComponent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_){0}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceMessage_VibrateComponent::~DeviceMessage_VibrateComponent() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.VibrateComponent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_VibrateComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceMessage_VibrateComponent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_VibrateComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.VibrateComponent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.speed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_VibrateComponent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_VibrateComponent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.VibrateComponent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // double speed = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.VibrateComponent)
  return target;
}

::size_t DeviceMessage_VibrateComponent::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.VibrateComponent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double speed = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 8;
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_VibrateComponent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_VibrateComponent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_VibrateComponent::GetClassData() const { return &_class_data_; }


void DeviceMessage_VibrateComponent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_VibrateComponent*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_VibrateComponent&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.VibrateComponent)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_VibrateComponent::CopyFrom(const DeviceMessage_VibrateComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.VibrateComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_VibrateComponent::IsInitialized() const {
  return true;
}

void DeviceMessage_VibrateComponent::InternalSwap(DeviceMessage_VibrateComponent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceMessage_VibrateComponent, _impl_.index_)
      + sizeof(DeviceMessage_VibrateComponent::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(DeviceMessage_VibrateComponent, _impl_.speed_)>(
          reinterpret_cast<char*>(&_impl_.speed_),
          reinterpret_cast<char*>(&other->_impl_.speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_VibrateComponent::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[9]);
}
// ===================================================================

class DeviceMessage_VibrateCmd::_Internal {
 public:
};

DeviceMessage_VibrateCmd::DeviceMessage_VibrateCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.VibrateCmd)
}
DeviceMessage_VibrateCmd::DeviceMessage_VibrateCmd(const DeviceMessage_VibrateCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceMessage_VibrateCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speeds_){from._impl_.speeds_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.VibrateCmd)
}

inline void DeviceMessage_VibrateCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speeds_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceMessage_VibrateCmd::~DeviceMessage_VibrateCmd() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.VibrateCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_VibrateCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.speeds_.~RepeatedPtrField();
}

void DeviceMessage_VibrateCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_VibrateCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.VibrateCmd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speeds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_VibrateCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Buttplug.DeviceMessage.VibrateComponent speeds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speeds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_VibrateCmd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.VibrateCmd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Buttplug.DeviceMessage.VibrateComponent speeds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speeds_size()); i < n; i++) {
    const auto& repfield = this->_internal_speeds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.VibrateCmd)
  return target;
}

::size_t DeviceMessage_VibrateCmd::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.VibrateCmd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Buttplug.DeviceMessage.VibrateComponent speeds = 1;
  total_size += 1UL * this->_internal_speeds_size();
  for (const auto& msg : this->_impl_.speeds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_VibrateCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_VibrateCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_VibrateCmd::GetClassData() const { return &_class_data_; }


void DeviceMessage_VibrateCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_VibrateCmd*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_VibrateCmd&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.VibrateCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.speeds_.MergeFrom(from._impl_.speeds_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_VibrateCmd::CopyFrom(const DeviceMessage_VibrateCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.VibrateCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_VibrateCmd::IsInitialized() const {
  return true;
}

void DeviceMessage_VibrateCmd::InternalSwap(DeviceMessage_VibrateCmd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.speeds_.InternalSwap(&other->_impl_.speeds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_VibrateCmd::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[10]);
}
// ===================================================================

class DeviceMessage_RotateComponent::_Internal {
 public:
};

DeviceMessage_RotateComponent::DeviceMessage_RotateComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.RotateComponent)
}
DeviceMessage_RotateComponent::DeviceMessage_RotateComponent(const DeviceMessage_RotateComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.RotateComponent)
}

inline void DeviceMessage_RotateComponent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_){0}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.clockwise_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceMessage_RotateComponent::~DeviceMessage_RotateComponent() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.RotateComponent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_RotateComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceMessage_RotateComponent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_RotateComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.RotateComponent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.speed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.clockwise_) -
      reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.clockwise_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_RotateComponent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool clockwise = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.clockwise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_RotateComponent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.RotateComponent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // double speed = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  // bool clockwise = 3;
  if (this->_internal_clockwise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clockwise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.RotateComponent)
  return target;
}

::size_t DeviceMessage_RotateComponent::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.RotateComponent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double speed = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 8;
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // bool clockwise = 3;
  if (this->_internal_clockwise() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_RotateComponent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_RotateComponent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_RotateComponent::GetClassData() const { return &_class_data_; }


void DeviceMessage_RotateComponent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_RotateComponent*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_RotateComponent&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.RotateComponent)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_clockwise() != 0) {
    _this->_internal_set_clockwise(from._internal_clockwise());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_RotateComponent::CopyFrom(const DeviceMessage_RotateComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.RotateComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_RotateComponent::IsInitialized() const {
  return true;
}

void DeviceMessage_RotateComponent::InternalSwap(DeviceMessage_RotateComponent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceMessage_RotateComponent, _impl_.clockwise_)
      + sizeof(DeviceMessage_RotateComponent::_impl_.clockwise_)
      - PROTOBUF_FIELD_OFFSET(DeviceMessage_RotateComponent, _impl_.speed_)>(
          reinterpret_cast<char*>(&_impl_.speed_),
          reinterpret_cast<char*>(&other->_impl_.speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_RotateComponent::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[11]);
}
// ===================================================================

class DeviceMessage_RotateCmd::_Internal {
 public:
};

DeviceMessage_RotateCmd::DeviceMessage_RotateCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.RotateCmd)
}
DeviceMessage_RotateCmd::DeviceMessage_RotateCmd(const DeviceMessage_RotateCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceMessage_RotateCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rotations_){from._impl_.rotations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.RotateCmd)
}

inline void DeviceMessage_RotateCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rotations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceMessage_RotateCmd::~DeviceMessage_RotateCmd() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.RotateCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_RotateCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rotations_.~RepeatedPtrField();
}

void DeviceMessage_RotateCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_RotateCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.RotateCmd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rotations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_RotateCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Buttplug.DeviceMessage.RotateComponent rotations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_RotateCmd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.RotateCmd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Buttplug.DeviceMessage.RotateComponent rotations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_rotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.RotateCmd)
  return target;
}

::size_t DeviceMessage_RotateCmd::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.RotateCmd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Buttplug.DeviceMessage.RotateComponent rotations = 1;
  total_size += 1UL * this->_internal_rotations_size();
  for (const auto& msg : this->_impl_.rotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_RotateCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_RotateCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_RotateCmd::GetClassData() const { return &_class_data_; }


void DeviceMessage_RotateCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_RotateCmd*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_RotateCmd&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.RotateCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rotations_.MergeFrom(from._impl_.rotations_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_RotateCmd::CopyFrom(const DeviceMessage_RotateCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.RotateCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_RotateCmd::IsInitialized() const {
  return true;
}

void DeviceMessage_RotateCmd::InternalSwap(DeviceMessage_RotateCmd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rotations_.InternalSwap(&other->_impl_.rotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_RotateCmd::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[12]);
}
// ===================================================================

class DeviceMessage_LinearComponent::_Internal {
 public:
};

DeviceMessage_LinearComponent::DeviceMessage_LinearComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.LinearComponent)
}
DeviceMessage_LinearComponent::DeviceMessage_LinearComponent(const DeviceMessage_LinearComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.LinearComponent)
}

inline void DeviceMessage_LinearComponent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.position_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceMessage_LinearComponent::~DeviceMessage_LinearComponent() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.LinearComponent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_LinearComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceMessage_LinearComponent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_LinearComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.LinearComponent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.position_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_LinearComponent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_LinearComponent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.LinearComponent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 duration = 2;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // double position = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_position = this->_internal_position();
  ::uint64_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.LinearComponent)
  return target;
}

::size_t DeviceMessage_LinearComponent::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.LinearComponent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 duration = 2;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  // double position = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_position = this->_internal_position();
  ::uint64_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_LinearComponent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_LinearComponent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_LinearComponent::GetClassData() const { return &_class_data_; }


void DeviceMessage_LinearComponent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_LinearComponent*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_LinearComponent&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.LinearComponent)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_position = from._internal_position();
  ::uint64_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_LinearComponent::CopyFrom(const DeviceMessage_LinearComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.LinearComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_LinearComponent::IsInitialized() const {
  return true;
}

void DeviceMessage_LinearComponent::InternalSwap(DeviceMessage_LinearComponent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceMessage_LinearComponent, _impl_.position_)
      + sizeof(DeviceMessage_LinearComponent::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(DeviceMessage_LinearComponent, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_LinearComponent::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[13]);
}
// ===================================================================

class DeviceMessage_LinearCmd::_Internal {
 public:
};

DeviceMessage_LinearCmd::DeviceMessage_LinearCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.LinearCmd)
}
DeviceMessage_LinearCmd::DeviceMessage_LinearCmd(const DeviceMessage_LinearCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceMessage_LinearCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.movements_){from._impl_.movements_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.LinearCmd)
}

inline void DeviceMessage_LinearCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.movements_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceMessage_LinearCmd::~DeviceMessage_LinearCmd() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.LinearCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_LinearCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.movements_.~RepeatedPtrField();
}

void DeviceMessage_LinearCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_LinearCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.LinearCmd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.movements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_LinearCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Buttplug.DeviceMessage.LinearComponent movements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_LinearCmd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.LinearCmd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Buttplug.DeviceMessage.LinearComponent movements = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_movements_size()); i < n; i++) {
    const auto& repfield = this->_internal_movements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.LinearCmd)
  return target;
}

::size_t DeviceMessage_LinearCmd::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.LinearCmd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Buttplug.DeviceMessage.LinearComponent movements = 1;
  total_size += 1UL * this->_internal_movements_size();
  for (const auto& msg : this->_impl_.movements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_LinearCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_LinearCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_LinearCmd::GetClassData() const { return &_class_data_; }


void DeviceMessage_LinearCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_LinearCmd*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_LinearCmd&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.LinearCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.movements_.MergeFrom(from._impl_.movements_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_LinearCmd::CopyFrom(const DeviceMessage_LinearCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.LinearCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_LinearCmd::IsInitialized() const {
  return true;
}

void DeviceMessage_LinearCmd::InternalSwap(DeviceMessage_LinearCmd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.movements_.InternalSwap(&other->_impl_.movements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_LinearCmd::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[14]);
}
// ===================================================================

class DeviceMessage_StopDeviceCmd::_Internal {
 public:
};

DeviceMessage_StopDeviceCmd::DeviceMessage_StopDeviceCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.StopDeviceCmd)
}
DeviceMessage_StopDeviceCmd::DeviceMessage_StopDeviceCmd(const DeviceMessage_StopDeviceCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeviceMessage_StopDeviceCmd* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.StopDeviceCmd)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_StopDeviceCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_StopDeviceCmd::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_StopDeviceCmd::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[15]);
}
// ===================================================================

class DeviceMessage_RawReadCmd::_Internal {
 public:
};

DeviceMessage_RawReadCmd::DeviceMessage_RawReadCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.RawReadCmd)
}
DeviceMessage_RawReadCmd::DeviceMessage_RawReadCmd(const DeviceMessage_RawReadCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceMessage_RawReadCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.expected_length_){}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.endpoint_, &from._impl_.endpoint_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.timeout_) -
    reinterpret_cast<char*>(&_impl_.endpoint_)) + sizeof(_impl_.timeout_));
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.RawReadCmd)
}

inline void DeviceMessage_RawReadCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.endpoint_){0}
    , decltype(_impl_.expected_length_){0u}
    , decltype(_impl_.timeout_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceMessage_RawReadCmd::~DeviceMessage_RawReadCmd() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.RawReadCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_RawReadCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void DeviceMessage_RawReadCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_RawReadCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.RawReadCmd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.endpoint_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_) -
      reinterpret_cast<char*>(&_impl_.endpoint_)) + sizeof(_impl_.timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_RawReadCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.Endpoint endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_endpoint(static_cast<::Buttplug::Endpoint>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 expected_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.expected_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_RawReadCmd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.RawReadCmd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.Endpoint endpoint = 1;
  if (this->_internal_endpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_endpoint(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint32 expected_length = 3;
  if (this->_internal_expected_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expected_length(), target);
  }

  // uint32 timeout = 4;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.RawReadCmd)
  return target;
}

::size_t DeviceMessage_RawReadCmd::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.RawReadCmd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .Buttplug.Endpoint endpoint = 1;
  if (this->_internal_endpoint() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_endpoint());
  }

  // uint32 expected_length = 3;
  if (this->_internal_expected_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expected_length());
  }

  // uint32 timeout = 4;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_RawReadCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_RawReadCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_RawReadCmd::GetClassData() const { return &_class_data_; }


void DeviceMessage_RawReadCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_RawReadCmd*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_RawReadCmd&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.RawReadCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_endpoint() != 0) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  if (from._internal_expected_length() != 0) {
    _this->_internal_set_expected_length(from._internal_expected_length());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_RawReadCmd::CopyFrom(const DeviceMessage_RawReadCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.RawReadCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_RawReadCmd::IsInitialized() const {
  return true;
}

void DeviceMessage_RawReadCmd::InternalSwap(DeviceMessage_RawReadCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceMessage_RawReadCmd, _impl_.timeout_)
      + sizeof(DeviceMessage_RawReadCmd::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(DeviceMessage_RawReadCmd, _impl_.endpoint_)>(
          reinterpret_cast<char*>(&_impl_.endpoint_),
          reinterpret_cast<char*>(&other->_impl_.endpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_RawReadCmd::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[16]);
}
// ===================================================================

class DeviceMessage_RawWriteCmd::_Internal {
 public:
};

DeviceMessage_RawWriteCmd::DeviceMessage_RawWriteCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.RawWriteCmd)
}
DeviceMessage_RawWriteCmd::DeviceMessage_RawWriteCmd(const DeviceMessage_RawWriteCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceMessage_RawWriteCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.write_with_response_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.endpoint_, &from._impl_.endpoint_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.write_with_response_) -
    reinterpret_cast<char*>(&_impl_.endpoint_)) + sizeof(_impl_.write_with_response_));
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.RawWriteCmd)
}

inline void DeviceMessage_RawWriteCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.endpoint_){0}
    , decltype(_impl_.write_with_response_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceMessage_RawWriteCmd::~DeviceMessage_RawWriteCmd() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.RawWriteCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_RawWriteCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void DeviceMessage_RawWriteCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_RawWriteCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.RawWriteCmd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.endpoint_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.write_with_response_) -
      reinterpret_cast<char*>(&_impl_.endpoint_)) + sizeof(_impl_.write_with_response_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_RawWriteCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.Endpoint endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_endpoint(static_cast<::Buttplug::Endpoint>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool write_with_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.write_with_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_RawWriteCmd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.RawWriteCmd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.Endpoint endpoint = 1;
  if (this->_internal_endpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_endpoint(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // bool write_with_response = 3;
  if (this->_internal_write_with_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_write_with_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.RawWriteCmd)
  return target;
}

::size_t DeviceMessage_RawWriteCmd::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.RawWriteCmd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .Buttplug.Endpoint endpoint = 1;
  if (this->_internal_endpoint() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_endpoint());
  }

  // bool write_with_response = 3;
  if (this->_internal_write_with_response() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_RawWriteCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_RawWriteCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_RawWriteCmd::GetClassData() const { return &_class_data_; }


void DeviceMessage_RawWriteCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_RawWriteCmd*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_RawWriteCmd&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.RawWriteCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_endpoint() != 0) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  if (from._internal_write_with_response() != 0) {
    _this->_internal_set_write_with_response(from._internal_write_with_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_RawWriteCmd::CopyFrom(const DeviceMessage_RawWriteCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.RawWriteCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_RawWriteCmd::IsInitialized() const {
  return true;
}

void DeviceMessage_RawWriteCmd::InternalSwap(DeviceMessage_RawWriteCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceMessage_RawWriteCmd, _impl_.write_with_response_)
      + sizeof(DeviceMessage_RawWriteCmd::_impl_.write_with_response_)
      - PROTOBUF_FIELD_OFFSET(DeviceMessage_RawWriteCmd, _impl_.endpoint_)>(
          reinterpret_cast<char*>(&_impl_.endpoint_),
          reinterpret_cast<char*>(&other->_impl_.endpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_RawWriteCmd::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[17]);
}
// ===================================================================

class DeviceMessage_RawSubscribeCmd::_Internal {
 public:
};

DeviceMessage_RawSubscribeCmd::DeviceMessage_RawSubscribeCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.RawSubscribeCmd)
}
DeviceMessage_RawSubscribeCmd::DeviceMessage_RawSubscribeCmd(const DeviceMessage_RawSubscribeCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.RawSubscribeCmd)
}

inline void DeviceMessage_RawSubscribeCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.endpoint_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceMessage_RawSubscribeCmd::~DeviceMessage_RawSubscribeCmd() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.RawSubscribeCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_RawSubscribeCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceMessage_RawSubscribeCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_RawSubscribeCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.RawSubscribeCmd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.endpoint_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_RawSubscribeCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.Endpoint endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_endpoint(static_cast<::Buttplug::Endpoint>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_RawSubscribeCmd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.RawSubscribeCmd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.Endpoint endpoint = 1;
  if (this->_internal_endpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_endpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.RawSubscribeCmd)
  return target;
}

::size_t DeviceMessage_RawSubscribeCmd::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.RawSubscribeCmd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Buttplug.Endpoint endpoint = 1;
  if (this->_internal_endpoint() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_endpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_RawSubscribeCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_RawSubscribeCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_RawSubscribeCmd::GetClassData() const { return &_class_data_; }


void DeviceMessage_RawSubscribeCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_RawSubscribeCmd*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_RawSubscribeCmd&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.RawSubscribeCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_endpoint() != 0) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_RawSubscribeCmd::CopyFrom(const DeviceMessage_RawSubscribeCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.RawSubscribeCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_RawSubscribeCmd::IsInitialized() const {
  return true;
}

void DeviceMessage_RawSubscribeCmd::InternalSwap(DeviceMessage_RawSubscribeCmd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.endpoint_, other->_impl_.endpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_RawSubscribeCmd::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[18]);
}
// ===================================================================

class DeviceMessage_RawUnsubscribeCmd::_Internal {
 public:
};

DeviceMessage_RawUnsubscribeCmd::DeviceMessage_RawUnsubscribeCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.RawUnsubscribeCmd)
}
DeviceMessage_RawUnsubscribeCmd::DeviceMessage_RawUnsubscribeCmd(const DeviceMessage_RawUnsubscribeCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.RawUnsubscribeCmd)
}

inline void DeviceMessage_RawUnsubscribeCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.endpoint_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceMessage_RawUnsubscribeCmd::~DeviceMessage_RawUnsubscribeCmd() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.RawUnsubscribeCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_RawUnsubscribeCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceMessage_RawUnsubscribeCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_RawUnsubscribeCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.RawUnsubscribeCmd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.endpoint_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_RawUnsubscribeCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.Endpoint endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_endpoint(static_cast<::Buttplug::Endpoint>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_RawUnsubscribeCmd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.RawUnsubscribeCmd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.Endpoint endpoint = 1;
  if (this->_internal_endpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_endpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.RawUnsubscribeCmd)
  return target;
}

::size_t DeviceMessage_RawUnsubscribeCmd::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.RawUnsubscribeCmd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Buttplug.Endpoint endpoint = 1;
  if (this->_internal_endpoint() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_endpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_RawUnsubscribeCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_RawUnsubscribeCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_RawUnsubscribeCmd::GetClassData() const { return &_class_data_; }


void DeviceMessage_RawUnsubscribeCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_RawUnsubscribeCmd*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_RawUnsubscribeCmd&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.RawUnsubscribeCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_endpoint() != 0) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_RawUnsubscribeCmd::CopyFrom(const DeviceMessage_RawUnsubscribeCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.RawUnsubscribeCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_RawUnsubscribeCmd::IsInitialized() const {
  return true;
}

void DeviceMessage_RawUnsubscribeCmd::InternalSwap(DeviceMessage_RawUnsubscribeCmd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.endpoint_, other->_impl_.endpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_RawUnsubscribeCmd::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[19]);
}
// ===================================================================

class DeviceMessage_BatteryLevelCmd::_Internal {
 public:
};

DeviceMessage_BatteryLevelCmd::DeviceMessage_BatteryLevelCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.BatteryLevelCmd)
}
DeviceMessage_BatteryLevelCmd::DeviceMessage_BatteryLevelCmd(const DeviceMessage_BatteryLevelCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeviceMessage_BatteryLevelCmd* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.BatteryLevelCmd)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_BatteryLevelCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_BatteryLevelCmd::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_BatteryLevelCmd::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[20]);
}
// ===================================================================

class DeviceMessage_RSSILevelCmd::_Internal {
 public:
};

DeviceMessage_RSSILevelCmd::DeviceMessage_RSSILevelCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.RSSILevelCmd)
}
DeviceMessage_RSSILevelCmd::DeviceMessage_RSSILevelCmd(const DeviceMessage_RSSILevelCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeviceMessage_RSSILevelCmd* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.RSSILevelCmd)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_RSSILevelCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_RSSILevelCmd::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_RSSILevelCmd::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[21]);
}
// ===================================================================

class DeviceMessage_FFIMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceMessage_FFIMessage, _impl_._oneof_case_);
  static const ::Buttplug::DeviceMessage_VibrateCmd& vibrate_cmd(const DeviceMessage_FFIMessage* msg);
  static const ::Buttplug::DeviceMessage_RotateCmd& rotate_cmd(const DeviceMessage_FFIMessage* msg);
  static const ::Buttplug::DeviceMessage_LinearCmd& linear_cmd(const DeviceMessage_FFIMessage* msg);
  static const ::Buttplug::DeviceMessage_StopDeviceCmd& stop_device_cmd(const DeviceMessage_FFIMessage* msg);
  static const ::Buttplug::DeviceMessage_RawReadCmd& raw_read_cmd(const DeviceMessage_FFIMessage* msg);
  static const ::Buttplug::DeviceMessage_RawWriteCmd& raw_write_cmd(const DeviceMessage_FFIMessage* msg);
  static const ::Buttplug::DeviceMessage_RawSubscribeCmd& raw_subscribe_cmd(const DeviceMessage_FFIMessage* msg);
  static const ::Buttplug::DeviceMessage_RawUnsubscribeCmd& raw_unsubscribe_cmd(const DeviceMessage_FFIMessage* msg);
  static const ::Buttplug::DeviceMessage_BatteryLevelCmd& battery_level_cmd(const DeviceMessage_FFIMessage* msg);
  static const ::Buttplug::DeviceMessage_RSSILevelCmd& rssi_level_cmd(const DeviceMessage_FFIMessage* msg);
};

const ::Buttplug::DeviceMessage_VibrateCmd&
DeviceMessage_FFIMessage::_Internal::vibrate_cmd(const DeviceMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.vibrate_cmd_;
}
const ::Buttplug::DeviceMessage_RotateCmd&
DeviceMessage_FFIMessage::_Internal::rotate_cmd(const DeviceMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.rotate_cmd_;
}
const ::Buttplug::DeviceMessage_LinearCmd&
DeviceMessage_FFIMessage::_Internal::linear_cmd(const DeviceMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.linear_cmd_;
}
const ::Buttplug::DeviceMessage_StopDeviceCmd&
DeviceMessage_FFIMessage::_Internal::stop_device_cmd(const DeviceMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.stop_device_cmd_;
}
const ::Buttplug::DeviceMessage_RawReadCmd&
DeviceMessage_FFIMessage::_Internal::raw_read_cmd(const DeviceMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.raw_read_cmd_;
}
const ::Buttplug::DeviceMessage_RawWriteCmd&
DeviceMessage_FFIMessage::_Internal::raw_write_cmd(const DeviceMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.raw_write_cmd_;
}
const ::Buttplug::DeviceMessage_RawSubscribeCmd&
DeviceMessage_FFIMessage::_Internal::raw_subscribe_cmd(const DeviceMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.raw_subscribe_cmd_;
}
const ::Buttplug::DeviceMessage_RawUnsubscribeCmd&
DeviceMessage_FFIMessage::_Internal::raw_unsubscribe_cmd(const DeviceMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.raw_unsubscribe_cmd_;
}
const ::Buttplug::DeviceMessage_BatteryLevelCmd&
DeviceMessage_FFIMessage::_Internal::battery_level_cmd(const DeviceMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.battery_level_cmd_;
}
const ::Buttplug::DeviceMessage_RSSILevelCmd&
DeviceMessage_FFIMessage::_Internal::rssi_level_cmd(const DeviceMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.rssi_level_cmd_;
}
void DeviceMessage_FFIMessage::set_allocated_vibrate_cmd(::Buttplug::DeviceMessage_VibrateCmd* vibrate_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (vibrate_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vibrate_cmd);
    if (message_arena != submessage_arena) {
      vibrate_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vibrate_cmd, submessage_arena);
    }
    set_has_vibrate_cmd();
    _impl_.msg_.vibrate_cmd_ = vibrate_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.FFIMessage.vibrate_cmd)
}
void DeviceMessage_FFIMessage::set_allocated_rotate_cmd(::Buttplug::DeviceMessage_RotateCmd* rotate_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (rotate_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotate_cmd);
    if (message_arena != submessage_arena) {
      rotate_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotate_cmd, submessage_arena);
    }
    set_has_rotate_cmd();
    _impl_.msg_.rotate_cmd_ = rotate_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.FFIMessage.rotate_cmd)
}
void DeviceMessage_FFIMessage::set_allocated_linear_cmd(::Buttplug::DeviceMessage_LinearCmd* linear_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (linear_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(linear_cmd);
    if (message_arena != submessage_arena) {
      linear_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_cmd, submessage_arena);
    }
    set_has_linear_cmd();
    _impl_.msg_.linear_cmd_ = linear_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.FFIMessage.linear_cmd)
}
void DeviceMessage_FFIMessage::set_allocated_stop_device_cmd(::Buttplug::DeviceMessage_StopDeviceCmd* stop_device_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (stop_device_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_device_cmd);
    if (message_arena != submessage_arena) {
      stop_device_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_device_cmd, submessage_arena);
    }
    set_has_stop_device_cmd();
    _impl_.msg_.stop_device_cmd_ = stop_device_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.FFIMessage.stop_device_cmd)
}
void DeviceMessage_FFIMessage::set_allocated_raw_read_cmd(::Buttplug::DeviceMessage_RawReadCmd* raw_read_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (raw_read_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw_read_cmd);
    if (message_arena != submessage_arena) {
      raw_read_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_read_cmd, submessage_arena);
    }
    set_has_raw_read_cmd();
    _impl_.msg_.raw_read_cmd_ = raw_read_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.FFIMessage.raw_read_cmd)
}
void DeviceMessage_FFIMessage::set_allocated_raw_write_cmd(::Buttplug::DeviceMessage_RawWriteCmd* raw_write_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (raw_write_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw_write_cmd);
    if (message_arena != submessage_arena) {
      raw_write_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_write_cmd, submessage_arena);
    }
    set_has_raw_write_cmd();
    _impl_.msg_.raw_write_cmd_ = raw_write_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.FFIMessage.raw_write_cmd)
}
void DeviceMessage_FFIMessage::set_allocated_raw_subscribe_cmd(::Buttplug::DeviceMessage_RawSubscribeCmd* raw_subscribe_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (raw_subscribe_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw_subscribe_cmd);
    if (message_arena != submessage_arena) {
      raw_subscribe_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_subscribe_cmd, submessage_arena);
    }
    set_has_raw_subscribe_cmd();
    _impl_.msg_.raw_subscribe_cmd_ = raw_subscribe_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.FFIMessage.raw_subscribe_cmd)
}
void DeviceMessage_FFIMessage::set_allocated_raw_unsubscribe_cmd(::Buttplug::DeviceMessage_RawUnsubscribeCmd* raw_unsubscribe_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (raw_unsubscribe_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw_unsubscribe_cmd);
    if (message_arena != submessage_arena) {
      raw_unsubscribe_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_unsubscribe_cmd, submessage_arena);
    }
    set_has_raw_unsubscribe_cmd();
    _impl_.msg_.raw_unsubscribe_cmd_ = raw_unsubscribe_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.FFIMessage.raw_unsubscribe_cmd)
}
void DeviceMessage_FFIMessage::set_allocated_battery_level_cmd(::Buttplug::DeviceMessage_BatteryLevelCmd* battery_level_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (battery_level_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(battery_level_cmd);
    if (message_arena != submessage_arena) {
      battery_level_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery_level_cmd, submessage_arena);
    }
    set_has_battery_level_cmd();
    _impl_.msg_.battery_level_cmd_ = battery_level_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.FFIMessage.battery_level_cmd)
}
void DeviceMessage_FFIMessage::set_allocated_rssi_level_cmd(::Buttplug::DeviceMessage_RSSILevelCmd* rssi_level_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (rssi_level_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rssi_level_cmd);
    if (message_arena != submessage_arena) {
      rssi_level_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rssi_level_cmd, submessage_arena);
    }
    set_has_rssi_level_cmd();
    _impl_.msg_.rssi_level_cmd_ = rssi_level_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceMessage.FFIMessage.rssi_level_cmd)
}
DeviceMessage_FFIMessage::DeviceMessage_FFIMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage.FFIMessage)
}
DeviceMessage_FFIMessage::DeviceMessage_FFIMessage(const DeviceMessage_FFIMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceMessage_FFIMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kVibrateCmd: {
      _this->_internal_mutable_vibrate_cmd()->::Buttplug::DeviceMessage_VibrateCmd::MergeFrom(
          from._internal_vibrate_cmd());
      break;
    }
    case kRotateCmd: {
      _this->_internal_mutable_rotate_cmd()->::Buttplug::DeviceMessage_RotateCmd::MergeFrom(
          from._internal_rotate_cmd());
      break;
    }
    case kLinearCmd: {
      _this->_internal_mutable_linear_cmd()->::Buttplug::DeviceMessage_LinearCmd::MergeFrom(
          from._internal_linear_cmd());
      break;
    }
    case kStopDeviceCmd: {
      _this->_internal_mutable_stop_device_cmd()->::Buttplug::DeviceMessage_StopDeviceCmd::MergeFrom(
          from._internal_stop_device_cmd());
      break;
    }
    case kRawReadCmd: {
      _this->_internal_mutable_raw_read_cmd()->::Buttplug::DeviceMessage_RawReadCmd::MergeFrom(
          from._internal_raw_read_cmd());
      break;
    }
    case kRawWriteCmd: {
      _this->_internal_mutable_raw_write_cmd()->::Buttplug::DeviceMessage_RawWriteCmd::MergeFrom(
          from._internal_raw_write_cmd());
      break;
    }
    case kRawSubscribeCmd: {
      _this->_internal_mutable_raw_subscribe_cmd()->::Buttplug::DeviceMessage_RawSubscribeCmd::MergeFrom(
          from._internal_raw_subscribe_cmd());
      break;
    }
    case kRawUnsubscribeCmd: {
      _this->_internal_mutable_raw_unsubscribe_cmd()->::Buttplug::DeviceMessage_RawUnsubscribeCmd::MergeFrom(
          from._internal_raw_unsubscribe_cmd());
      break;
    }
    case kBatteryLevelCmd: {
      _this->_internal_mutable_battery_level_cmd()->::Buttplug::DeviceMessage_BatteryLevelCmd::MergeFrom(
          from._internal_battery_level_cmd());
      break;
    }
    case kRssiLevelCmd: {
      _this->_internal_mutable_rssi_level_cmd()->::Buttplug::DeviceMessage_RSSILevelCmd::MergeFrom(
          from._internal_rssi_level_cmd());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage.FFIMessage)
}

inline void DeviceMessage_FFIMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

DeviceMessage_FFIMessage::~DeviceMessage_FFIMessage() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage.FFIMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage_FFIMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void DeviceMessage_FFIMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage_FFIMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:Buttplug.DeviceMessage.FFIMessage)
  switch (msg_case()) {
    case kVibrateCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.vibrate_cmd_;
      }
      break;
    }
    case kRotateCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.rotate_cmd_;
      }
      break;
    }
    case kLinearCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.linear_cmd_;
      }
      break;
    }
    case kStopDeviceCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.stop_device_cmd_;
      }
      break;
    }
    case kRawReadCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.raw_read_cmd_;
      }
      break;
    }
    case kRawWriteCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.raw_write_cmd_;
      }
      break;
    }
    case kRawSubscribeCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.raw_subscribe_cmd_;
      }
      break;
    }
    case kRawUnsubscribeCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.raw_unsubscribe_cmd_;
      }
      break;
    }
    case kBatteryLevelCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.battery_level_cmd_;
      }
      break;
    }
    case kRssiLevelCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.rssi_level_cmd_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void DeviceMessage_FFIMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage.FFIMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage_FFIMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.DeviceMessage.VibrateCmd vibrate_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vibrate_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceMessage.RotateCmd rotate_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotate_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceMessage.LinearCmd linear_cmd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceMessage.StopDeviceCmd stop_device_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_device_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceMessage.RawReadCmd raw_read_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_read_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceMessage.RawWriteCmd raw_write_cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_write_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceMessage.RawSubscribeCmd raw_subscribe_cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_subscribe_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceMessage.RawUnsubscribeCmd raw_unsubscribe_cmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_unsubscribe_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceMessage.BatteryLevelCmd battery_level_cmd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery_level_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceMessage.RSSILevelCmd rssi_level_cmd = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rssi_level_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage_FFIMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage.FFIMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.DeviceMessage.VibrateCmd vibrate_cmd = 1;
  if (_internal_has_vibrate_cmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vibrate_cmd(this),
        _Internal::vibrate_cmd(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceMessage.RotateCmd rotate_cmd = 2;
  if (_internal_has_rotate_cmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotate_cmd(this),
        _Internal::rotate_cmd(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceMessage.LinearCmd linear_cmd = 3;
  if (_internal_has_linear_cmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::linear_cmd(this),
        _Internal::linear_cmd(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceMessage.StopDeviceCmd stop_device_cmd = 4;
  if (_internal_has_stop_device_cmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stop_device_cmd(this),
        _Internal::stop_device_cmd(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceMessage.RawReadCmd raw_read_cmd = 5;
  if (_internal_has_raw_read_cmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::raw_read_cmd(this),
        _Internal::raw_read_cmd(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceMessage.RawWriteCmd raw_write_cmd = 6;
  if (_internal_has_raw_write_cmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::raw_write_cmd(this),
        _Internal::raw_write_cmd(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceMessage.RawSubscribeCmd raw_subscribe_cmd = 7;
  if (_internal_has_raw_subscribe_cmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::raw_subscribe_cmd(this),
        _Internal::raw_subscribe_cmd(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceMessage.RawUnsubscribeCmd raw_unsubscribe_cmd = 8;
  if (_internal_has_raw_unsubscribe_cmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::raw_unsubscribe_cmd(this),
        _Internal::raw_unsubscribe_cmd(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceMessage.BatteryLevelCmd battery_level_cmd = 9;
  if (_internal_has_battery_level_cmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::battery_level_cmd(this),
        _Internal::battery_level_cmd(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceMessage.RSSILevelCmd rssi_level_cmd = 10;
  if (_internal_has_rssi_level_cmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::rssi_level_cmd(this),
        _Internal::rssi_level_cmd(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage.FFIMessage)
  return target;
}

::size_t DeviceMessage_FFIMessage::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage.FFIMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .Buttplug.DeviceMessage.VibrateCmd vibrate_cmd = 1;
    case kVibrateCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.vibrate_cmd_);
      break;
    }
    // .Buttplug.DeviceMessage.RotateCmd rotate_cmd = 2;
    case kRotateCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.rotate_cmd_);
      break;
    }
    // .Buttplug.DeviceMessage.LinearCmd linear_cmd = 3;
    case kLinearCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.linear_cmd_);
      break;
    }
    // .Buttplug.DeviceMessage.StopDeviceCmd stop_device_cmd = 4;
    case kStopDeviceCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.stop_device_cmd_);
      break;
    }
    // .Buttplug.DeviceMessage.RawReadCmd raw_read_cmd = 5;
    case kRawReadCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.raw_read_cmd_);
      break;
    }
    // .Buttplug.DeviceMessage.RawWriteCmd raw_write_cmd = 6;
    case kRawWriteCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.raw_write_cmd_);
      break;
    }
    // .Buttplug.DeviceMessage.RawSubscribeCmd raw_subscribe_cmd = 7;
    case kRawSubscribeCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.raw_subscribe_cmd_);
      break;
    }
    // .Buttplug.DeviceMessage.RawUnsubscribeCmd raw_unsubscribe_cmd = 8;
    case kRawUnsubscribeCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.raw_unsubscribe_cmd_);
      break;
    }
    // .Buttplug.DeviceMessage.BatteryLevelCmd battery_level_cmd = 9;
    case kBatteryLevelCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.battery_level_cmd_);
      break;
    }
    // .Buttplug.DeviceMessage.RSSILevelCmd rssi_level_cmd = 10;
    case kRssiLevelCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.rssi_level_cmd_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage_FFIMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage_FFIMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage_FFIMessage::GetClassData() const { return &_class_data_; }


void DeviceMessage_FFIMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage_FFIMessage*>(&to_msg);
  auto& from = static_cast<const DeviceMessage_FFIMessage&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage.FFIMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kVibrateCmd: {
      _this->_internal_mutable_vibrate_cmd()->::Buttplug::DeviceMessage_VibrateCmd::MergeFrom(
          from._internal_vibrate_cmd());
      break;
    }
    case kRotateCmd: {
      _this->_internal_mutable_rotate_cmd()->::Buttplug::DeviceMessage_RotateCmd::MergeFrom(
          from._internal_rotate_cmd());
      break;
    }
    case kLinearCmd: {
      _this->_internal_mutable_linear_cmd()->::Buttplug::DeviceMessage_LinearCmd::MergeFrom(
          from._internal_linear_cmd());
      break;
    }
    case kStopDeviceCmd: {
      _this->_internal_mutable_stop_device_cmd()->::Buttplug::DeviceMessage_StopDeviceCmd::MergeFrom(
          from._internal_stop_device_cmd());
      break;
    }
    case kRawReadCmd: {
      _this->_internal_mutable_raw_read_cmd()->::Buttplug::DeviceMessage_RawReadCmd::MergeFrom(
          from._internal_raw_read_cmd());
      break;
    }
    case kRawWriteCmd: {
      _this->_internal_mutable_raw_write_cmd()->::Buttplug::DeviceMessage_RawWriteCmd::MergeFrom(
          from._internal_raw_write_cmd());
      break;
    }
    case kRawSubscribeCmd: {
      _this->_internal_mutable_raw_subscribe_cmd()->::Buttplug::DeviceMessage_RawSubscribeCmd::MergeFrom(
          from._internal_raw_subscribe_cmd());
      break;
    }
    case kRawUnsubscribeCmd: {
      _this->_internal_mutable_raw_unsubscribe_cmd()->::Buttplug::DeviceMessage_RawUnsubscribeCmd::MergeFrom(
          from._internal_raw_unsubscribe_cmd());
      break;
    }
    case kBatteryLevelCmd: {
      _this->_internal_mutable_battery_level_cmd()->::Buttplug::DeviceMessage_BatteryLevelCmd::MergeFrom(
          from._internal_battery_level_cmd());
      break;
    }
    case kRssiLevelCmd: {
      _this->_internal_mutable_rssi_level_cmd()->::Buttplug::DeviceMessage_RSSILevelCmd::MergeFrom(
          from._internal_rssi_level_cmd());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage_FFIMessage::CopyFrom(const DeviceMessage_FFIMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage.FFIMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage_FFIMessage::IsInitialized() const {
  return true;
}

void DeviceMessage_FFIMessage::InternalSwap(DeviceMessage_FFIMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage_FFIMessage::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[22]);
}
// ===================================================================

class DeviceMessage::_Internal {
 public:
  static const ::Buttplug::DeviceMessage_FFIMessage& message(const DeviceMessage* msg);
};

const ::Buttplug::DeviceMessage_FFIMessage&
DeviceMessage::_Internal::message(const DeviceMessage* msg) {
  return *msg->_impl_.message_;
}
DeviceMessage::DeviceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceMessage)
}
DeviceMessage::DeviceMessage(const DeviceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::Buttplug::DeviceMessage_FFIMessage(*from._impl_.message_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceMessage)
}

inline void DeviceMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceMessage::~DeviceMessage() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.message_;
}

void DeviceMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceMessage.FFIMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // .Buttplug.DeviceMessage.FFIMessage message = 3;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceMessage)
  return target;
}

::size_t DeviceMessage::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Buttplug.DeviceMessage.FFIMessage message = 3;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMessage::GetClassData() const { return &_class_data_; }


void DeviceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMessage*>(&to_msg);
  auto& from = static_cast<const DeviceMessage&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::Buttplug::DeviceMessage_FFIMessage::MergeFrom(
        from._internal_message());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMessage::CopyFrom(const DeviceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMessage::IsInitialized() const {
  return true;
}

void DeviceMessage::InternalSwap(DeviceMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceMessage, _impl_.index_)
      + sizeof(DeviceMessage::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(DeviceMessage, _impl_.message_)>(
          reinterpret_cast<char*>(&_impl_.message_),
          reinterpret_cast<char*>(&other->_impl_.message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMessage::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[23]);
}
// ===================================================================

class ServerMessage_MessageAttributes::_Internal {
 public:
};

ServerMessage_MessageAttributes::ServerMessage_MessageAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ServerMessage.MessageAttributes)
}
ServerMessage_MessageAttributes::ServerMessage_MessageAttributes(const ServerMessage_MessageAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMessage_MessageAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.step_count_){from._impl_.step_count_}
    , /*decltype(_impl_._step_count_cached_byte_size_)*/{0}
    , decltype(_impl_.endpoints_){from._impl_.endpoints_}
    , /*decltype(_impl_._endpoints_cached_byte_size_)*/{0}
    , decltype(_impl_.max_duration_){from._impl_.max_duration_}
    , /*decltype(_impl_._max_duration_cached_byte_size_)*/{0}
    , decltype(_impl_.message_type_){}
    , decltype(_impl_.feature_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.message_type_, &from._impl_.message_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.feature_count_) -
    reinterpret_cast<char*>(&_impl_.message_type_)) + sizeof(_impl_.feature_count_));
  // @@protoc_insertion_point(copy_constructor:Buttplug.ServerMessage.MessageAttributes)
}

inline void ServerMessage_MessageAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.step_count_){arena}
    , /*decltype(_impl_._step_count_cached_byte_size_)*/{0}
    , decltype(_impl_.endpoints_){arena}
    , /*decltype(_impl_._endpoints_cached_byte_size_)*/{0}
    , decltype(_impl_.max_duration_){arena}
    , /*decltype(_impl_._max_duration_cached_byte_size_)*/{0}
    , decltype(_impl_.message_type_){0}
    , decltype(_impl_.feature_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMessage_MessageAttributes::~ServerMessage_MessageAttributes() {
  // @@protoc_insertion_point(destructor:Buttplug.ServerMessage.MessageAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMessage_MessageAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.step_count_.~RepeatedField();
  _impl_.endpoints_.~RepeatedField();
  _impl_.max_duration_.~RepeatedField();
}

void ServerMessage_MessageAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMessage_MessageAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ServerMessage.MessageAttributes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.step_count_.Clear();
  _impl_.endpoints_.Clear();
  _impl_.max_duration_.Clear();
  ::memset(&_impl_.message_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.feature_count_) -
      reinterpret_cast<char*>(&_impl_.message_type_)) + sizeof(_impl_.feature_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMessage_MessageAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.ServerMessage.MessageAttributeType message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::Buttplug::ServerMessage_MessageAttributeType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 feature_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.feature_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 step_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_step_count(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_step_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .Buttplug.Endpoint endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_endpoints(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_add_endpoints(static_cast<::Buttplug::Endpoint>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 max_duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_max_duration(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 40) {
          _internal_add_max_duration(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerMessage_MessageAttributes::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ServerMessage.MessageAttributes)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.ServerMessage.MessageAttributeType message_type = 1;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_message_type(), target);
  }

  // uint32 feature_count = 2;
  if (this->_internal_feature_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_feature_count(), target);
  }

  // repeated uint32 step_count = 3;
  {
    int byte_size = _impl_._step_count_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_step_count(), byte_size, target);
    }
  }

  // repeated .Buttplug.Endpoint endpoints = 4;
  {
    int byte_size = _impl_._endpoints_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, _impl_.endpoints_, byte_size, target);
    }
  }

  // repeated uint32 max_duration = 5;
  {
    int byte_size = _impl_._max_duration_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_max_duration(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ServerMessage.MessageAttributes)
  return target;
}

::size_t ServerMessage_MessageAttributes::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ServerMessage.MessageAttributes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 step_count = 3;
  {
    ::size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.step_count_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<::int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._step_count_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated .Buttplug.Endpoint endpoints = 4;
  {
    ::size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_endpoints_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_endpoints(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<::int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._endpoints_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated uint32 max_duration = 5;
  {
    ::size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.max_duration_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<::int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._max_duration_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // .Buttplug.ServerMessage.MessageAttributeType message_type = 1;
  if (this->_internal_message_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  // uint32 feature_count = 2;
  if (this->_internal_feature_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_feature_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage_MessageAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMessage_MessageAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage_MessageAttributes::GetClassData() const { return &_class_data_; }


void ServerMessage_MessageAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMessage_MessageAttributes*>(&to_msg);
  auto& from = static_cast<const ServerMessage_MessageAttributes&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ServerMessage.MessageAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.step_count_.MergeFrom(from._impl_.step_count_);
  _this->_impl_.endpoints_.MergeFrom(from._impl_.endpoints_);
  _this->_impl_.max_duration_.MergeFrom(from._impl_.max_duration_);
  if (from._internal_message_type() != 0) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  if (from._internal_feature_count() != 0) {
    _this->_internal_set_feature_count(from._internal_feature_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMessage_MessageAttributes::CopyFrom(const ServerMessage_MessageAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ServerMessage.MessageAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage_MessageAttributes::IsInitialized() const {
  return true;
}

void ServerMessage_MessageAttributes::InternalSwap(ServerMessage_MessageAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.step_count_.InternalSwap(&other->_impl_.step_count_);
  _impl_.endpoints_.InternalSwap(&other->_impl_.endpoints_);
  _impl_.max_duration_.InternalSwap(&other->_impl_.max_duration_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMessage_MessageAttributes, _impl_.feature_count_)
      + sizeof(ServerMessage_MessageAttributes::_impl_.feature_count_)
      - PROTOBUF_FIELD_OFFSET(ServerMessage_MessageAttributes, _impl_.message_type_)>(
          reinterpret_cast<char*>(&_impl_.message_type_),
          reinterpret_cast<char*>(&other->_impl_.message_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage_MessageAttributes::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[24]);
}
// ===================================================================

class ServerMessage_Ok::_Internal {
 public:
};

ServerMessage_Ok::ServerMessage_Ok(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.ServerMessage.Ok)
}
ServerMessage_Ok::ServerMessage_Ok(const ServerMessage_Ok& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ServerMessage_Ok* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.ServerMessage.Ok)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage_Ok::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage_Ok::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage_Ok::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[25]);
}
// ===================================================================

class ServerMessage_Error::_Internal {
 public:
};

ServerMessage_Error::ServerMessage_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ServerMessage.Error)
}
ServerMessage_Error::ServerMessage_Error(const ServerMessage_Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMessage_Error* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.backtrace_){}
    , decltype(_impl_.error_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.backtrace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backtrace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_backtrace().empty()) {
    _this->_impl_.backtrace_.Set(from._internal_backtrace(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_type_ = from._impl_.error_type_;
  // @@protoc_insertion_point(copy_constructor:Buttplug.ServerMessage.Error)
}

inline void ServerMessage_Error::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.backtrace_){}
    , decltype(_impl_.error_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.backtrace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backtrace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerMessage_Error::~ServerMessage_Error() {
  // @@protoc_insertion_point(destructor:Buttplug.ServerMessage.Error)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMessage_Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.backtrace_.Destroy();
}

void ServerMessage_Error::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMessage_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ServerMessage.Error)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.backtrace_.ClearToEmpty();
  _impl_.error_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMessage_Error::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.ServerMessage.ButtplugErrorType error_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_error_type(static_cast<::Buttplug::ServerMessage_ButtplugErrorType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Buttplug.ServerMessage.Error.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string backtrace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_backtrace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Buttplug.ServerMessage.Error.backtrace"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerMessage_Error::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ServerMessage.Error)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.ServerMessage.ButtplugErrorType error_type = 1;
  if (this->_internal_error_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error_type(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Buttplug.ServerMessage.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string backtrace = 3;
  if (!this->_internal_backtrace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backtrace().data(), static_cast<int>(this->_internal_backtrace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Buttplug.ServerMessage.Error.backtrace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_backtrace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ServerMessage.Error)
  return target;
}

::size_t ServerMessage_Error::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ServerMessage.Error)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string backtrace = 3;
  if (!this->_internal_backtrace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backtrace());
  }

  // .Buttplug.ServerMessage.ButtplugErrorType error_type = 1;
  if (this->_internal_error_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage_Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMessage_Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage_Error::GetClassData() const { return &_class_data_; }


void ServerMessage_Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMessage_Error*>(&to_msg);
  auto& from = static_cast<const ServerMessage_Error&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ServerMessage.Error)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_backtrace().empty()) {
    _this->_internal_set_backtrace(from._internal_backtrace());
  }
  if (from._internal_error_type() != 0) {
    _this->_internal_set_error_type(from._internal_error_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMessage_Error::CopyFrom(const ServerMessage_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ServerMessage.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage_Error::IsInitialized() const {
  return true;
}

void ServerMessage_Error::InternalSwap(ServerMessage_Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backtrace_, lhs_arena,
      &other->_impl_.backtrace_, rhs_arena
  );
  swap(_impl_.error_type_, other->_impl_.error_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage_Error::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[26]);
}
// ===================================================================

class ServerMessage_ScanningFinished::_Internal {
 public:
};

ServerMessage_ScanningFinished::ServerMessage_ScanningFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.ServerMessage.ScanningFinished)
}
ServerMessage_ScanningFinished::ServerMessage_ScanningFinished(const ServerMessage_ScanningFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ServerMessage_ScanningFinished* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.ServerMessage.ScanningFinished)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage_ScanningFinished::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage_ScanningFinished::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage_ScanningFinished::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[27]);
}
// ===================================================================

class ServerMessage_DeviceAdded::_Internal {
 public:
};

ServerMessage_DeviceAdded::ServerMessage_DeviceAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ServerMessage.DeviceAdded)
}
ServerMessage_DeviceAdded::ServerMessage_DeviceAdded(const ServerMessage_DeviceAdded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMessage_DeviceAdded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_attributes_){from._impl_.message_attributes_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:Buttplug.ServerMessage.DeviceAdded)
}

inline void ServerMessage_DeviceAdded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_attributes_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerMessage_DeviceAdded::~ServerMessage_DeviceAdded() {
  // @@protoc_insertion_point(destructor:Buttplug.ServerMessage.DeviceAdded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMessage_DeviceAdded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_attributes_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void ServerMessage_DeviceAdded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMessage_DeviceAdded::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ServerMessage.DeviceAdded)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_attributes_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMessage_DeviceAdded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Buttplug.ServerMessage.DeviceAdded.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .Buttplug.ServerMessage.MessageAttributes message_attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerMessage_DeviceAdded::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ServerMessage.DeviceAdded)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Buttplug.ServerMessage.DeviceAdded.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // repeated .Buttplug.ServerMessage.MessageAttributes message_attributes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_message_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_message_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ServerMessage.DeviceAdded)
  return target;
}

::size_t ServerMessage_DeviceAdded::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ServerMessage.DeviceAdded)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Buttplug.ServerMessage.MessageAttributes message_attributes = 3;
  total_size += 1UL * this->_internal_message_attributes_size();
  for (const auto& msg : this->_impl_.message_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage_DeviceAdded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMessage_DeviceAdded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage_DeviceAdded::GetClassData() const { return &_class_data_; }


void ServerMessage_DeviceAdded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMessage_DeviceAdded*>(&to_msg);
  auto& from = static_cast<const ServerMessage_DeviceAdded&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ServerMessage.DeviceAdded)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.message_attributes_.MergeFrom(from._impl_.message_attributes_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMessage_DeviceAdded::CopyFrom(const ServerMessage_DeviceAdded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ServerMessage.DeviceAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage_DeviceAdded::IsInitialized() const {
  return true;
}

void ServerMessage_DeviceAdded::InternalSwap(ServerMessage_DeviceAdded* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.message_attributes_.InternalSwap(&other->_impl_.message_attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage_DeviceAdded::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[28]);
}
// ===================================================================

class ServerMessage_DeviceRemoved::_Internal {
 public:
};

ServerMessage_DeviceRemoved::ServerMessage_DeviceRemoved(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ServerMessage.DeviceRemoved)
}
ServerMessage_DeviceRemoved::ServerMessage_DeviceRemoved(const ServerMessage_DeviceRemoved& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.ServerMessage.DeviceRemoved)
}

inline void ServerMessage_DeviceRemoved::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMessage_DeviceRemoved::~ServerMessage_DeviceRemoved() {
  // @@protoc_insertion_point(destructor:Buttplug.ServerMessage.DeviceRemoved)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMessage_DeviceRemoved::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMessage_DeviceRemoved::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMessage_DeviceRemoved::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ServerMessage.DeviceRemoved)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMessage_DeviceRemoved::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerMessage_DeviceRemoved::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ServerMessage.DeviceRemoved)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ServerMessage.DeviceRemoved)
  return target;
}

::size_t ServerMessage_DeviceRemoved::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ServerMessage.DeviceRemoved)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage_DeviceRemoved::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMessage_DeviceRemoved::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage_DeviceRemoved::GetClassData() const { return &_class_data_; }


void ServerMessage_DeviceRemoved::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMessage_DeviceRemoved*>(&to_msg);
  auto& from = static_cast<const ServerMessage_DeviceRemoved&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ServerMessage.DeviceRemoved)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMessage_DeviceRemoved::CopyFrom(const ServerMessage_DeviceRemoved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ServerMessage.DeviceRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage_DeviceRemoved::IsInitialized() const {
  return true;
}

void ServerMessage_DeviceRemoved::InternalSwap(ServerMessage_DeviceRemoved* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage_DeviceRemoved::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[29]);
}
// ===================================================================

class ServerMessage_Disconnect::_Internal {
 public:
};

ServerMessage_Disconnect::ServerMessage_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Buttplug.ServerMessage.Disconnect)
}
ServerMessage_Disconnect::ServerMessage_Disconnect(const ServerMessage_Disconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ServerMessage_Disconnect* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.ServerMessage.Disconnect)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage_Disconnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage_Disconnect::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage_Disconnect::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[30]);
}
// ===================================================================

class ServerMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::Buttplug::ServerMessage, _impl_._oneof_case_);
  static const ::Buttplug::ServerMessage_Ok& ok(const ServerMessage* msg);
  static const ::Buttplug::ServerMessage_Error& error(const ServerMessage* msg);
  static const ::Buttplug::ServerMessage_ScanningFinished& scanning_finished(const ServerMessage* msg);
  static const ::Buttplug::ServerMessage_DeviceAdded& device_added(const ServerMessage* msg);
  static const ::Buttplug::ServerMessage_DeviceRemoved& device_removed(const ServerMessage* msg);
  static const ::Buttplug::ServerMessage_Disconnect& disconnect(const ServerMessage* msg);
};

const ::Buttplug::ServerMessage_Ok&
ServerMessage::_Internal::ok(const ServerMessage* msg) {
  return *msg->_impl_.msg_.ok_;
}
const ::Buttplug::ServerMessage_Error&
ServerMessage::_Internal::error(const ServerMessage* msg) {
  return *msg->_impl_.msg_.error_;
}
const ::Buttplug::ServerMessage_ScanningFinished&
ServerMessage::_Internal::scanning_finished(const ServerMessage* msg) {
  return *msg->_impl_.msg_.scanning_finished_;
}
const ::Buttplug::ServerMessage_DeviceAdded&
ServerMessage::_Internal::device_added(const ServerMessage* msg) {
  return *msg->_impl_.msg_.device_added_;
}
const ::Buttplug::ServerMessage_DeviceRemoved&
ServerMessage::_Internal::device_removed(const ServerMessage* msg) {
  return *msg->_impl_.msg_.device_removed_;
}
const ::Buttplug::ServerMessage_Disconnect&
ServerMessage::_Internal::disconnect(const ServerMessage* msg) {
  return *msg->_impl_.msg_.disconnect_;
}
void ServerMessage::set_allocated_ok(::Buttplug::ServerMessage_Ok* ok) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (ok) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ok);
    if (message_arena != submessage_arena) {
      ok = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ok, submessage_arena);
    }
    set_has_ok();
    _impl_.msg_.ok_ = ok;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ServerMessage.ok)
}
void ServerMessage::set_allocated_error(::Buttplug::ServerMessage_Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.msg_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ServerMessage.error)
}
void ServerMessage::set_allocated_scanning_finished(::Buttplug::ServerMessage_ScanningFinished* scanning_finished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (scanning_finished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scanning_finished);
    if (message_arena != submessage_arena) {
      scanning_finished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scanning_finished, submessage_arena);
    }
    set_has_scanning_finished();
    _impl_.msg_.scanning_finished_ = scanning_finished;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ServerMessage.scanning_finished)
}
void ServerMessage::set_allocated_device_added(::Buttplug::ServerMessage_DeviceAdded* device_added) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (device_added) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(device_added);
    if (message_arena != submessage_arena) {
      device_added = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_added, submessage_arena);
    }
    set_has_device_added();
    _impl_.msg_.device_added_ = device_added;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ServerMessage.device_added)
}
void ServerMessage::set_allocated_device_removed(::Buttplug::ServerMessage_DeviceRemoved* device_removed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (device_removed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(device_removed);
    if (message_arena != submessage_arena) {
      device_removed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_removed, submessage_arena);
    }
    set_has_device_removed();
    _impl_.msg_.device_removed_ = device_removed;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ServerMessage.device_removed)
}
void ServerMessage::set_allocated_disconnect(::Buttplug::ServerMessage_Disconnect* disconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (disconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(disconnect);
    if (message_arena != submessage_arena) {
      disconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disconnect, submessage_arena);
    }
    set_has_disconnect();
    _impl_.msg_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ServerMessage.disconnect)
}
ServerMessage::ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kOk: {
      _this->_internal_mutable_ok()->::Buttplug::ServerMessage_Ok::MergeFrom(
          from._internal_ok());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::Buttplug::ServerMessage_Error::MergeFrom(
          from._internal_error());
      break;
    }
    case kScanningFinished: {
      _this->_internal_mutable_scanning_finished()->::Buttplug::ServerMessage_ScanningFinished::MergeFrom(
          from._internal_scanning_finished());
      break;
    }
    case kDeviceAdded: {
      _this->_internal_mutable_device_added()->::Buttplug::ServerMessage_DeviceAdded::MergeFrom(
          from._internal_device_added());
      break;
    }
    case kDeviceRemoved: {
      _this->_internal_mutable_device_removed()->::Buttplug::ServerMessage_DeviceRemoved::MergeFrom(
          from._internal_device_removed());
      break;
    }
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::Buttplug::ServerMessage_Disconnect::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Buttplug.ServerMessage)
}

inline void ServerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:Buttplug.ServerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ServerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:Buttplug.ServerMessage)
  switch (msg_case()) {
    case kOk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.ok_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.error_;
      }
      break;
    }
    case kScanningFinished: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.scanning_finished_;
      }
      break;
    }
    case kDeviceAdded: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.device_added_;
      }
      break;
    }
    case kDeviceRemoved: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.device_removed_;
      }
      break;
    }
    case kDisconnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.disconnect_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ServerMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.ServerMessage.Ok ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ok(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ServerMessage.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ServerMessage.ScanningFinished scanning_finished = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scanning_finished(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ServerMessage.DeviceAdded device_added = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_added(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ServerMessage.DeviceRemoved device_removed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_removed(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ServerMessage.Disconnect disconnect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_disconnect(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ServerMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.ServerMessage.Ok ok = 1;
  if (_internal_has_ok()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ok(this),
        _Internal::ok(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ServerMessage.Error error = 2;
  if (_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ServerMessage.ScanningFinished scanning_finished = 3;
  if (_internal_has_scanning_finished()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::scanning_finished(this),
        _Internal::scanning_finished(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ServerMessage.DeviceAdded device_added = 4;
  if (_internal_has_device_added()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::device_added(this),
        _Internal::device_added(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ServerMessage.DeviceRemoved device_removed = 5;
  if (_internal_has_device_removed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::device_removed(this),
        _Internal::device_removed(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.ServerMessage.Disconnect disconnect = 6;
  if (_internal_has_disconnect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::disconnect(this),
        _Internal::disconnect(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ServerMessage)
  return target;
}

::size_t ServerMessage::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ServerMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .Buttplug.ServerMessage.Ok ok = 1;
    case kOk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.ok_);
      break;
    }
    // .Buttplug.ServerMessage.Error error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.error_);
      break;
    }
    // .Buttplug.ServerMessage.ScanningFinished scanning_finished = 3;
    case kScanningFinished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.scanning_finished_);
      break;
    }
    // .Buttplug.ServerMessage.DeviceAdded device_added = 4;
    case kDeviceAdded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.device_added_);
      break;
    }
    // .Buttplug.ServerMessage.DeviceRemoved device_removed = 5;
    case kDeviceRemoved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.device_removed_);
      break;
    }
    // .Buttplug.ServerMessage.Disconnect disconnect = 6;
    case kDisconnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.disconnect_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage::GetClassData() const { return &_class_data_; }


void ServerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMessage*>(&to_msg);
  auto& from = static_cast<const ServerMessage&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ServerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kOk: {
      _this->_internal_mutable_ok()->::Buttplug::ServerMessage_Ok::MergeFrom(
          from._internal_ok());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::Buttplug::ServerMessage_Error::MergeFrom(
          from._internal_error());
      break;
    }
    case kScanningFinished: {
      _this->_internal_mutable_scanning_finished()->::Buttplug::ServerMessage_ScanningFinished::MergeFrom(
          from._internal_scanning_finished());
      break;
    }
    case kDeviceAdded: {
      _this->_internal_mutable_device_added()->::Buttplug::ServerMessage_DeviceAdded::MergeFrom(
          from._internal_device_added());
      break;
    }
    case kDeviceRemoved: {
      _this->_internal_mutable_device_removed()->::Buttplug::ServerMessage_DeviceRemoved::MergeFrom(
          from._internal_device_removed());
      break;
    }
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::Buttplug::ServerMessage_Disconnect::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  return true;
}

void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[31]);
}
// ===================================================================

class DeviceEvent_Disconnect::_Internal {
 public:
};

DeviceEvent_Disconnect::DeviceEvent_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceEvent.Disconnect)
}
DeviceEvent_Disconnect::DeviceEvent_Disconnect(const DeviceEvent_Disconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceEvent.Disconnect)
}

inline void DeviceEvent_Disconnect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceEvent_Disconnect::~DeviceEvent_Disconnect() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceEvent.Disconnect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceEvent_Disconnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceEvent_Disconnect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceEvent_Disconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceEvent.Disconnect)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceEvent_Disconnect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceEvent_Disconnect::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceEvent.Disconnect)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceEvent.Disconnect)
  return target;
}

::size_t DeviceEvent_Disconnect::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceEvent.Disconnect)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceEvent_Disconnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceEvent_Disconnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceEvent_Disconnect::GetClassData() const { return &_class_data_; }


void DeviceEvent_Disconnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceEvent_Disconnect*>(&to_msg);
  auto& from = static_cast<const DeviceEvent_Disconnect&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceEvent.Disconnect)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceEvent_Disconnect::CopyFrom(const DeviceEvent_Disconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceEvent.Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceEvent_Disconnect::IsInitialized() const {
  return true;
}

void DeviceEvent_Disconnect::InternalSwap(DeviceEvent_Disconnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceEvent_Disconnect::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[32]);
}
// ===================================================================

class DeviceEvent_RawReading::_Internal {
 public:
};

DeviceEvent_RawReading::DeviceEvent_RawReading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceEvent.RawReading)
}
DeviceEvent_RawReading::DeviceEvent_RawReading(const DeviceEvent_RawReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceEvent_RawReading* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.endpoint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.endpoint_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.endpoint_));
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceEvent.RawReading)
}

inline void DeviceEvent_RawReading::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.endpoint_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceEvent_RawReading::~DeviceEvent_RawReading() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceEvent.RawReading)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceEvent_RawReading::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void DeviceEvent_RawReading::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceEvent_RawReading::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceEvent.RawReading)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.endpoint_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.endpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceEvent_RawReading::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.Endpoint endpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_endpoint(static_cast<::Buttplug::Endpoint>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceEvent_RawReading::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceEvent.RawReading)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .Buttplug.Endpoint endpoint = 2;
  if (this->_internal_endpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_endpoint(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceEvent.RawReading)
  return target;
}

::size_t DeviceEvent_RawReading::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceEvent.RawReading)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // .Buttplug.Endpoint endpoint = 2;
  if (this->_internal_endpoint() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_endpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceEvent_RawReading::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceEvent_RawReading::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceEvent_RawReading::GetClassData() const { return &_class_data_; }


void DeviceEvent_RawReading::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceEvent_RawReading*>(&to_msg);
  auto& from = static_cast<const DeviceEvent_RawReading&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceEvent.RawReading)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_endpoint() != 0) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceEvent_RawReading::CopyFrom(const DeviceEvent_RawReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceEvent.RawReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceEvent_RawReading::IsInitialized() const {
  return true;
}

void DeviceEvent_RawReading::InternalSwap(DeviceEvent_RawReading* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceEvent_RawReading, _impl_.endpoint_)
      + sizeof(DeviceEvent_RawReading::_impl_.endpoint_)
      - PROTOBUF_FIELD_OFFSET(DeviceEvent_RawReading, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceEvent_RawReading::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[33]);
}
// ===================================================================

class DeviceEvent_BatteryLevelReading::_Internal {
 public:
};

DeviceEvent_BatteryLevelReading::DeviceEvent_BatteryLevelReading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceEvent.BatteryLevelReading)
}
DeviceEvent_BatteryLevelReading::DeviceEvent_BatteryLevelReading(const DeviceEvent_BatteryLevelReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceEvent.BatteryLevelReading)
}

inline void DeviceEvent_BatteryLevelReading::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reading_){0}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceEvent_BatteryLevelReading::~DeviceEvent_BatteryLevelReading() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceEvent.BatteryLevelReading)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceEvent_BatteryLevelReading::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceEvent_BatteryLevelReading::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceEvent_BatteryLevelReading::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceEvent.BatteryLevelReading)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.reading_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.reading_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceEvent_BatteryLevelReading::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double reading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.reading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceEvent_BatteryLevelReading::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceEvent.BatteryLevelReading)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // double reading = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_reading = this->_internal_reading();
  ::uint64_t raw_reading;
  memcpy(&raw_reading, &tmp_reading, sizeof(tmp_reading));
  if (raw_reading != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_reading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceEvent.BatteryLevelReading)
  return target;
}

::size_t DeviceEvent_BatteryLevelReading::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceEvent.BatteryLevelReading)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double reading = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_reading = this->_internal_reading();
  ::uint64_t raw_reading;
  memcpy(&raw_reading, &tmp_reading, sizeof(tmp_reading));
  if (raw_reading != 0) {
    total_size += 1 + 8;
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceEvent_BatteryLevelReading::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceEvent_BatteryLevelReading::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceEvent_BatteryLevelReading::GetClassData() const { return &_class_data_; }


void DeviceEvent_BatteryLevelReading::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceEvent_BatteryLevelReading*>(&to_msg);
  auto& from = static_cast<const DeviceEvent_BatteryLevelReading&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceEvent.BatteryLevelReading)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_reading = from._internal_reading();
  ::uint64_t raw_reading;
  memcpy(&raw_reading, &tmp_reading, sizeof(tmp_reading));
  if (raw_reading != 0) {
    _this->_internal_set_reading(from._internal_reading());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceEvent_BatteryLevelReading::CopyFrom(const DeviceEvent_BatteryLevelReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceEvent.BatteryLevelReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceEvent_BatteryLevelReading::IsInitialized() const {
  return true;
}

void DeviceEvent_BatteryLevelReading::InternalSwap(DeviceEvent_BatteryLevelReading* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceEvent_BatteryLevelReading, _impl_.index_)
      + sizeof(DeviceEvent_BatteryLevelReading::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(DeviceEvent_BatteryLevelReading, _impl_.reading_)>(
          reinterpret_cast<char*>(&_impl_.reading_),
          reinterpret_cast<char*>(&other->_impl_.reading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceEvent_BatteryLevelReading::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[34]);
}
// ===================================================================

class DeviceEvent_RSSILevelReading::_Internal {
 public:
};

DeviceEvent_RSSILevelReading::DeviceEvent_RSSILevelReading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceEvent.RSSILevelReading)
}
DeviceEvent_RSSILevelReading::DeviceEvent_RSSILevelReading(const DeviceEvent_RSSILevelReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceEvent.RSSILevelReading)
}

inline void DeviceEvent_RSSILevelReading::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , decltype(_impl_.reading_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceEvent_RSSILevelReading::~DeviceEvent_RSSILevelReading() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceEvent.RSSILevelReading)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceEvent_RSSILevelReading::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceEvent_RSSILevelReading::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceEvent_RSSILevelReading::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceEvent.RSSILevelReading)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reading_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.reading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceEvent_RSSILevelReading::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 reading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.reading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceEvent_RSSILevelReading::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceEvent.RSSILevelReading)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 reading = 2;
  if (this->_internal_reading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_reading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceEvent.RSSILevelReading)
  return target;
}

::size_t DeviceEvent_RSSILevelReading::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceEvent.RSSILevelReading)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // int32 reading = 2;
  if (this->_internal_reading() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reading());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceEvent_RSSILevelReading::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceEvent_RSSILevelReading::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceEvent_RSSILevelReading::GetClassData() const { return &_class_data_; }


void DeviceEvent_RSSILevelReading::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceEvent_RSSILevelReading*>(&to_msg);
  auto& from = static_cast<const DeviceEvent_RSSILevelReading&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceEvent.RSSILevelReading)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_reading() != 0) {
    _this->_internal_set_reading(from._internal_reading());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceEvent_RSSILevelReading::CopyFrom(const DeviceEvent_RSSILevelReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceEvent.RSSILevelReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceEvent_RSSILevelReading::IsInitialized() const {
  return true;
}

void DeviceEvent_RSSILevelReading::InternalSwap(DeviceEvent_RSSILevelReading* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceEvent_RSSILevelReading, _impl_.reading_)
      + sizeof(DeviceEvent_RSSILevelReading::_impl_.reading_)
      - PROTOBUF_FIELD_OFFSET(DeviceEvent_RSSILevelReading, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceEvent_RSSILevelReading::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[35]);
}
// ===================================================================

class DeviceEvent::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::Buttplug::DeviceEvent, _impl_._oneof_case_);
  static const ::Buttplug::DeviceEvent_Disconnect& disconnect(const DeviceEvent* msg);
  static const ::Buttplug::DeviceEvent_BatteryLevelReading& battery_level_reading(const DeviceEvent* msg);
  static const ::Buttplug::DeviceEvent_RSSILevelReading& rssi_level_reading(const DeviceEvent* msg);
  static const ::Buttplug::DeviceEvent_RawReading& raw_reading(const DeviceEvent* msg);
};

const ::Buttplug::DeviceEvent_Disconnect&
DeviceEvent::_Internal::disconnect(const DeviceEvent* msg) {
  return *msg->_impl_.msg_.disconnect_;
}
const ::Buttplug::DeviceEvent_BatteryLevelReading&
DeviceEvent::_Internal::battery_level_reading(const DeviceEvent* msg) {
  return *msg->_impl_.msg_.battery_level_reading_;
}
const ::Buttplug::DeviceEvent_RSSILevelReading&
DeviceEvent::_Internal::rssi_level_reading(const DeviceEvent* msg) {
  return *msg->_impl_.msg_.rssi_level_reading_;
}
const ::Buttplug::DeviceEvent_RawReading&
DeviceEvent::_Internal::raw_reading(const DeviceEvent* msg) {
  return *msg->_impl_.msg_.raw_reading_;
}
void DeviceEvent::set_allocated_disconnect(::Buttplug::DeviceEvent_Disconnect* disconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (disconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(disconnect);
    if (message_arena != submessage_arena) {
      disconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disconnect, submessage_arena);
    }
    set_has_disconnect();
    _impl_.msg_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceEvent.disconnect)
}
void DeviceEvent::set_allocated_battery_level_reading(::Buttplug::DeviceEvent_BatteryLevelReading* battery_level_reading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (battery_level_reading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(battery_level_reading);
    if (message_arena != submessage_arena) {
      battery_level_reading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery_level_reading, submessage_arena);
    }
    set_has_battery_level_reading();
    _impl_.msg_.battery_level_reading_ = battery_level_reading;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceEvent.battery_level_reading)
}
void DeviceEvent::set_allocated_rssi_level_reading(::Buttplug::DeviceEvent_RSSILevelReading* rssi_level_reading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (rssi_level_reading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rssi_level_reading);
    if (message_arena != submessage_arena) {
      rssi_level_reading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rssi_level_reading, submessage_arena);
    }
    set_has_rssi_level_reading();
    _impl_.msg_.rssi_level_reading_ = rssi_level_reading;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceEvent.rssi_level_reading)
}
void DeviceEvent::set_allocated_raw_reading(::Buttplug::DeviceEvent_RawReading* raw_reading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (raw_reading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw_reading);
    if (message_arena != submessage_arena) {
      raw_reading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_reading, submessage_arena);
    }
    set_has_raw_reading();
    _impl_.msg_.raw_reading_ = raw_reading;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.DeviceEvent.raw_reading)
}
DeviceEvent::DeviceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.DeviceEvent)
}
DeviceEvent::DeviceEvent(const DeviceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::Buttplug::DeviceEvent_Disconnect::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case kBatteryLevelReading: {
      _this->_internal_mutable_battery_level_reading()->::Buttplug::DeviceEvent_BatteryLevelReading::MergeFrom(
          from._internal_battery_level_reading());
      break;
    }
    case kRssiLevelReading: {
      _this->_internal_mutable_rssi_level_reading()->::Buttplug::DeviceEvent_RSSILevelReading::MergeFrom(
          from._internal_rssi_level_reading());
      break;
    }
    case kRawReading: {
      _this->_internal_mutable_raw_reading()->::Buttplug::DeviceEvent_RawReading::MergeFrom(
          from._internal_raw_reading());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Buttplug.DeviceEvent)
}

inline void DeviceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

DeviceEvent::~DeviceEvent() {
  // @@protoc_insertion_point(destructor:Buttplug.DeviceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void DeviceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceEvent::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:Buttplug.DeviceEvent)
  switch (msg_case()) {
    case kDisconnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.disconnect_;
      }
      break;
    }
    case kBatteryLevelReading: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.battery_level_reading_;
      }
      break;
    }
    case kRssiLevelReading: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.rssi_level_reading_;
      }
      break;
    }
    case kRawReading: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.raw_reading_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void DeviceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.DeviceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.DeviceEvent.Disconnect disconnect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_disconnect(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceEvent.BatteryLevelReading battery_level_reading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery_level_reading(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceEvent.RSSILevelReading rssi_level_reading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rssi_level_reading(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceEvent.RawReading raw_reading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_reading(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.DeviceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.DeviceEvent.Disconnect disconnect = 1;
  if (_internal_has_disconnect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::disconnect(this),
        _Internal::disconnect(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceEvent.BatteryLevelReading battery_level_reading = 2;
  if (_internal_has_battery_level_reading()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::battery_level_reading(this),
        _Internal::battery_level_reading(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceEvent.RSSILevelReading rssi_level_reading = 3;
  if (_internal_has_rssi_level_reading()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rssi_level_reading(this),
        _Internal::rssi_level_reading(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceEvent.RawReading raw_reading = 4;
  if (_internal_has_raw_reading()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::raw_reading(this),
        _Internal::raw_reading(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.DeviceEvent)
  return target;
}

::size_t DeviceEvent::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.DeviceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .Buttplug.DeviceEvent.Disconnect disconnect = 1;
    case kDisconnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.disconnect_);
      break;
    }
    // .Buttplug.DeviceEvent.BatteryLevelReading battery_level_reading = 2;
    case kBatteryLevelReading: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.battery_level_reading_);
      break;
    }
    // .Buttplug.DeviceEvent.RSSILevelReading rssi_level_reading = 3;
    case kRssiLevelReading: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.rssi_level_reading_);
      break;
    }
    // .Buttplug.DeviceEvent.RawReading raw_reading = 4;
    case kRawReading: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.raw_reading_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceEvent::GetClassData() const { return &_class_data_; }


void DeviceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceEvent*>(&to_msg);
  auto& from = static_cast<const DeviceEvent&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.DeviceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::Buttplug::DeviceEvent_Disconnect::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case kBatteryLevelReading: {
      _this->_internal_mutable_battery_level_reading()->::Buttplug::DeviceEvent_BatteryLevelReading::MergeFrom(
          from._internal_battery_level_reading());
      break;
    }
    case kRssiLevelReading: {
      _this->_internal_mutable_rssi_level_reading()->::Buttplug::DeviceEvent_RSSILevelReading::MergeFrom(
          from._internal_rssi_level_reading());
      break;
    }
    case kRawReading: {
      _this->_internal_mutable_raw_reading()->::Buttplug::DeviceEvent_RawReading::MergeFrom(
          from._internal_raw_reading());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceEvent::CopyFrom(const DeviceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.DeviceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceEvent::IsInitialized() const {
  return true;
}

void DeviceEvent::InternalSwap(DeviceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceEvent::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[36]);
}
// ===================================================================

class ButtplugFFIServerMessage_FFIMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::Buttplug::ButtplugFFIServerMessage_FFIMessage, _impl_._oneof_case_);
  static const ::Buttplug::ServerMessage& server_message(const ButtplugFFIServerMessage_FFIMessage* msg);
  static const ::Buttplug::DeviceEvent& device_event(const ButtplugFFIServerMessage_FFIMessage* msg);
};

const ::Buttplug::ServerMessage&
ButtplugFFIServerMessage_FFIMessage::_Internal::server_message(const ButtplugFFIServerMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.server_message_;
}
const ::Buttplug::DeviceEvent&
ButtplugFFIServerMessage_FFIMessage::_Internal::device_event(const ButtplugFFIServerMessage_FFIMessage* msg) {
  return *msg->_impl_.msg_.device_event_;
}
void ButtplugFFIServerMessage_FFIMessage::set_allocated_server_message(::Buttplug::ServerMessage* server_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (server_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(server_message);
    if (message_arena != submessage_arena) {
      server_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_message, submessage_arena);
    }
    set_has_server_message();
    _impl_.msg_.server_message_ = server_message;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ButtplugFFIServerMessage.FFIMessage.server_message)
}
void ButtplugFFIServerMessage_FFIMessage::set_allocated_device_event(::Buttplug::DeviceEvent* device_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (device_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(device_event);
    if (message_arena != submessage_arena) {
      device_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_event, submessage_arena);
    }
    set_has_device_event();
    _impl_.msg_.device_event_ = device_event;
  }
  // @@protoc_insertion_point(field_set_allocated:Buttplug.ButtplugFFIServerMessage.FFIMessage.device_event)
}
ButtplugFFIServerMessage_FFIMessage::ButtplugFFIServerMessage_FFIMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ButtplugFFIServerMessage.FFIMessage)
}
ButtplugFFIServerMessage_FFIMessage::ButtplugFFIServerMessage_FFIMessage(const ButtplugFFIServerMessage_FFIMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ButtplugFFIServerMessage_FFIMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kServerMessage: {
      _this->_internal_mutable_server_message()->::Buttplug::ServerMessage::MergeFrom(
          from._internal_server_message());
      break;
    }
    case kDeviceEvent: {
      _this->_internal_mutable_device_event()->::Buttplug::DeviceEvent::MergeFrom(
          from._internal_device_event());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Buttplug.ButtplugFFIServerMessage.FFIMessage)
}

inline void ButtplugFFIServerMessage_FFIMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

ButtplugFFIServerMessage_FFIMessage::~ButtplugFFIServerMessage_FFIMessage() {
  // @@protoc_insertion_point(destructor:Buttplug.ButtplugFFIServerMessage.FFIMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ButtplugFFIServerMessage_FFIMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ButtplugFFIServerMessage_FFIMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ButtplugFFIServerMessage_FFIMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:Buttplug.ButtplugFFIServerMessage.FFIMessage)
  switch (msg_case()) {
    case kServerMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.server_message_;
      }
      break;
    }
    case kDeviceEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.device_event_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void ButtplugFFIServerMessage_FFIMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ButtplugFFIServerMessage.FFIMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtplugFFIServerMessage_FFIMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Buttplug.ServerMessage server_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_message(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.DeviceEvent device_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ButtplugFFIServerMessage_FFIMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ButtplugFFIServerMessage.FFIMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Buttplug.ServerMessage server_message = 1;
  if (_internal_has_server_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::server_message(this),
        _Internal::server_message(this).GetCachedSize(), target, stream);
  }

  // .Buttplug.DeviceEvent device_event = 2;
  if (_internal_has_device_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::device_event(this),
        _Internal::device_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ButtplugFFIServerMessage.FFIMessage)
  return target;
}

::size_t ButtplugFFIServerMessage_FFIMessage::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ButtplugFFIServerMessage.FFIMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .Buttplug.ServerMessage server_message = 1;
    case kServerMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.server_message_);
      break;
    }
    // .Buttplug.DeviceEvent device_event = 2;
    case kDeviceEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.device_event_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ButtplugFFIServerMessage_FFIMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ButtplugFFIServerMessage_FFIMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ButtplugFFIServerMessage_FFIMessage::GetClassData() const { return &_class_data_; }


void ButtplugFFIServerMessage_FFIMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ButtplugFFIServerMessage_FFIMessage*>(&to_msg);
  auto& from = static_cast<const ButtplugFFIServerMessage_FFIMessage&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ButtplugFFIServerMessage.FFIMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kServerMessage: {
      _this->_internal_mutable_server_message()->::Buttplug::ServerMessage::MergeFrom(
          from._internal_server_message());
      break;
    }
    case kDeviceEvent: {
      _this->_internal_mutable_device_event()->::Buttplug::DeviceEvent::MergeFrom(
          from._internal_device_event());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ButtplugFFIServerMessage_FFIMessage::CopyFrom(const ButtplugFFIServerMessage_FFIMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ButtplugFFIServerMessage.FFIMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtplugFFIServerMessage_FFIMessage::IsInitialized() const {
  return true;
}

void ButtplugFFIServerMessage_FFIMessage::InternalSwap(ButtplugFFIServerMessage_FFIMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtplugFFIServerMessage_FFIMessage::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[37]);
}
// ===================================================================

class ButtplugFFIServerMessage::_Internal {
 public:
  static const ::Buttplug::ButtplugFFIServerMessage_FFIMessage& message(const ButtplugFFIServerMessage* msg);
};

const ::Buttplug::ButtplugFFIServerMessage_FFIMessage&
ButtplugFFIServerMessage::_Internal::message(const ButtplugFFIServerMessage* msg) {
  return *msg->_impl_.message_;
}
ButtplugFFIServerMessage::ButtplugFFIServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buttplug.ButtplugFFIServerMessage)
}
ButtplugFFIServerMessage::ButtplugFFIServerMessage(const ButtplugFFIServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ButtplugFFIServerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::Buttplug::ButtplugFFIServerMessage_FFIMessage(*from._impl_.message_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:Buttplug.ButtplugFFIServerMessage)
}

inline void ButtplugFFIServerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){nullptr}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ButtplugFFIServerMessage::~ButtplugFFIServerMessage() {
  // @@protoc_insertion_point(destructor:Buttplug.ButtplugFFIServerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ButtplugFFIServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.message_;
}

void ButtplugFFIServerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ButtplugFFIServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Buttplug.ButtplugFFIServerMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtplugFFIServerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Buttplug.ButtplugFFIServerMessage.FFIMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ButtplugFFIServerMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:Buttplug.ButtplugFFIServerMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .Buttplug.ButtplugFFIServerMessage.FFIMessage message = 2;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buttplug.ButtplugFFIServerMessage)
  return target;
}

::size_t ButtplugFFIServerMessage::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:Buttplug.ButtplugFFIServerMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Buttplug.ButtplugFFIServerMessage.FFIMessage message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ButtplugFFIServerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ButtplugFFIServerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ButtplugFFIServerMessage::GetClassData() const { return &_class_data_; }


void ButtplugFFIServerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ButtplugFFIServerMessage*>(&to_msg);
  auto& from = static_cast<const ButtplugFFIServerMessage&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:Buttplug.ButtplugFFIServerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::Buttplug::ButtplugFFIServerMessage_FFIMessage::MergeFrom(
        from._internal_message());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ButtplugFFIServerMessage::CopyFrom(const ButtplugFFIServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buttplug.ButtplugFFIServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtplugFFIServerMessage::IsInitialized() const {
  return true;
}

void ButtplugFFIServerMessage::InternalSwap(ButtplugFFIServerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ButtplugFFIServerMessage, _impl_.id_)
      + sizeof(ButtplugFFIServerMessage::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(ButtplugFFIServerMessage, _impl_.message_)>(
          reinterpret_cast<char*>(&_impl_.message_),
          reinterpret_cast<char*>(&other->_impl_.message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtplugFFIServerMessage::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_buttplug_5frs_5fffi_2eproto_getter, &descriptor_table_buttplug_5frs_5fffi_2eproto_once,
      file_level_metadata_buttplug_5frs_5fffi_2eproto[38]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace Buttplug
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Buttplug::ClientMessage_ConnectLocal*
Arena::CreateMaybeMessage< ::Buttplug::ClientMessage_ConnectLocal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ClientMessage_ConnectLocal >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ClientMessage_ConnectWebsocket*
Arena::CreateMaybeMessage< ::Buttplug::ClientMessage_ConnectWebsocket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ClientMessage_ConnectWebsocket >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ClientMessage_StartScanning*
Arena::CreateMaybeMessage< ::Buttplug::ClientMessage_StartScanning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ClientMessage_StartScanning >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ClientMessage_StopScanning*
Arena::CreateMaybeMessage< ::Buttplug::ClientMessage_StopScanning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ClientMessage_StopScanning >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ClientMessage_StopAllDevices*
Arena::CreateMaybeMessage< ::Buttplug::ClientMessage_StopAllDevices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ClientMessage_StopAllDevices >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ClientMessage_Disconnect*
Arena::CreateMaybeMessage< ::Buttplug::ClientMessage_Disconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ClientMessage_Disconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ClientMessage_Ping*
Arena::CreateMaybeMessage< ::Buttplug::ClientMessage_Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ClientMessage_Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ClientMessage_FFIMessage*
Arena::CreateMaybeMessage< ::Buttplug::ClientMessage_FFIMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ClientMessage_FFIMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ClientMessage*
Arena::CreateMaybeMessage< ::Buttplug::ClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_VibrateComponent*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_VibrateComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_VibrateComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_VibrateCmd*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_VibrateCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_VibrateCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_RotateComponent*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_RotateComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_RotateComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_RotateCmd*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_RotateCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_RotateCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_LinearComponent*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_LinearComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_LinearComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_LinearCmd*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_LinearCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_LinearCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_StopDeviceCmd*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_StopDeviceCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_StopDeviceCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_RawReadCmd*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_RawReadCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_RawReadCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_RawWriteCmd*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_RawWriteCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_RawWriteCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_RawSubscribeCmd*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_RawSubscribeCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_RawSubscribeCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_RawUnsubscribeCmd*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_RawUnsubscribeCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_RawUnsubscribeCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_BatteryLevelCmd*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_BatteryLevelCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_BatteryLevelCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_RSSILevelCmd*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_RSSILevelCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_RSSILevelCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage_FFIMessage*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage_FFIMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage_FFIMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceMessage*
Arena::CreateMaybeMessage< ::Buttplug::DeviceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ServerMessage_MessageAttributes*
Arena::CreateMaybeMessage< ::Buttplug::ServerMessage_MessageAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ServerMessage_MessageAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ServerMessage_Ok*
Arena::CreateMaybeMessage< ::Buttplug::ServerMessage_Ok >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ServerMessage_Ok >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ServerMessage_Error*
Arena::CreateMaybeMessage< ::Buttplug::ServerMessage_Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ServerMessage_Error >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ServerMessage_ScanningFinished*
Arena::CreateMaybeMessage< ::Buttplug::ServerMessage_ScanningFinished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ServerMessage_ScanningFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ServerMessage_DeviceAdded*
Arena::CreateMaybeMessage< ::Buttplug::ServerMessage_DeviceAdded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ServerMessage_DeviceAdded >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ServerMessage_DeviceRemoved*
Arena::CreateMaybeMessage< ::Buttplug::ServerMessage_DeviceRemoved >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ServerMessage_DeviceRemoved >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ServerMessage_Disconnect*
Arena::CreateMaybeMessage< ::Buttplug::ServerMessage_Disconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ServerMessage_Disconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ServerMessage*
Arena::CreateMaybeMessage< ::Buttplug::ServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceEvent_Disconnect*
Arena::CreateMaybeMessage< ::Buttplug::DeviceEvent_Disconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceEvent_Disconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceEvent_RawReading*
Arena::CreateMaybeMessage< ::Buttplug::DeviceEvent_RawReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceEvent_RawReading >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceEvent_BatteryLevelReading*
Arena::CreateMaybeMessage< ::Buttplug::DeviceEvent_BatteryLevelReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceEvent_BatteryLevelReading >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceEvent_RSSILevelReading*
Arena::CreateMaybeMessage< ::Buttplug::DeviceEvent_RSSILevelReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceEvent_RSSILevelReading >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::DeviceEvent*
Arena::CreateMaybeMessage< ::Buttplug::DeviceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::DeviceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ButtplugFFIServerMessage_FFIMessage*
Arena::CreateMaybeMessage< ::Buttplug::ButtplugFFIServerMessage_FFIMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ButtplugFFIServerMessage_FFIMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Buttplug::ButtplugFFIServerMessage*
Arena::CreateMaybeMessage< ::Buttplug::ButtplugFFIServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buttplug::ButtplugFFIServerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
